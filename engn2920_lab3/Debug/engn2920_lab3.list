
engn2920_lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0a0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  0800b340  0800b340  0001b340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b668  0800b668  0001b668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b670  0800b670  0001b670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b674  0800b674  0001b674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  0800b678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001318  24000060  0800b6d8  00020060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001378  0800b6d8  00021378  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00019ac9  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002b13  00000000  00000000  00039b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001478  00000000  00000000  0003c6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000100c  00000000  00000000  0003db28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039161  00000000  00000000  0003eb34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000190c8  00000000  00000000  00077c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00177306  00000000  00000000  00090d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005fd8  00000000  00000000  00208064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000063  00000000  00000000  0020e03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b328 	.word	0x0800b328

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	0800b328 	.word	0x0800b328

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <myprintf>:
uint32_t pen_pressure= 0;

static uint32_t gper=0;

static void myprintf (const char *fmt, ...)
{
 800067c:	b40f      	push	{r0, r1, r2, r3}
 800067e:	b580      	push	{r7, lr}
 8000680:	b0c2      	sub	sp, #264	; 0x108
 8000682:	af00      	add	r7, sp, #0
	va_list arglist;
	int nby;
	unsigned char st[256];

	if (!fmt) return;
 8000684:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000688:	2b00      	cmp	r3, #0
 800068a:	d022      	beq.n	80006d2 <myprintf+0x56>
	va_start(arglist,fmt);
 800068c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000690:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	nby = vsnprintf((char *)st,sizeof(st),fmt,arglist);
 8000694:	4638      	mov	r0, r7
 8000696:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800069a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800069e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a2:	f009 fb77 	bl	8009d94 <vsniprintf>
 80006a6:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	va_end(arglist);
	if (nby < 0) { nby = sizeof(st)-1; } //print truncated string in case too long
 80006aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	da02      	bge.n	80006b8 <myprintf+0x3c>
 80006b2:	23ff      	movs	r3, #255	; 0xff
 80006b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	if (nby) HAL_UART_Transmit(&huart3,st,nby,10);
 80006b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d009      	beq.n	80006d4 <myprintf+0x58>
 80006c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	4639      	mov	r1, r7
 80006c8:	230a      	movs	r3, #10
 80006ca:	4806      	ldr	r0, [pc, #24]	; (80006e4 <myprintf+0x68>)
 80006cc:	f008 f954 	bl	8008978 <HAL_UART_Transmit>
 80006d0:	e000      	b.n	80006d4 <myprintf+0x58>
	if (!fmt) return;
 80006d2:	bf00      	nop
}
 80006d4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80006d8:	46bd      	mov	sp, r7
 80006da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006de:	b004      	add	sp, #16
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	240001c4 	.word	0x240001c4

080006e8 <mygetch>:

int mygetch (void) //Poll
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	71fb      	strb	r3, [r7, #7]
	if (HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, 0) == HAL_OK) return ch;
 80006f2:	1df9      	adds	r1, r7, #7
 80006f4:	2300      	movs	r3, #0
 80006f6:	2201      	movs	r2, #1
 80006f8:	4806      	ldr	r0, [pc, #24]	; (8000714 <mygetch+0x2c>)
 80006fa:	f008 f9cb 	bl	8008a94 <HAL_UART_Receive>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d101      	bne.n	8000708 <mygetch+0x20>
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	e001      	b.n	800070c <mygetch+0x24>
	return -1; //HAL_TIMEOUT
 8000708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	240001c4 	.word	0x240001c4

08000718 <generate_lookup_table>:

void generate_lookup_table(int *arr, int table_size) {
 8000718:	b480      	push	{r7}
 800071a:	b089      	sub	sp, #36	; 0x24
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
    float t_max = 0.75; // Maximum time to reach full speed
 8000722:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8000726:	613b      	str	r3, [r7, #16]
    int v_min= 2000;
 8000728:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800072c:	60fb      	str	r3, [r7, #12]
	int v_max= 16000;
 800072e:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8000732:	60bb      	str	r3, [r7, #8]
    float t = 0;
 8000734:	f04f 0300 	mov.w	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
    int f = v_min;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < table_size; i++) {
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
 8000742:	e03e      	b.n	80007c2 <generate_lookup_table+0xaa>
        if (t < t_max) {
 8000744:	ed97 7a07 	vldr	s14, [r7, #28]
 8000748:	edd7 7a04 	vldr	s15, [r7, #16]
 800074c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000754:	d532      	bpl.n	80007bc <generate_lookup_table+0xa4>
            t += (float)1/f;
 8000756:	69bb      	ldr	r3, [r7, #24]
 8000758:	ee07 3a90 	vmov	s15, r3
 800075c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000760:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000768:	ed97 7a07 	vldr	s14, [r7, #28]
 800076c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000770:	edc7 7a07 	vstr	s15, [r7, #28]
            f = ((v_max - v_min) * t / t_max) + v_min;
 8000774:	68ba      	ldr	r2, [r7, #8]
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	ee07 3a90 	vmov	s15, r3
 800077e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000782:	edd7 7a07 	vldr	s15, [r7, #28]
 8000786:	ee67 6a27 	vmul.f32	s13, s14, s15
 800078a:	edd7 7a04 	vldr	s15, [r7, #16]
 800078e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	ee07 3a90 	vmov	s15, r3
 8000798:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800079c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007a4:	ee17 3a90 	vmov	r3, s15
 80007a8:	61bb      	str	r3, [r7, #24]
            arr[i] = 64000000 / f;  // Calculate timer reload value based on frequency
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	4413      	add	r3, r2
 80007b2:	4909      	ldr	r1, [pc, #36]	; (80007d8 <generate_lookup_table+0xc0>)
 80007b4:	69ba      	ldr	r2, [r7, #24]
 80007b6:	fb91 f2f2 	sdiv	r2, r1, r2
 80007ba:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < table_size; i++) {
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	3301      	adds	r3, #1
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	697a      	ldr	r2, [r7, #20]
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	dbbc      	blt.n	8000744 <generate_lookup_table+0x2c>
        }
    }
}
 80007ca:	bf00      	nop
 80007cc:	bf00      	nop
 80007ce:	3724      	adds	r7, #36	; 0x24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	03d09000 	.word	0x03d09000

080007dc <HAL_TIM_PWM_PulseFinishedCallback>:
}

float x_ratio = 1.0;
float y_ratio = 1.0;
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
   if (htim == &htim2 && X_moving)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a30      	ldr	r2, [pc, #192]	; (80008a8 <HAL_TIM_PWM_PulseFinishedCallback+0xcc>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d140      	bne.n	800086e <HAL_TIM_PWM_PulseFinishedCallback+0x92>
 80007ec:	4b2f      	ldr	r3, [pc, #188]	; (80008ac <HAL_TIM_PWM_PulseFinishedCallback+0xd0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d03c      	beq.n	800086e <HAL_TIM_PWM_PulseFinishedCallback+0x92>
  			   TIM2->ARR = X_period-1;
  			   TIM2->CCR4 = X_period/2-1;

  			   */

		   if (X_step_count >= X_step_goal){
 80007f4:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <HAL_TIM_PWM_PulseFinishedCallback+0xd4>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	4b2e      	ldr	r3, [pc, #184]	; (80008b4 <HAL_TIM_PWM_PulseFinishedCallback+0xd8>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	db31      	blt.n	8000864 <HAL_TIM_PWM_PulseFinishedCallback+0x88>
		   			  X_moving = 0;
 8000800:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <HAL_TIM_PWM_PulseFinishedCallback+0xd0>)
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
		   			  HAL_GPIO_WritePin(X_enable_actlo_GPIO_Port, X_enable_actlo_Pin, 1);
 8000806:	2201      	movs	r2, #1
 8000808:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800080c:	482a      	ldr	r0, [pc, #168]	; (80008b8 <HAL_TIM_PWM_PulseFinishedCallback+0xdc>)
 800080e:	f003 f8f5 	bl	80039fc <HAL_GPIO_WritePin>
		   			  TIM2->ARR = 0;
 8000812:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000816:	2200      	movs	r2, #0
 8000818:	62da      	str	r2, [r3, #44]	; 0x2c
		   			  HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_4);
 800081a:	210c      	movs	r1, #12
 800081c:	4822      	ldr	r0, [pc, #136]	; (80008a8 <HAL_TIM_PWM_PulseFinishedCallback+0xcc>)
 800081e:	f007 f8e5 	bl	80079ec <HAL_TIM_PWM_Stop_IT>
		   			  X_moveCompleted= true;
 8000822:	4b26      	ldr	r3, [pc, #152]	; (80008bc <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 8000824:	2201      	movs	r2, #1
 8000826:	701a      	strb	r2, [r3, #0]
		   			  myprintf("DONE moving X %d\n\r",X_step_count);
 8000828:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <HAL_TIM_PWM_PulseFinishedCallback+0xd4>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4619      	mov	r1, r3
 800082e:	4824      	ldr	r0, [pc, #144]	; (80008c0 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>)
 8000830:	f7ff ff24 	bl	800067c <myprintf>

		   			 Y_moving = 0;
 8000834:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <HAL_TIM_PWM_PulseFinishedCallback+0xe8>)
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(Y_enable_actlo_GPIO_Port, Y_enable_actlo_Pin, 1);
 800083a:	2201      	movs	r2, #1
 800083c:	2120      	movs	r1, #32
 800083e:	4822      	ldr	r0, [pc, #136]	; (80008c8 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 8000840:	f003 f8dc 	bl	80039fc <HAL_GPIO_WritePin>
				  TIM3->ARR = 0;
 8000844:	4b21      	ldr	r3, [pc, #132]	; (80008cc <HAL_TIM_PWM_PulseFinishedCallback+0xf0>)
 8000846:	2200      	movs	r2, #0
 8000848:	62da      	str	r2, [r3, #44]	; 0x2c
				  HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 800084a:	2100      	movs	r1, #0
 800084c:	4820      	ldr	r0, [pc, #128]	; (80008d0 <HAL_TIM_PWM_PulseFinishedCallback+0xf4>)
 800084e:	f007 f8cd 	bl	80079ec <HAL_TIM_PWM_Stop_IT>
				  Y_moveCompleted = true;
 8000852:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 8000854:	2201      	movs	r2, #1
 8000856:	701a      	strb	r2, [r3, #0]
				  myprintf("DONE moving Y %d\n\r",Y_step_goal);
 8000858:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4619      	mov	r1, r3
 800085e:	481f      	ldr	r0, [pc, #124]	; (80008dc <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8000860:	f7ff ff0c 	bl	800067c <myprintf>
		   		   }
		   X_step_count++;//=x_ratio;
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <HAL_TIM_PWM_PulseFinishedCallback+0xd4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	3301      	adds	r3, #1
 800086a:	4a11      	ldr	r2, [pc, #68]	; (80008b0 <HAL_TIM_PWM_PulseFinishedCallback+0xd4>)
 800086c:	6013      	str	r3, [r2, #0]
   }

   if (htim == &htim3 && Y_moving)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <HAL_TIM_PWM_PulseFinishedCallback+0xf4>)
 8000872:	4293      	cmp	r3, r2
  		 Y_step_count++;//y_ratio;
  		 */

     }

   if(htim == &htim4)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a1a      	ldr	r2, [pc, #104]	; (80008e0 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d110      	bne.n	800089e <HAL_TIM_PWM_PulseFinishedCallback+0xc2>
   {
	   // if pen up, move till adc #>
	   if (pen_pressure > 10000){
 800087c:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f242 7210 	movw	r2, #10000	; 0x2710
 8000884:	4293      	cmp	r3, r2
 8000886:	d902      	bls.n	800088e <HAL_TIM_PWM_PulseFinishedCallback+0xb2>
		   pen_is_down=1;
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 800088a:	2201      	movs	r2, #1
 800088c:	601a      	str	r2, [r3, #0]
	   }

	   if(pen_pressure < 500 ){ //// if move pen down, move till adc #<
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000896:	d202      	bcs.n	800089e <HAL_TIM_PWM_PulseFinishedCallback+0xc2>
		   pen_is_up=1;
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 800089a:	2201      	movs	r2, #1
 800089c:	601a      	str	r2, [r3, #0]
	   }
   }
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	240000e0 	.word	0x240000e0
 80008ac:	2400120c 	.word	0x2400120c
 80008b0:	24001204 	.word	0x24001204
 80008b4:	24001214 	.word	0x24001214
 80008b8:	58021000 	.word	0x58021000
 80008bc:	24001200 	.word	0x24001200
 80008c0:	0800b340 	.word	0x0800b340
 80008c4:	24001210 	.word	0x24001210
 80008c8:	58021400 	.word	0x58021400
 80008cc:	40000400 	.word	0x40000400
 80008d0:	2400012c 	.word	0x2400012c
 80008d4:	24001201 	.word	0x24001201
 80008d8:	24001218 	.word	0x24001218
 80008dc:	0800b354 	.word	0x0800b354
 80008e0:	24000178 	.word	0x24000178
 80008e4:	24001224 	.word	0x24001224
 80008e8:	2400121c 	.word	0x2400121c
 80008ec:	24001220 	.word	0x24001220

080008f0 <step_motor_XY>:
	HAL_GPIO_WritePin(Y_direction_GPIO_Port, Y_direction_Pin, y_dir);

	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1); // Start PWM
}

void step_motor_XY(int M_x,int x_dir,int M_y,int y_dir){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
 80008fc:	603b      	str	r3, [r7, #0]
		myprintf("step XY [%d, %d]\n\r",M_x,M_y);
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	68f9      	ldr	r1, [r7, #12]
 8000902:	4839      	ldr	r0, [pc, #228]	; (80009e8 <step_motor_XY+0xf8>)
 8000904:	f7ff feba 	bl	800067c <myprintf>
		X_step_goal = M_x;
 8000908:	4a38      	ldr	r2, [pc, #224]	; (80009ec <step_motor_XY+0xfc>)
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	6013      	str	r3, [r2, #0]
		X_step_count=0;
 800090e:	4b38      	ldr	r3, [pc, #224]	; (80009f0 <step_motor_XY+0x100>)
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]

		float r = M_x/M_y;
 8000914:	68fa      	ldr	r2, [r7, #12]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	fb92 f3f3 	sdiv	r3, r2, r3
 800091c:	ee07 3a90 	vmov	s15, r3
 8000920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000924:	edc7 7a05 	vstr	s15, [r7, #20]

		TIM2->ARR = r*arr_X[300]-1; //write period for next cycle
 8000928:	4b32      	ldr	r3, [pc, #200]	; (80009f4 <step_motor_XY+0x104>)
 800092a:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
 800092e:	ee07 3a90 	vmov	s15, r3
 8000932:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000936:	edd7 7a05 	vldr	s15, [r7, #20]
 800093a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800093e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000942:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000946:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800094a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800094e:	ee17 2a90 	vmov	r2, s15
 8000952:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM2->CCR4 = arr_X[0]/2 ;
 8000954:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <step_motor_XY+0x104>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	da00      	bge.n	800095e <step_motor_XY+0x6e>
 800095c:	3301      	adds	r3, #1
 800095e:	105b      	asrs	r3, r3, #1
 8000960:	461a      	mov	r2, r3
 8000962:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000966:	641a      	str	r2, [r3, #64]	; 0x40

		HAL_GPIO_WritePin(X_enable_actlo_GPIO_Port, X_enable_actlo_Pin, 0);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800096e:	4822      	ldr	r0, [pc, #136]	; (80009f8 <step_motor_XY+0x108>)
 8000970:	f003 f844 	bl	80039fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(X_direction_GPIO_Port, X_direction_Pin, x_dir);
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	b2db      	uxtb	r3, r3
 8000978:	461a      	mov	r2, r3
 800097a:	2180      	movs	r1, #128	; 0x80
 800097c:	481e      	ldr	r0, [pc, #120]	; (80009f8 <step_motor_XY+0x108>)
 800097e:	f003 f83d 	bl	80039fc <HAL_GPIO_WritePin>

		Y_step_goal = M_y;
 8000982:	4a1e      	ldr	r2, [pc, #120]	; (80009fc <step_motor_XY+0x10c>)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6013      	str	r3, [r2, #0]
		Y_step_count = 0;
 8000988:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <step_motor_XY+0x110>)
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]

		TIM3->ARR = arr_Y[300]-1; //write period for next cycle
 800098e:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <step_motor_XY+0x114>)
 8000990:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
 8000994:	1e5a      	subs	r2, r3, #1
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <step_motor_XY+0x118>)
 8000998:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM3->CCR1 = arr_Y[0]/2 ;
 800099a:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <step_motor_XY+0x114>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	da00      	bge.n	80009a4 <step_motor_XY+0xb4>
 80009a2:	3301      	adds	r3, #1
 80009a4:	105b      	asrs	r3, r3, #1
 80009a6:	461a      	mov	r2, r3
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <step_motor_XY+0x118>)
 80009aa:	635a      	str	r2, [r3, #52]	; 0x34

		HAL_GPIO_WritePin(Y_enable_actlo_GPIO_Port, Y_enable_actlo_Pin, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2120      	movs	r1, #32
 80009b0:	4816      	ldr	r0, [pc, #88]	; (8000a0c <step_motor_XY+0x11c>)
 80009b2:	f003 f823 	bl	80039fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y_direction_GPIO_Port, Y_direction_Pin, y_dir);
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	461a      	mov	r2, r3
 80009bc:	2110      	movs	r1, #16
 80009be:	4813      	ldr	r0, [pc, #76]	; (8000a0c <step_motor_XY+0x11c>)
 80009c0:	f003 f81c 	bl	80039fc <HAL_GPIO_WritePin>

		X_moving = 1;
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <step_motor_XY+0x120>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	601a      	str	r2, [r3, #0]
		Y_moving = 1;
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <step_motor_XY+0x124>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	601a      	str	r2, [r3, #0]

		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1); // Start PWM
 80009d0:	2100      	movs	r1, #0
 80009d2:	4811      	ldr	r0, [pc, #68]	; (8000a18 <step_motor_XY+0x128>)
 80009d4:	f006 feb0 	bl	8007738 <HAL_TIM_PWM_Start_IT>
		HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4); // Start PWM
 80009d8:	210c      	movs	r1, #12
 80009da:	4810      	ldr	r0, [pc, #64]	; (8000a1c <step_motor_XY+0x12c>)
 80009dc:	f006 feac 	bl	8007738 <HAL_TIM_PWM_Start_IT>
}
 80009e0:	bf00      	nop
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	0800b3a4 	.word	0x0800b3a4
 80009ec:	24001214 	.word	0x24001214
 80009f0:	24001204 	.word	0x24001204
 80009f4:	24000260 	.word	0x24000260
 80009f8:	58021000 	.word	0x58021000
 80009fc:	24001218 	.word	0x24001218
 8000a00:	24001208 	.word	0x24001208
 8000a04:	24000a30 	.word	0x24000a30
 8000a08:	40000400 	.word	0x40000400
 8000a0c:	58021400 	.word	0x58021400
 8000a10:	2400120c 	.word	0x2400120c
 8000a14:	24001210 	.word	0x24001210
 8000a18:	2400012c 	.word	0x2400012c
 8000a1c:	240000e0 	.word	0x240000e0

08000a20 <waitForCompletion>:


void waitForCompletion(){
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
	while(!X_moveCompleted || !Y_moveCompleted){
 8000a24:	bf00      	nop
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <waitForCompletion+0x34>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	f083 0301 	eor.w	r3, r3, #1
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d1f7      	bne.n	8000a26 <waitForCompletion+0x6>
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <waitForCompletion+0x38>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	f083 0301 	eor.w	r3, r3, #1
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1ef      	bne.n	8000a26 <waitForCompletion+0x6>
		//wait
	}
}
 8000a46:	bf00      	nop
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	24001200 	.word	0x24001200
 8000a58:	24001201 	.word	0x24001201

08000a5c <move_X>:

void move_X(int dir){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	TIM2->ARR = 10000-1; //write period for next cycle
 8000a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a68:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a6c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR4 = 1000 ;
 8000a6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a76:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(X_enable_actlo_GPIO_Port, X_enable_actlo_Pin, 0);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a7e:	4809      	ldr	r0, [pc, #36]	; (8000aa4 <move_X+0x48>)
 8000a80:	f002 ffbc 	bl	80039fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(X_direction_GPIO_Port, X_direction_Pin, dir);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	461a      	mov	r2, r3
 8000a8a:	2180      	movs	r1, #128	; 0x80
 8000a8c:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <move_X+0x48>)
 8000a8e:	f002 ffb5 	bl	80039fc <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // Start PWM
 8000a92:	210c      	movs	r1, #12
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <move_X+0x4c>)
 8000a96:	f006 fd41 	bl	800751c <HAL_TIM_PWM_Start>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	58021000 	.word	0x58021000
 8000aa8:	240000e0 	.word	0x240000e0

08000aac <move_Y>:

void move_Y(int dir){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	TIM3->ARR = 10000-1; //write period for next cycle
 8000ab4:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <move_Y+0x40>)
 8000ab6:	f242 720f 	movw	r2, #9999	; 0x270f
 8000aba:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = 1000 ;
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <move_Y+0x40>)
 8000abe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ac2:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_GPIO_WritePin(Y_enable_actlo_GPIO_Port, Y_enable_actlo_Pin, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2120      	movs	r1, #32
 8000ac8:	4809      	ldr	r0, [pc, #36]	; (8000af0 <move_Y+0x44>)
 8000aca:	f002 ff97 	bl	80039fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y_direction_GPIO_Port, Y_direction_Pin, dir);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	2110      	movs	r1, #16
 8000ad6:	4806      	ldr	r0, [pc, #24]	; (8000af0 <move_Y+0x44>)
 8000ad8:	f002 ff90 	bl	80039fc <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Start PWM
 8000adc:	2100      	movs	r1, #0
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <move_Y+0x48>)
 8000ae0:	f006 fd1c 	bl	800751c <HAL_TIM_PWM_Start>
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40000400 	.word	0x40000400
 8000af0:	58021400 	.word	0x58021400
 8000af4:	2400012c 	.word	0x2400012c

08000af8 <moveTo>:


void moveTo(int x, int y) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
	X_moveCompleted = false;
 8000b02:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <moveTo+0xa0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
	Y_moveCompleted = false;
 8000b08:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <moveTo+0xa4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]

	int dx = (x - x_pos);
 8000b0e:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <moveTo+0xa8>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	61fb      	str	r3, [r7, #28]
	int dy = (y - y_pos);
 8000b18:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <moveTo+0xac>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	683a      	ldr	r2, [r7, #0]
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	61bb      	str	r3, [r7, #24]
    // 控制电机移动到(x, y)
    // Function to convert x, y to motor steps and send commands to the motors
    // Convert x, y to steps
    int xSteps = abs(dx)*10;//convertToSteps(abs(dx));
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000b28:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	4413      	add	r3, r2
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	617b      	str	r3, [r7, #20]
    int ySteps = abs(dy)*10;
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000b3c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000b40:	4613      	mov	r3, r2
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	4413      	add	r3, r2
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	613b      	str	r3, [r7, #16]
    int sx = dx > 0 ? 0 : 1 ;
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	bfd4      	ite	le
 8000b50:	2301      	movle	r3, #1
 8000b52:	2300      	movgt	r3, #0
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	60fb      	str	r3, [r7, #12]
    int sy = dy > 0 ? 1 : 0 ;
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	bfcc      	ite	gt
 8000b5e:	2301      	movgt	r3, #1
 8000b60:	2300      	movle	r3, #0
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	60bb      	str	r3, [r7, #8]

   //step_motor_X(xSteps,sx);
   //step_motor_Y(ySteps,sy);
    step_motor_XY(xSteps,sx,ySteps,sy);
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	68f9      	ldr	r1, [r7, #12]
 8000b6c:	6978      	ldr	r0, [r7, #20]
 8000b6e:	f7ff febf 	bl	80008f0 <step_motor_XY>

    waitForCompletion();
 8000b72:	f7ff ff55 	bl	8000a20 <waitForCompletion>
    x_pos = x;
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <moveTo+0xa8>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6013      	str	r3, [r2, #0]
    y_pos = y;
 8000b7c:	4a09      	ldr	r2, [pc, #36]	; (8000ba4 <moveTo+0xac>)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	6013      	str	r3, [r2, #0]
    X_step_goal = 0;
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <moveTo+0xb0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
    Y_step_goal = 0;
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <moveTo+0xb4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
    //myprintf("Current position is, [%d,%d]\n\r",x_pos,y_pos);
}
 8000b8e:	bf00      	nop
 8000b90:	3720      	adds	r7, #32
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	24001200 	.word	0x24001200
 8000b9c:	24001201 	.word	0x24001201
 8000ba0:	24000258 	.word	0x24000258
 8000ba4:	2400025c 	.word	0x2400025c
 8000ba8:	24001214 	.word	0x24001214
 8000bac:	24001218 	.word	0x24001218

08000bb0 <pen_down>:
	int K= 10;//pulses/ revolution
	int L= 1 ;//cm/ revoltuion;
	return distance*K/L;
}

void pen_down(){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	TIM4->ARR = 320000-1; //write period for next cycle
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <pen_down+0x84>)
 8000bb6:	4a20      	ldr	r2, [pc, #128]	; (8000c38 <pen_down+0x88>)
 8000bb8:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CCR4 = 1000 ;
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <pen_down+0x84>)
 8000bbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bc0:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(Z_enable_actlo_GPIO_Port, Z_enable_actlo_Pin, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bc8:	481c      	ldr	r0, [pc, #112]	; (8000c3c <pen_down+0x8c>)
 8000bca:	f002 ff17 	bl	80039fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Z_direction_GPIO_Port, Z_direction_Pin, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	481b      	ldr	r0, [pc, #108]	; (8000c40 <pen_down+0x90>)
 8000bd4:	f002 ff12 	bl	80039fc <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_4); // Start PWM
 8000bd8:	210c      	movs	r1, #12
 8000bda:	481a      	ldr	r0, [pc, #104]	; (8000c44 <pen_down+0x94>)
 8000bdc:	f006 fdac 	bl	8007738 <HAL_TIM_PWM_Start_IT>

	while(!pen_is_down){
 8000be0:	e00d      	b.n	8000bfe <pen_down+0x4e>
		HAL_ADC_Start(&hadc1);
 8000be2:	4819      	ldr	r0, [pc, #100]	; (8000c48 <pen_down+0x98>)
 8000be4:	f001 fc88 	bl	80024f8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000be8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bec:	4816      	ldr	r0, [pc, #88]	; (8000c48 <pen_down+0x98>)
 8000bee:	f001 fd4d 	bl	800268c <HAL_ADC_PollForConversion>
		pen_pressure= HAL_ADC_GetValue(&hadc1);
 8000bf2:	4815      	ldr	r0, [pc, #84]	; (8000c48 <pen_down+0x98>)
 8000bf4:	f001 fe3e 	bl	8002874 <HAL_ADC_GetValue>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <pen_down+0x9c>)
 8000bfc:	6013      	str	r3, [r2, #0]
	while(!pen_is_down){
 8000bfe:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <pen_down+0xa0>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d0ed      	beq.n	8000be2 <pen_down+0x32>
	}

	  HAL_GPIO_WritePin(Z_enable_actlo_GPIO_Port, Z_enable_actlo_Pin, 1);
 8000c06:	2201      	movs	r2, #1
 8000c08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c0c:	480b      	ldr	r0, [pc, #44]	; (8000c3c <pen_down+0x8c>)
 8000c0e:	f002 fef5 	bl	80039fc <HAL_GPIO_WritePin>
	  TIM2->ARR = 0;
 8000c12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c16:	2200      	movs	r2, #0
 8000c18:	62da      	str	r2, [r3, #44]	; 0x2c
	  TIM4->CCR4 = 0;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <pen_down+0x84>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_4);
 8000c20:	210c      	movs	r1, #12
 8000c22:	4808      	ldr	r0, [pc, #32]	; (8000c44 <pen_down+0x94>)
 8000c24:	f006 fee2 	bl	80079ec <HAL_TIM_PWM_Stop_IT>
	  pen_is_up=0;
 8000c28:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <pen_down+0xa4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40000800 	.word	0x40000800
 8000c38:	0004e1ff 	.word	0x0004e1ff
 8000c3c:	58020c00 	.word	0x58020c00
 8000c40:	58021800 	.word	0x58021800
 8000c44:	24000178 	.word	0x24000178
 8000c48:	2400007c 	.word	0x2400007c
 8000c4c:	24001224 	.word	0x24001224
 8000c50:	2400121c 	.word	0x2400121c
 8000c54:	24001220 	.word	0x24001220

08000c58 <pen_up>:

void pen_up(){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	TIM4->ARR = 320000-1; //write period for next cycle
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <pen_up+0x84>)
 8000c5e:	4a20      	ldr	r2, [pc, #128]	; (8000ce0 <pen_up+0x88>)
 8000c60:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CCR4 = 1000 ;
 8000c62:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <pen_up+0x84>)
 8000c64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c68:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(Z_enable_actlo_GPIO_Port, Z_enable_actlo_Pin, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c70:	481c      	ldr	r0, [pc, #112]	; (8000ce4 <pen_up+0x8c>)
 8000c72:	f002 fec3 	bl	80039fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Z_direction_GPIO_Port, Z_direction_Pin, 1);
 8000c76:	2201      	movs	r2, #1
 8000c78:	2120      	movs	r1, #32
 8000c7a:	481b      	ldr	r0, [pc, #108]	; (8000ce8 <pen_up+0x90>)
 8000c7c:	f002 febe 	bl	80039fc <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_4); // Start PWM
 8000c80:	210c      	movs	r1, #12
 8000c82:	481a      	ldr	r0, [pc, #104]	; (8000cec <pen_up+0x94>)
 8000c84:	f006 fd58 	bl	8007738 <HAL_TIM_PWM_Start_IT>

	while(!pen_is_up){
 8000c88:	e00d      	b.n	8000ca6 <pen_up+0x4e>
		HAL_ADC_Start(&hadc1);
 8000c8a:	4819      	ldr	r0, [pc, #100]	; (8000cf0 <pen_up+0x98>)
 8000c8c:	f001 fc34 	bl	80024f8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000c90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c94:	4816      	ldr	r0, [pc, #88]	; (8000cf0 <pen_up+0x98>)
 8000c96:	f001 fcf9 	bl	800268c <HAL_ADC_PollForConversion>
		pen_pressure= HAL_ADC_GetValue(&hadc1);
 8000c9a:	4815      	ldr	r0, [pc, #84]	; (8000cf0 <pen_up+0x98>)
 8000c9c:	f001 fdea 	bl	8002874 <HAL_ADC_GetValue>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4a14      	ldr	r2, [pc, #80]	; (8000cf4 <pen_up+0x9c>)
 8000ca4:	6013      	str	r3, [r2, #0]
	while(!pen_is_up){
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <pen_up+0xa0>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d0ed      	beq.n	8000c8a <pen_up+0x32>
	}

  HAL_GPIO_WritePin(Z_enable_actlo_GPIO_Port, Z_enable_actlo_Pin, 1);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cb4:	480b      	ldr	r0, [pc, #44]	; (8000ce4 <pen_up+0x8c>)
 8000cb6:	f002 fea1 	bl	80039fc <HAL_GPIO_WritePin>
  TIM2->ARR = 0;
 8000cba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM4->CCR4 = 0;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <pen_up+0x84>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_4);
 8000cc8:	210c      	movs	r1, #12
 8000cca:	4808      	ldr	r0, [pc, #32]	; (8000cec <pen_up+0x94>)
 8000ccc:	f006 fe8e 	bl	80079ec <HAL_TIM_PWM_Stop_IT>
  pen_is_down=0;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <pen_up+0xa4>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40000800 	.word	0x40000800
 8000ce0:	0004e1ff 	.word	0x0004e1ff
 8000ce4:	58020c00 	.word	0x58020c00
 8000ce8:	58021800 	.word	0x58021800
 8000cec:	24000178 	.word	0x24000178
 8000cf0:	2400007c 	.word	0x2400007c
 8000cf4:	24001224 	.word	0x24001224
 8000cf8:	24001220 	.word	0x24001220
 8000cfc:	2400121c 	.word	0x2400121c

08000d00 <drawStar>:
        int y = 0+radius * sin(angle);
        moveTo(x, y);
    }
}

void drawStar(int radius) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	ed2d 8b02 	vpush	{d8}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	double angle =1.0;
 8000d0c:	f04f 0200 	mov.w	r2, #0
 8000d10:	4b2f      	ldr	r3, [pc, #188]	; (8000dd0 <drawStar+0xd0>)
 8000d12:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double PI=3.1415926;
 8000d16:	a32c      	add	r3, pc, #176	; (adr r3, 8000dc8 <drawStar+0xc8>)
 8000d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 0; i < 5; i++) {
 8000d20:	2300      	movs	r3, #0
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
 8000d24:	e043      	b.n	8000dae <drawStar+0xae>
    	 angle = PI/2 +( i* (2*PI)/5);
 8000d26:	ed97 7b04 	vldr	d7, [r7, #16]
 8000d2a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000d2e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d34:	ee07 3a90 	vmov	s15, r3
 8000d38:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000d3c:	ed97 7b04 	vldr	d7, [r7, #16]
 8000d40:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000d44:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000d48:	eeb1 4b04 	vmov.f64	d4, #20	; 0x40a00000  5.0
 8000d4c:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000d50:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d54:	ed87 7b06 	vstr	d7, [r7, #24]
		int x = radius * cos(angle);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	ee07 3a90 	vmov	s15, r3
 8000d5e:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000d62:	ed97 0b06 	vldr	d0, [r7, #24]
 8000d66:	f009 fca7 	bl	800a6b8 <cos>
 8000d6a:	eeb0 7b40 	vmov.f64	d7, d0
 8000d6e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000d72:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d76:	ee17 3a90 	vmov	r3, s15
 8000d7a:	60fb      	str	r3, [r7, #12]
		int y = radius * sin(angle);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	ee07 3a90 	vmov	s15, r3
 8000d82:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000d86:	ed97 0b06 	vldr	d0, [r7, #24]
 8000d8a:	f009 fce1 	bl	800a750 <sin>
 8000d8e:	eeb0 7b40 	vmov.f64	d7, d0
 8000d92:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000d96:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d9a:	ee17 3a90 	vmov	r3, s15
 8000d9e:	60bb      	str	r3, [r7, #8]
		moveTo(x, y);
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	f7ff fea8 	bl	8000af8 <moveTo>
    for (int i = 0; i < 5; i++) {
 8000da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000daa:	3301      	adds	r3, #1
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	2b04      	cmp	r3, #4
 8000db2:	ddb8      	ble.n	8000d26 <drawStar+0x26>
    }
}
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	3728      	adds	r7, #40	; 0x28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	ecbd 8b02 	vpop	{d8}
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	f3af 8000 	nop.w
 8000dc8:	4d12d84a 	.word	0x4d12d84a
 8000dcc:	400921fb 	.word	0x400921fb
 8000dd0:	3ff00000 	.word	0x3ff00000

08000dd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripheprals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dda:	f000 ff6b 	bl	8001cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dde:	f000 f911 	bl	8001004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de2:	f000 fb55 	bl	8001490 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000de6:	f000 f97f 	bl	80010e8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000dea:	f000 f9f7 	bl	80011dc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000dee:	f000 fa4f 	bl	8001290 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000df2:	f000 faa7 	bl	8001344 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000df6:	f000 faff 	bl	80013f8 <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */
  myprintf("--Program Start here \n\r");
 8000dfa:	486b      	ldr	r0, [pc, #428]	; (8000fa8 <main+0x1d4>)
 8000dfc:	f7ff fc3e 	bl	800067c <myprintf>

  int key=0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	607b      	str	r3, [r7, #4]
  generate_lookup_table(arr_X, X_TABLE_SIZE);
 8000e04:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e08:	4868      	ldr	r0, [pc, #416]	; (8000fac <main+0x1d8>)
 8000e0a:	f7ff fc85 	bl	8000718 <generate_lookup_table>
  generate_lookup_table(arr_Y, Y_TABLE_SIZE);
 8000e0e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e12:	4867      	ldr	r0, [pc, #412]	; (8000fb0 <main+0x1dc>)
 8000e14:	f7ff fc80 	bl	8000718 <generate_lookup_table>

  //step_motor_X(-1000,0);
  //move_motor_Y(1000,1);

 //moveTo(500,300);
  drawStar(10);
 8000e18:	200a      	movs	r0, #10
 8000e1a:	f7ff ff71 	bl	8000d00 <drawStar>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  key= mygetch();
 8000e1e:	f7ff fc63 	bl	80006e8 <mygetch>
 8000e22:	6078      	str	r0, [r7, #4]
	  if (key=='a'){ //left
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b61      	cmp	r3, #97	; 0x61
 8000e28:	d106      	bne.n	8000e38 <main+0x64>
		  myprintf("left\n\r");
 8000e2a:	4862      	ldr	r0, [pc, #392]	; (8000fb4 <main+0x1e0>)
 8000e2c:	f7ff fc26 	bl	800067c <myprintf>
		  move_X(1);
 8000e30:	2001      	movs	r0, #1
 8000e32:	f7ff fe13 	bl	8000a5c <move_X>
 8000e36:	e7f2      	b.n	8000e1e <main+0x4a>
	  }else if (key=='d'){ // right
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b64      	cmp	r3, #100	; 0x64
 8000e3c:	d106      	bne.n	8000e4c <main+0x78>

		  myprintf("right\n\r");
 8000e3e:	485e      	ldr	r0, [pc, #376]	; (8000fb8 <main+0x1e4>)
 8000e40:	f7ff fc1c 	bl	800067c <myprintf>
		  move_X(0);
 8000e44:	2000      	movs	r0, #0
 8000e46:	f7ff fe09 	bl	8000a5c <move_X>
 8000e4a:	e7e8      	b.n	8000e1e <main+0x4a>
	  }else if (key=='w'){ // up// back
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b77      	cmp	r3, #119	; 0x77
 8000e50:	d106      	bne.n	8000e60 <main+0x8c>
		  myprintf("up\n\r");
 8000e52:	485a      	ldr	r0, [pc, #360]	; (8000fbc <main+0x1e8>)
 8000e54:	f7ff fc12 	bl	800067c <myprintf>
		  move_Y(1);
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f7ff fe27 	bl	8000aac <move_Y>
 8000e5e:	e7de      	b.n	8000e1e <main+0x4a>
	  }else if (key=='x'){ // down// front
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b78      	cmp	r3, #120	; 0x78
 8000e64:	d106      	bne.n	8000e74 <main+0xa0>
		  myprintf("down\n\r");
 8000e66:	4856      	ldr	r0, [pc, #344]	; (8000fc0 <main+0x1ec>)
 8000e68:	f7ff fc08 	bl	800067c <myprintf>
		  move_Y(0);
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff fe1d 	bl	8000aac <move_Y>
 8000e72:	e7d4      	b.n	8000e1e <main+0x4a>
	  }else if (key=='p'){ // down// front
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b70      	cmp	r3, #112	; 0x70
 8000e78:	d105      	bne.n	8000e86 <main+0xb2>
		  myprintf("pen down\n\r");
 8000e7a:	4852      	ldr	r0, [pc, #328]	; (8000fc4 <main+0x1f0>)
 8000e7c:	f7ff fbfe 	bl	800067c <myprintf>
		  pen_down();
 8000e80:	f7ff fe96 	bl	8000bb0 <pen_down>
 8000e84:	e7cb      	b.n	8000e1e <main+0x4a>
			HAL_GPIO_WritePin(Z_enable_actlo_GPIO_Port, Z_enable_actlo_Pin, 0);
			HAL_GPIO_WritePin(Z_direction_GPIO_Port, Z_direction_Pin, 0);
d
			HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_4); // Start PWM
			*/
	  }else if (key=='u'){
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b75      	cmp	r3, #117	; 0x75
 8000e8a:	d105      	bne.n	8000e98 <main+0xc4>
 		  myprintf("pen up\n\r");
 8000e8c:	484e      	ldr	r0, [pc, #312]	; (8000fc8 <main+0x1f4>)
 8000e8e:	f7ff fbf5 	bl	800067c <myprintf>
 		 pen_up();
 8000e92:	f7ff fee1 	bl	8000c58 <pen_up>
 8000e96:	e7c2      	b.n	8000e1e <main+0x4a>
 		 	HAL_GPIO_WritePin(Z_enable_actlo_GPIO_Port, Z_enable_actlo_Pin, 0);
 		 	HAL_GPIO_WritePin(Z_direction_GPIO_Port, Z_direction_Pin, 1);

 		 	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_4); // Start PWM
 		 	*/
	  }else if(key=='s'){
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b73      	cmp	r3, #115	; 0x73
 8000e9c:	d135      	bne.n	8000f0a <main+0x136>
		  myprintf("stop\n\r");
 8000e9e:	484b      	ldr	r0, [pc, #300]	; (8000fcc <main+0x1f8>)
 8000ea0:	f7ff fbec 	bl	800067c <myprintf>
		  HAL_GPIO_WritePin(X_enable_actlo_GPIO_Port, X_enable_actlo_Pin, 1);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eaa:	4849      	ldr	r0, [pc, #292]	; (8000fd0 <main+0x1fc>)
 8000eac:	f002 fda6 	bl	80039fc <HAL_GPIO_WritePin>
		  TIM2->ARR = 0;
 8000eb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	62da      	str	r2, [r3, #44]	; 0x2c
		  TIM2->CCR4 = 0;
 8000eb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	641a      	str	r2, [r3, #64]	; 0x40
		  HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000ec0:	210c      	movs	r1, #12
 8000ec2:	4844      	ldr	r0, [pc, #272]	; (8000fd4 <main+0x200>)
 8000ec4:	f006 fd92 	bl	80079ec <HAL_TIM_PWM_Stop_IT>

		  HAL_GPIO_WritePin(Y_enable_actlo_GPIO_Port, Y_enable_actlo_Pin, 1);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2120      	movs	r1, #32
 8000ecc:	4842      	ldr	r0, [pc, #264]	; (8000fd8 <main+0x204>)
 8000ece:	f002 fd95 	bl	80039fc <HAL_GPIO_WritePin>
		  TIM3->ARR = 0;
 8000ed2:	4b42      	ldr	r3, [pc, #264]	; (8000fdc <main+0x208>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	62da      	str	r2, [r3, #44]	; 0x2c
		  TIM3->CCR1 = 0;
 8000ed8:	4b40      	ldr	r3, [pc, #256]	; (8000fdc <main+0x208>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	483f      	ldr	r0, [pc, #252]	; (8000fe0 <main+0x20c>)
 8000ee2:	f006 fd83 	bl	80079ec <HAL_TIM_PWM_Stop_IT>

		  HAL_GPIO_WritePin(Z_enable_actlo_GPIO_Port, Z_enable_actlo_Pin, 1);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eec:	483d      	ldr	r0, [pc, #244]	; (8000fe4 <main+0x210>)
 8000eee:	f002 fd85 	bl	80039fc <HAL_GPIO_WritePin>
		  TIM2->ARR = 0;
 8000ef2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	62da      	str	r2, [r3, #44]	; 0x2c
		  TIM4->CCR4 = 0;
 8000efa:	4b3b      	ldr	r3, [pc, #236]	; (8000fe8 <main+0x214>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	641a      	str	r2, [r3, #64]	; 0x40
		  HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_4);
 8000f00:	210c      	movs	r1, #12
 8000f02:	483a      	ldr	r0, [pc, #232]	; (8000fec <main+0x218>)
 8000f04:	f006 fd72 	bl	80079ec <HAL_TIM_PWM_Stop_IT>
 8000f08:	e789      	b.n	8000e1e <main+0x4a>
	  }else if(key=='t'){   //// test adc feed back
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b74      	cmp	r3, #116	; 0x74
 8000f0e:	d110      	bne.n	8000f32 <main+0x15e>
		  HAL_ADC_PollForConversion(&hadc1, 100);
 8000f10:	2164      	movs	r1, #100	; 0x64
 8000f12:	4837      	ldr	r0, [pc, #220]	; (8000ff0 <main+0x21c>)
 8000f14:	f001 fbba 	bl	800268c <HAL_ADC_PollForConversion>
		  pen_pressure= HAL_ADC_GetValue(&hadc1);
 8000f18:	4835      	ldr	r0, [pc, #212]	; (8000ff0 <main+0x21c>)
 8000f1a:	f001 fcab 	bl	8002874 <HAL_ADC_GetValue>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4a34      	ldr	r2, [pc, #208]	; (8000ff4 <main+0x220>)
 8000f22:	6013      	str	r3, [r2, #0]
		  myprintf("pressure_z %d\n\r", pen_pressure);
 8000f24:	4b33      	ldr	r3, [pc, #204]	; (8000ff4 <main+0x220>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4833      	ldr	r0, [pc, #204]	; (8000ff8 <main+0x224>)
 8000f2c:	f7ff fba6 	bl	800067c <myprintf>
 8000f30:	e775      	b.n	8000e1e <main+0x4a>
	  }else if (key=='i'){
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b69      	cmp	r3, #105	; 0x69
 8000f36:	d119      	bne.n	8000f6c <main+0x198>
 		  myprintf("pen up\n\r");
 8000f38:	4823      	ldr	r0, [pc, #140]	; (8000fc8 <main+0x1f4>)
 8000f3a:	f7ff fb9f 	bl	800067c <myprintf>
 		 	TIM4->ARR = 320000-1; //write period for next cycle
 8000f3e:	4b2a      	ldr	r3, [pc, #168]	; (8000fe8 <main+0x214>)
 8000f40:	4a2e      	ldr	r2, [pc, #184]	; (8000ffc <main+0x228>)
 8000f42:	62da      	str	r2, [r3, #44]	; 0x2c
 		 	TIM4->CCR4 = 1000 ;
 8000f44:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <main+0x214>)
 8000f46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f4a:	641a      	str	r2, [r3, #64]	; 0x40

 		 	HAL_GPIO_WritePin(Z_enable_actlo_GPIO_Port, Z_enable_actlo_Pin, 0);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f52:	4824      	ldr	r0, [pc, #144]	; (8000fe4 <main+0x210>)
 8000f54:	f002 fd52 	bl	80039fc <HAL_GPIO_WritePin>
 		 	HAL_GPIO_WritePin(Z_direction_GPIO_Port, Z_direction_Pin, 1);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2120      	movs	r1, #32
 8000f5c:	4828      	ldr	r0, [pc, #160]	; (8001000 <main+0x22c>)
 8000f5e:	f002 fd4d 	bl	80039fc <HAL_GPIO_WritePin>

 		 	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_4); // Start PWM
 8000f62:	210c      	movs	r1, #12
 8000f64:	4821      	ldr	r0, [pc, #132]	; (8000fec <main+0x218>)
 8000f66:	f006 fbe7 	bl	8007738 <HAL_TIM_PWM_Start_IT>
 8000f6a:	e758      	b.n	8000e1e <main+0x4a>
	  }else if (key=='o'){
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b6f      	cmp	r3, #111	; 0x6f
 8000f70:	f47f af55 	bne.w	8000e1e <main+0x4a>
 		  myprintf("pen down\n\r");
 8000f74:	4813      	ldr	r0, [pc, #76]	; (8000fc4 <main+0x1f0>)
 8000f76:	f7ff fb81 	bl	800067c <myprintf>
 		 	TIM4->ARR = 320000-1; //write period for next cycle
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <main+0x214>)
 8000f7c:	4a1f      	ldr	r2, [pc, #124]	; (8000ffc <main+0x228>)
 8000f7e:	62da      	str	r2, [r3, #44]	; 0x2c
 		 	TIM4->CCR4 = 1000 ;
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <main+0x214>)
 8000f82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f86:	641a      	str	r2, [r3, #64]	; 0x40

 		 	HAL_GPIO_WritePin(Z_enable_actlo_GPIO_Port, Z_enable_actlo_Pin, 0);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f8e:	4815      	ldr	r0, [pc, #84]	; (8000fe4 <main+0x210>)
 8000f90:	f002 fd34 	bl	80039fc <HAL_GPIO_WritePin>
 		 	HAL_GPIO_WritePin(Z_direction_GPIO_Port, Z_direction_Pin, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2120      	movs	r1, #32
 8000f98:	4819      	ldr	r0, [pc, #100]	; (8001000 <main+0x22c>)
 8000f9a:	f002 fd2f 	bl	80039fc <HAL_GPIO_WritePin>

 		 	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_4); // Start PWM
 8000f9e:	210c      	movs	r1, #12
 8000fa0:	4812      	ldr	r0, [pc, #72]	; (8000fec <main+0x218>)
 8000fa2:	f006 fbc9 	bl	8007738 <HAL_TIM_PWM_Start_IT>
	  key= mygetch();
 8000fa6:	e73a      	b.n	8000e1e <main+0x4a>
 8000fa8:	0800b3b8 	.word	0x0800b3b8
 8000fac:	24000260 	.word	0x24000260
 8000fb0:	24000a30 	.word	0x24000a30
 8000fb4:	0800b3d0 	.word	0x0800b3d0
 8000fb8:	0800b3d8 	.word	0x0800b3d8
 8000fbc:	0800b3e0 	.word	0x0800b3e0
 8000fc0:	0800b3e8 	.word	0x0800b3e8
 8000fc4:	0800b3f0 	.word	0x0800b3f0
 8000fc8:	0800b3fc 	.word	0x0800b3fc
 8000fcc:	0800b408 	.word	0x0800b408
 8000fd0:	58021000 	.word	0x58021000
 8000fd4:	240000e0 	.word	0x240000e0
 8000fd8:	58021400 	.word	0x58021400
 8000fdc:	40000400 	.word	0x40000400
 8000fe0:	2400012c 	.word	0x2400012c
 8000fe4:	58020c00 	.word	0x58020c00
 8000fe8:	40000800 	.word	0x40000800
 8000fec:	24000178 	.word	0x24000178
 8000ff0:	2400007c 	.word	0x2400007c
 8000ff4:	24001224 	.word	0x24001224
 8000ff8:	0800b410 	.word	0x0800b410
 8000ffc:	0004e1ff 	.word	0x0004e1ff
 8001000:	58021800 	.word	0x58021800

08001004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b09c      	sub	sp, #112	; 0x70
 8001008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100e:	224c      	movs	r2, #76	; 0x4c
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f008 fecc 	bl	8009db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2220      	movs	r2, #32
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f008 fec6 	bl	8009db0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001024:	2002      	movs	r0, #2
 8001026:	f002 fd03 	bl	8003a30 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800102a:	2300      	movs	r3, #0
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	4b2b      	ldr	r3, [pc, #172]	; (80010dc <SystemClock_Config+0xd8>)
 8001030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001032:	4a2a      	ldr	r2, [pc, #168]	; (80010dc <SystemClock_Config+0xd8>)
 8001034:	f023 0301 	bic.w	r3, r3, #1
 8001038:	62d3      	str	r3, [r2, #44]	; 0x2c
 800103a:	4b28      	ldr	r3, [pc, #160]	; (80010dc <SystemClock_Config+0xd8>)
 800103c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <SystemClock_Config+0xdc>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800104c:	4a24      	ldr	r2, [pc, #144]	; (80010e0 <SystemClock_Config+0xdc>)
 800104e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001052:	6193      	str	r3, [r2, #24]
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <SystemClock_Config+0xdc>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001060:	bf00      	nop
 8001062:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <SystemClock_Config+0xdc>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800106a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800106e:	d1f8      	bne.n	8001062 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001070:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <SystemClock_Config+0xe0>)
 8001072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001074:	4a1b      	ldr	r2, [pc, #108]	; (80010e4 <SystemClock_Config+0xe0>)
 8001076:	f023 0303 	bic.w	r3, r3, #3
 800107a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800107c:	2302      	movs	r3, #2
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001080:	2301      	movs	r3, #1
 8001082:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001084:	2340      	movs	r3, #64	; 0x40
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001088:	2300      	movs	r3, #0
 800108a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001090:	4618      	mov	r0, r3
 8001092:	f002 fd07 	bl	8003aa4 <HAL_RCC_OscConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800109c:	f000 faec 	bl	8001678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a0:	233f      	movs	r3, #63	; 0x3f
 80010a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010b4:	2340      	movs	r3, #64	; 0x40
 80010b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2101      	movs	r1, #1
 80010c4:	4618      	mov	r0, r3
 80010c6:	f003 f947 	bl	8004358 <HAL_RCC_ClockConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80010d0:	f000 fad2 	bl	8001678 <Error_Handler>
  }
}
 80010d4:	bf00      	nop
 80010d6:	3770      	adds	r7, #112	; 0x70
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	58000400 	.word	0x58000400
 80010e0:	58024800 	.word	0x58024800
 80010e4:	58024400 	.word	0x58024400

080010e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010fa:	463b      	mov	r3, r7
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
 8001108:	615a      	str	r2, [r3, #20]
 800110a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800110c:	4b30      	ldr	r3, [pc, #192]	; (80011d0 <MX_ADC1_Init+0xe8>)
 800110e:	4a31      	ldr	r2, [pc, #196]	; (80011d4 <MX_ADC1_Init+0xec>)
 8001110:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001112:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <MX_ADC1_Init+0xe8>)
 8001114:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001118:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800111a:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <MX_ADC1_Init+0xe8>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001120:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <MX_ADC1_Init+0xe8>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001126:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <MX_ADC1_Init+0xe8>)
 8001128:	2204      	movs	r2, #4
 800112a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800112c:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <MX_ADC1_Init+0xe8>)
 800112e:	2200      	movs	r2, #0
 8001130:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001132:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <MX_ADC1_Init+0xe8>)
 8001134:	2200      	movs	r2, #0
 8001136:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8001138:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <MX_ADC1_Init+0xe8>)
 800113a:	2201      	movs	r2, #1
 800113c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800113e:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <MX_ADC1_Init+0xe8>)
 8001140:	2200      	movs	r2, #0
 8001142:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001144:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <MX_ADC1_Init+0xe8>)
 8001146:	2200      	movs	r2, #0
 8001148:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800114a:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <MX_ADC1_Init+0xe8>)
 800114c:	2200      	movs	r2, #0
 800114e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001150:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <MX_ADC1_Init+0xe8>)
 8001152:	2200      	movs	r2, #0
 8001154:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001156:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <MX_ADC1_Init+0xe8>)
 8001158:	2200      	movs	r2, #0
 800115a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <MX_ADC1_Init+0xe8>)
 800115e:	2200      	movs	r2, #0
 8001160:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001162:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <MX_ADC1_Init+0xe8>)
 8001164:	2200      	movs	r2, #0
 8001166:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800116a:	4819      	ldr	r0, [pc, #100]	; (80011d0 <MX_ADC1_Init+0xe8>)
 800116c:	f001 f822 	bl	80021b4 <HAL_ADC_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001176:	f000 fa7f 	bl	8001678 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	4619      	mov	r1, r3
 8001184:	4812      	ldr	r0, [pc, #72]	; (80011d0 <MX_ADC1_Init+0xe8>)
 8001186:	f002 f89b 	bl	80032c0 <HAL_ADCEx_MultiModeConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001190:	f000 fa72 	bl	8001678 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001194:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <MX_ADC1_Init+0xf0>)
 8001196:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001198:	2306      	movs	r3, #6
 800119a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011a0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80011a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011a6:	2304      	movs	r3, #4
 80011a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b2:	463b      	mov	r3, r7
 80011b4:	4619      	mov	r1, r3
 80011b6:	4806      	ldr	r0, [pc, #24]	; (80011d0 <MX_ADC1_Init+0xe8>)
 80011b8:	f001 fb6a 	bl	8002890 <HAL_ADC_ConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80011c2:	f000 fa59 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	; 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2400007c 	.word	0x2400007c
 80011d4:	40022000 	.word	0x40022000
 80011d8:	43210000 	.word	0x43210000

080011dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ee:	463b      	mov	r3, r7
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
 80011fc:	615a      	str	r2, [r3, #20]
 80011fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001200:	4b22      	ldr	r3, [pc, #136]	; (800128c <MX_TIM2_Init+0xb0>)
 8001202:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001206:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001208:	4b20      	ldr	r3, [pc, #128]	; (800128c <MX_TIM2_Init+0xb0>)
 800120a:	2200      	movs	r2, #0
 800120c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120e:	4b1f      	ldr	r3, [pc, #124]	; (800128c <MX_TIM2_Init+0xb0>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001214:	4b1d      	ldr	r3, [pc, #116]	; (800128c <MX_TIM2_Init+0xb0>)
 8001216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800121a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121c:	4b1b      	ldr	r3, [pc, #108]	; (800128c <MX_TIM2_Init+0xb0>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001222:	4b1a      	ldr	r3, [pc, #104]	; (800128c <MX_TIM2_Init+0xb0>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001228:	4818      	ldr	r0, [pc, #96]	; (800128c <MX_TIM2_Init+0xb0>)
 800122a:	f006 f91f 	bl	800746c <HAL_TIM_PWM_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001234:	f000 fa20 	bl	8001678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	4619      	mov	r1, r3
 8001246:	4811      	ldr	r0, [pc, #68]	; (800128c <MX_TIM2_Init+0xb0>)
 8001248:	f007 fa9a 	bl	8008780 <HAL_TIMEx_MasterConfigSynchronization>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001252:	f000 fa11 	bl	8001678 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001256:	2360      	movs	r3, #96	; 0x60
 8001258:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001266:	463b      	mov	r3, r7
 8001268:	220c      	movs	r2, #12
 800126a:	4619      	mov	r1, r3
 800126c:	4807      	ldr	r0, [pc, #28]	; (800128c <MX_TIM2_Init+0xb0>)
 800126e:	f006 fda9 	bl	8007dc4 <HAL_TIM_PWM_ConfigChannel>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001278:	f000 f9fe 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800127c:	4803      	ldr	r0, [pc, #12]	; (800128c <MX_TIM2_Init+0xb0>)
 800127e:	f000 faf3 	bl	8001868 <HAL_TIM_MspPostInit>

}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	240000e0 	.word	0x240000e0

08001290 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a2:	463b      	mov	r3, r7
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
 80012b0:	615a      	str	r2, [r3, #20]
 80012b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012b4:	4b21      	ldr	r3, [pc, #132]	; (800133c <MX_TIM3_Init+0xac>)
 80012b6:	4a22      	ldr	r2, [pc, #136]	; (8001340 <MX_TIM3_Init+0xb0>)
 80012b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012ba:	4b20      	ldr	r3, [pc, #128]	; (800133c <MX_TIM3_Init+0xac>)
 80012bc:	2200      	movs	r2, #0
 80012be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c0:	4b1e      	ldr	r3, [pc, #120]	; (800133c <MX_TIM3_Init+0xac>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <MX_TIM3_Init+0xac>)
 80012c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ce:	4b1b      	ldr	r3, [pc, #108]	; (800133c <MX_TIM3_Init+0xac>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <MX_TIM3_Init+0xac>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012da:	4818      	ldr	r0, [pc, #96]	; (800133c <MX_TIM3_Init+0xac>)
 80012dc:	f006 f8c6 	bl	800746c <HAL_TIM_PWM_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80012e6:	f000 f9c7 	bl	8001678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	4619      	mov	r1, r3
 80012f8:	4810      	ldr	r0, [pc, #64]	; (800133c <MX_TIM3_Init+0xac>)
 80012fa:	f007 fa41 	bl	8008780 <HAL_TIMEx_MasterConfigSynchronization>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001304:	f000 f9b8 	bl	8001678 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001308:	2360      	movs	r3, #96	; 0x60
 800130a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	2200      	movs	r2, #0
 800131c:	4619      	mov	r1, r3
 800131e:	4807      	ldr	r0, [pc, #28]	; (800133c <MX_TIM3_Init+0xac>)
 8001320:	f006 fd50 	bl	8007dc4 <HAL_TIM_PWM_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800132a:	f000 f9a5 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800132e:	4803      	ldr	r0, [pc, #12]	; (800133c <MX_TIM3_Init+0xac>)
 8001330:	f000 fa9a 	bl	8001868 <HAL_TIM_MspPostInit>

}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	; 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	2400012c 	.word	0x2400012c
 8001340:	40000400 	.word	0x40000400

08001344 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001356:	463b      	mov	r3, r7
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
 8001364:	615a      	str	r2, [r3, #20]
 8001366:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001368:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <MX_TIM4_Init+0xac>)
 800136a:	4a22      	ldr	r2, [pc, #136]	; (80013f4 <MX_TIM4_Init+0xb0>)
 800136c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800136e:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <MX_TIM4_Init+0xac>)
 8001370:	2200      	movs	r2, #0
 8001372:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001374:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <MX_TIM4_Init+0xac>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800137a:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <MX_TIM4_Init+0xac>)
 800137c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001380:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <MX_TIM4_Init+0xac>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001388:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <MX_TIM4_Init+0xac>)
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800138e:	4818      	ldr	r0, [pc, #96]	; (80013f0 <MX_TIM4_Init+0xac>)
 8001390:	f006 f86c 	bl	800746c <HAL_TIM_PWM_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800139a:	f000 f96d 	bl	8001678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	4810      	ldr	r0, [pc, #64]	; (80013f0 <MX_TIM4_Init+0xac>)
 80013ae:	f007 f9e7 	bl	8008780 <HAL_TIMEx_MasterConfigSynchronization>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80013b8:	f000 f95e 	bl	8001678 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013bc:	2360      	movs	r3, #96	; 0x60
 80013be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013cc:	463b      	mov	r3, r7
 80013ce:	220c      	movs	r2, #12
 80013d0:	4619      	mov	r1, r3
 80013d2:	4807      	ldr	r0, [pc, #28]	; (80013f0 <MX_TIM4_Init+0xac>)
 80013d4:	f006 fcf6 	bl	8007dc4 <HAL_TIM_PWM_ConfigChannel>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80013de:	f000 f94b 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013e2:	4803      	ldr	r0, [pc, #12]	; (80013f0 <MX_TIM4_Init+0xac>)
 80013e4:	f000 fa40 	bl	8001868 <HAL_TIM_MspPostInit>

}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	; 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	24000178 	.word	0x24000178
 80013f4:	40000800 	.word	0x40000800

080013f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013fc:	4b22      	ldr	r3, [pc, #136]	; (8001488 <MX_USART3_UART_Init+0x90>)
 80013fe:	4a23      	ldr	r2, [pc, #140]	; (800148c <MX_USART3_UART_Init+0x94>)
 8001400:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001402:	4b21      	ldr	r3, [pc, #132]	; (8001488 <MX_USART3_UART_Init+0x90>)
 8001404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001408:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800140a:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <MX_USART3_UART_Init+0x90>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001410:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <MX_USART3_UART_Init+0x90>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <MX_USART3_UART_Init+0x90>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <MX_USART3_UART_Init+0x90>)
 800141e:	220c      	movs	r2, #12
 8001420:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001422:	4b19      	ldr	r3, [pc, #100]	; (8001488 <MX_USART3_UART_Init+0x90>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <MX_USART3_UART_Init+0x90>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800142e:	4b16      	ldr	r3, [pc, #88]	; (8001488 <MX_USART3_UART_Init+0x90>)
 8001430:	2200      	movs	r2, #0
 8001432:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <MX_USART3_UART_Init+0x90>)
 8001436:	2200      	movs	r2, #0
 8001438:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <MX_USART3_UART_Init+0x90>)
 800143c:	2200      	movs	r2, #0
 800143e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001440:	4811      	ldr	r0, [pc, #68]	; (8001488 <MX_USART3_UART_Init+0x90>)
 8001442:	f007 fa49 	bl	80088d8 <HAL_UART_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800144c:	f000 f914 	bl	8001678 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001450:	2100      	movs	r1, #0
 8001452:	480d      	ldr	r0, [pc, #52]	; (8001488 <MX_USART3_UART_Init+0x90>)
 8001454:	f008 fba7 	bl	8009ba6 <HAL_UARTEx_SetTxFifoThreshold>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800145e:	f000 f90b 	bl	8001678 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001462:	2100      	movs	r1, #0
 8001464:	4808      	ldr	r0, [pc, #32]	; (8001488 <MX_USART3_UART_Init+0x90>)
 8001466:	f008 fbdc 	bl	8009c22 <HAL_UARTEx_SetRxFifoThreshold>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001470:	f000 f902 	bl	8001678 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001474:	4804      	ldr	r0, [pc, #16]	; (8001488 <MX_USART3_UART_Init+0x90>)
 8001476:	f008 fb5d 	bl	8009b34 <HAL_UARTEx_DisableFifoMode>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001480:	f000 f8fa 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	240001c4 	.word	0x240001c4
 800148c:	40004800 	.word	0x40004800

08001490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08c      	sub	sp, #48	; 0x30
 8001494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001496:	f107 031c 	add.w	r3, r7, #28
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014a6:	4b6f      	ldr	r3, [pc, #444]	; (8001664 <MX_GPIO_Init+0x1d4>)
 80014a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ac:	4a6d      	ldr	r2, [pc, #436]	; (8001664 <MX_GPIO_Init+0x1d4>)
 80014ae:	f043 0320 	orr.w	r3, r3, #32
 80014b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b6:	4b6b      	ldr	r3, [pc, #428]	; (8001664 <MX_GPIO_Init+0x1d4>)
 80014b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014bc:	f003 0320 	and.w	r3, r3, #32
 80014c0:	61bb      	str	r3, [r7, #24]
 80014c2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c4:	4b67      	ldr	r3, [pc, #412]	; (8001664 <MX_GPIO_Init+0x1d4>)
 80014c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ca:	4a66      	ldr	r2, [pc, #408]	; (8001664 <MX_GPIO_Init+0x1d4>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d4:	4b63      	ldr	r3, [pc, #396]	; (8001664 <MX_GPIO_Init+0x1d4>)
 80014d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014e2:	4b60      	ldr	r3, [pc, #384]	; (8001664 <MX_GPIO_Init+0x1d4>)
 80014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e8:	4a5e      	ldr	r2, [pc, #376]	; (8001664 <MX_GPIO_Init+0x1d4>)
 80014ea:	f043 0310 	orr.w	r3, r3, #16
 80014ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014f2:	4b5c      	ldr	r3, [pc, #368]	; (8001664 <MX_GPIO_Init+0x1d4>)
 80014f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f8:	f003 0310 	and.w	r3, r3, #16
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001500:	4b58      	ldr	r3, [pc, #352]	; (8001664 <MX_GPIO_Init+0x1d4>)
 8001502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001506:	4a57      	ldr	r2, [pc, #348]	; (8001664 <MX_GPIO_Init+0x1d4>)
 8001508:	f043 0308 	orr.w	r3, r3, #8
 800150c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001510:	4b54      	ldr	r3, [pc, #336]	; (8001664 <MX_GPIO_Init+0x1d4>)
 8001512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800151e:	4b51      	ldr	r3, [pc, #324]	; (8001664 <MX_GPIO_Init+0x1d4>)
 8001520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001524:	4a4f      	ldr	r2, [pc, #316]	; (8001664 <MX_GPIO_Init+0x1d4>)
 8001526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800152a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800152e:	4b4d      	ldr	r3, [pc, #308]	; (8001664 <MX_GPIO_Init+0x1d4>)
 8001530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153c:	4b49      	ldr	r3, [pc, #292]	; (8001664 <MX_GPIO_Init+0x1d4>)
 800153e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001542:	4a48      	ldr	r2, [pc, #288]	; (8001664 <MX_GPIO_Init+0x1d4>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800154c:	4b45      	ldr	r3, [pc, #276]	; (8001664 <MX_GPIO_Init+0x1d4>)
 800154e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Y_direction_GPIO_Port, Y_direction_Pin, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	2110      	movs	r1, #16
 800155e:	4842      	ldr	r0, [pc, #264]	; (8001668 <MX_GPIO_Init+0x1d8>)
 8001560:	f002 fa4c 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Y_enable_actlo_GPIO_Port, Y_enable_actlo_Pin, GPIO_PIN_SET);
 8001564:	2201      	movs	r2, #1
 8001566:	2120      	movs	r1, #32
 8001568:	483f      	ldr	r0, [pc, #252]	; (8001668 <MX_GPIO_Init+0x1d8>)
 800156a:	f002 fa47 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(X_direction_GPIO_Port, X_direction_Pin, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	2180      	movs	r1, #128	; 0x80
 8001572:	483e      	ldr	r0, [pc, #248]	; (800166c <MX_GPIO_Init+0x1dc>)
 8001574:	f002 fa42 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(X_enable_actlo_GPIO_Port, X_enable_actlo_Pin, GPIO_PIN_SET);
 8001578:	2201      	movs	r2, #1
 800157a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800157e:	483b      	ldr	r0, [pc, #236]	; (800166c <MX_GPIO_Init+0x1dc>)
 8001580:	f002 fa3c 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Z_enable_actlo_GPIO_Port, Z_enable_actlo_Pin, GPIO_PIN_SET);
 8001584:	2201      	movs	r2, #1
 8001586:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800158a:	4839      	ldr	r0, [pc, #228]	; (8001670 <MX_GPIO_Init+0x1e0>)
 800158c:	f002 fa36 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Z_direction_GPIO_Port, Z_direction_Pin, GPIO_PIN_RESET);
 8001590:	2200      	movs	r2, #0
 8001592:	2120      	movs	r1, #32
 8001594:	4837      	ldr	r0, [pc, #220]	; (8001674 <MX_GPIO_Init+0x1e4>)
 8001596:	f002 fa31 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LX2_limit_right_Pin */
  GPIO_InitStruct.Pin = LX2_limit_right_Pin;
 800159a:	2308      	movs	r3, #8
 800159c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LX2_limit_right_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	482e      	ldr	r0, [pc, #184]	; (8001668 <MX_GPIO_Init+0x1d8>)
 80015ae:	f002 f875 	bl	800369c <HAL_GPIO_Init>

  /*Configure GPIO pins : Y_direction_Pin Y_enable_actlo_Pin */
  GPIO_InitStruct.Pin = Y_direction_Pin|Y_enable_actlo_Pin;
 80015b2:	2330      	movs	r3, #48	; 0x30
 80015b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	4619      	mov	r1, r3
 80015c8:	4827      	ldr	r0, [pc, #156]	; (8001668 <MX_GPIO_Init+0x1d8>)
 80015ca:	f002 f867 	bl	800369c <HAL_GPIO_Init>

  /*Configure GPIO pins : X_direction_Pin X_enable_actlo_Pin */
  GPIO_InitStruct.Pin = X_direction_Pin|X_enable_actlo_Pin;
 80015ce:	f248 0380 	movw	r3, #32896	; 0x8080
 80015d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d4:	2301      	movs	r3, #1
 80015d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	4619      	mov	r1, r3
 80015e6:	4821      	ldr	r0, [pc, #132]	; (800166c <MX_GPIO_Init+0x1dc>)
 80015e8:	f002 f858 	bl	800369c <HAL_GPIO_Init>

  /*Configure GPIO pin : LX1_limit_left_Pin */
  GPIO_InitStruct.Pin = LX1_limit_left_Pin;
 80015ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LX1_limit_left_GPIO_Port, &GPIO_InitStruct);
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	4619      	mov	r1, r3
 8001600:	481a      	ldr	r0, [pc, #104]	; (800166c <MX_GPIO_Init+0x1dc>)
 8001602:	f002 f84b 	bl	800369c <HAL_GPIO_Init>

  /*Configure GPIO pin : Z_enable_actlo_Pin */
  GPIO_InitStruct.Pin = Z_enable_actlo_Pin;
 8001606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800160a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160c:	2301      	movs	r3, #1
 800160e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Z_enable_actlo_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	4619      	mov	r1, r3
 800161e:	4814      	ldr	r0, [pc, #80]	; (8001670 <MX_GPIO_Init+0x1e0>)
 8001620:	f002 f83c 	bl	800369c <HAL_GPIO_Init>

  /*Configure GPIO pins : LY2_limit_bot_Pin LY1_limit_top_Pin */
  GPIO_InitStruct.Pin = LY2_limit_bot_Pin|LY1_limit_top_Pin;
 8001624:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	4619      	mov	r1, r3
 8001638:	480d      	ldr	r0, [pc, #52]	; (8001670 <MX_GPIO_Init+0x1e0>)
 800163a:	f002 f82f 	bl	800369c <HAL_GPIO_Init>

  /*Configure GPIO pin : Z_direction_Pin */
  GPIO_InitStruct.Pin = Z_direction_Pin;
 800163e:	2320      	movs	r3, #32
 8001640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001642:	2301      	movs	r3, #1
 8001644:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Z_direction_GPIO_Port, &GPIO_InitStruct);
 800164e:	f107 031c 	add.w	r3, r7, #28
 8001652:	4619      	mov	r1, r3
 8001654:	4807      	ldr	r0, [pc, #28]	; (8001674 <MX_GPIO_Init+0x1e4>)
 8001656:	f002 f821 	bl	800369c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800165a:	bf00      	nop
 800165c:	3730      	adds	r7, #48	; 0x30
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	58024400 	.word	0x58024400
 8001668:	58021400 	.word	0x58021400
 800166c:	58021000 	.word	0x58021000
 8001670:	58020c00 	.word	0x58020c00
 8001674:	58021800 	.word	0x58021800

08001678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800167c:	b672      	cpsid	i
}
 800167e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001680:	e7fe      	b.n	8001680 <Error_Handler+0x8>
	...

08001684 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <HAL_MspInit+0x30>)
 800168c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001690:	4a08      	ldr	r2, [pc, #32]	; (80016b4 <HAL_MspInit+0x30>)
 8001692:	f043 0302 	orr.w	r3, r3, #2
 8001696:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_MspInit+0x30>)
 800169c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	58024400 	.word	0x58024400

080016b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b0ba      	sub	sp, #232	; 0xe8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016d0:	f107 0310 	add.w	r3, r7, #16
 80016d4:	22c0      	movs	r2, #192	; 0xc0
 80016d6:	2100      	movs	r1, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	f008 fb69 	bl	8009db0 <memset>
  if(hadc->Instance==ADC1)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a2c      	ldr	r2, [pc, #176]	; (8001794 <HAL_ADC_MspInit+0xdc>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d150      	bne.n	800178a <HAL_ADC_MspInit+0xd2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016e8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80016ec:	f04f 0300 	mov.w	r3, #0
 80016f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80016f4:	2304      	movs	r3, #4
 80016f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 80016f8:	2309      	movs	r3, #9
 80016fa:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80016fc:	2302      	movs	r3, #2
 80016fe:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001700:	2302      	movs	r3, #2
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001704:	2302      	movs	r3, #2
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001708:	23c0      	movs	r3, #192	; 0xc0
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800170c:	2320      	movs	r3, #32
 800170e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001710:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001716:	2300      	movs	r3, #0
 8001718:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800171c:	f107 0310 	add.w	r3, r7, #16
 8001720:	4618      	mov	r0, r3
 8001722:	f003 f9a5 	bl	8004a70 <HAL_RCCEx_PeriphCLKConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 800172c:	f7ff ffa4 	bl	8001678 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001730:	4b19      	ldr	r3, [pc, #100]	; (8001798 <HAL_ADC_MspInit+0xe0>)
 8001732:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001736:	4a18      	ldr	r2, [pc, #96]	; (8001798 <HAL_ADC_MspInit+0xe0>)
 8001738:	f043 0320 	orr.w	r3, r3, #32
 800173c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001740:	4b15      	ldr	r3, [pc, #84]	; (8001798 <HAL_ADC_MspInit+0xe0>)
 8001742:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001746:	f003 0320 	and.w	r3, r3, #32
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_ADC_MspInit+0xe0>)
 8001750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001754:	4a10      	ldr	r2, [pc, #64]	; (8001798 <HAL_ADC_MspInit+0xe0>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <HAL_ADC_MspInit+0xe0>)
 8001760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800176c:	2301      	movs	r3, #1
 800176e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001772:	2303      	movs	r3, #3
 8001774:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	; (800179c <HAL_ADC_MspInit+0xe4>)
 8001786:	f001 ff89 	bl	800369c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800178a:	bf00      	nop
 800178c:	37e8      	adds	r7, #232	; 0xe8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40022000 	.word	0x40022000
 8001798:	58024400 	.word	0x58024400
 800179c:	58020000 	.word	0x58020000

080017a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b0:	d117      	bne.n	80017e2 <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017b2:	4b2a      	ldr	r3, [pc, #168]	; (800185c <HAL_TIM_PWM_MspInit+0xbc>)
 80017b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017b8:	4a28      	ldr	r2, [pc, #160]	; (800185c <HAL_TIM_PWM_MspInit+0xbc>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017c2:	4b26      	ldr	r3, [pc, #152]	; (800185c <HAL_TIM_PWM_MspInit+0xbc>)
 80017c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2100      	movs	r1, #0
 80017d4:	201c      	movs	r0, #28
 80017d6:	f001 ff2c 	bl	8003632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017da:	201c      	movs	r0, #28
 80017dc:	f001 ff43 	bl	8003666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80017e0:	e038      	b.n	8001854 <HAL_TIM_PWM_MspInit+0xb4>
  else if(htim_pwm->Instance==TIM3)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a1e      	ldr	r2, [pc, #120]	; (8001860 <HAL_TIM_PWM_MspInit+0xc0>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d117      	bne.n	800181c <HAL_TIM_PWM_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_TIM_PWM_MspInit+0xbc>)
 80017ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017f2:	4a1a      	ldr	r2, [pc, #104]	; (800185c <HAL_TIM_PWM_MspInit+0xbc>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017fc:	4b17      	ldr	r3, [pc, #92]	; (800185c <HAL_TIM_PWM_MspInit+0xbc>)
 80017fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	201d      	movs	r0, #29
 8001810:	f001 ff0f 	bl	8003632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001814:	201d      	movs	r0, #29
 8001816:	f001 ff26 	bl	8003666 <HAL_NVIC_EnableIRQ>
}
 800181a:	e01b      	b.n	8001854 <HAL_TIM_PWM_MspInit+0xb4>
  else if(htim_pwm->Instance==TIM4)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a10      	ldr	r2, [pc, #64]	; (8001864 <HAL_TIM_PWM_MspInit+0xc4>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d116      	bne.n	8001854 <HAL_TIM_PWM_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001826:	4b0d      	ldr	r3, [pc, #52]	; (800185c <HAL_TIM_PWM_MspInit+0xbc>)
 8001828:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800182c:	4a0b      	ldr	r2, [pc, #44]	; (800185c <HAL_TIM_PWM_MspInit+0xbc>)
 800182e:	f043 0304 	orr.w	r3, r3, #4
 8001832:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_TIM_PWM_MspInit+0xbc>)
 8001838:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001844:	2200      	movs	r2, #0
 8001846:	2100      	movs	r1, #0
 8001848:	201e      	movs	r0, #30
 800184a:	f001 fef2 	bl	8003632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800184e:	201e      	movs	r0, #30
 8001850:	f001 ff09 	bl	8003666 <HAL_NVIC_EnableIRQ>
}
 8001854:	bf00      	nop
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	58024400 	.word	0x58024400
 8001860:	40000400 	.word	0x40000400
 8001864:	40000800 	.word	0x40000800

08001868 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001888:	d11f      	bne.n	80018ca <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	4b37      	ldr	r3, [pc, #220]	; (8001968 <HAL_TIM_MspPostInit+0x100>)
 800188c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001890:	4a35      	ldr	r2, [pc, #212]	; (8001968 <HAL_TIM_MspPostInit+0x100>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800189a:	4b33      	ldr	r3, [pc, #204]	; (8001968 <HAL_TIM_MspPostInit+0x100>)
 800189c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018a8:	2308      	movs	r3, #8
 80018aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018b8:	2301      	movs	r3, #1
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4619      	mov	r1, r3
 80018c2:	482a      	ldr	r0, [pc, #168]	; (800196c <HAL_TIM_MspPostInit+0x104>)
 80018c4:	f001 feea 	bl	800369c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80018c8:	e049      	b.n	800195e <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM3)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a28      	ldr	r2, [pc, #160]	; (8001970 <HAL_TIM_MspPostInit+0x108>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d11f      	bne.n	8001914 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d4:	4b24      	ldr	r3, [pc, #144]	; (8001968 <HAL_TIM_MspPostInit+0x100>)
 80018d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018da:	4a23      	ldr	r2, [pc, #140]	; (8001968 <HAL_TIM_MspPostInit+0x100>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018e4:	4b20      	ldr	r3, [pc, #128]	; (8001968 <HAL_TIM_MspPostInit+0x100>)
 80018e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018f2:	2310      	movs	r3, #16
 80018f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001902:	2302      	movs	r3, #2
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	4819      	ldr	r0, [pc, #100]	; (8001974 <HAL_TIM_MspPostInit+0x10c>)
 800190e:	f001 fec5 	bl	800369c <HAL_GPIO_Init>
}
 8001912:	e024      	b.n	800195e <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM4)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a17      	ldr	r2, [pc, #92]	; (8001978 <HAL_TIM_MspPostInit+0x110>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d11f      	bne.n	800195e <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_TIM_MspPostInit+0x100>)
 8001920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001924:	4a10      	ldr	r2, [pc, #64]	; (8001968 <HAL_TIM_MspPostInit+0x100>)
 8001926:	f043 0308 	orr.w	r3, r3, #8
 800192a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_TIM_MspPostInit+0x100>)
 8001930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800193c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800194e:	2302      	movs	r3, #2
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	4619      	mov	r1, r3
 8001958:	4808      	ldr	r0, [pc, #32]	; (800197c <HAL_TIM_MspPostInit+0x114>)
 800195a:	f001 fe9f 	bl	800369c <HAL_GPIO_Init>
}
 800195e:	bf00      	nop
 8001960:	3728      	adds	r7, #40	; 0x28
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	58024400 	.word	0x58024400
 800196c:	58020000 	.word	0x58020000
 8001970:	40000400 	.word	0x40000400
 8001974:	58020400 	.word	0x58020400
 8001978:	40000800 	.word	0x40000800
 800197c:	58020c00 	.word	0x58020c00

08001980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b0ba      	sub	sp, #232	; 0xe8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	22c0      	movs	r2, #192	; 0xc0
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f008 fa05 	bl	8009db0 <memset>
  if(huart->Instance==USART3)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a27      	ldr	r2, [pc, #156]	; (8001a48 <HAL_UART_MspInit+0xc8>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d146      	bne.n	8001a3e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019b0:	f04f 0202 	mov.w	r2, #2
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80019bc:	2300      	movs	r3, #0
 80019be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c2:	f107 0310 	add.w	r3, r7, #16
 80019c6:	4618      	mov	r0, r3
 80019c8:	f003 f852 	bl	8004a70 <HAL_RCCEx_PeriphCLKConfig>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80019d2:	f7ff fe51 	bl	8001678 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80019d6:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <HAL_UART_MspInit+0xcc>)
 80019d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019dc:	4a1b      	ldr	r2, [pc, #108]	; (8001a4c <HAL_UART_MspInit+0xcc>)
 80019de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_UART_MspInit+0xcc>)
 80019e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019f4:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <HAL_UART_MspInit+0xcc>)
 80019f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fa:	4a14      	ldr	r2, [pc, #80]	; (8001a4c <HAL_UART_MspInit+0xcc>)
 80019fc:	f043 0308 	orr.w	r3, r3, #8
 8001a00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_UART_MspInit+0xcc>)
 8001a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a2c:	2307      	movs	r3, #7
 8001a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a32:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a36:	4619      	mov	r1, r3
 8001a38:	4805      	ldr	r0, [pc, #20]	; (8001a50 <HAL_UART_MspInit+0xd0>)
 8001a3a:	f001 fe2f 	bl	800369c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a3e:	bf00      	nop
 8001a40:	37e8      	adds	r7, #232	; 0xe8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40004800 	.word	0x40004800
 8001a4c:	58024400 	.word	0x58024400
 8001a50:	58020c00 	.word	0x58020c00

08001a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a58:	e7fe      	b.n	8001a58 <NMI_Handler+0x4>

08001a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <HardFault_Handler+0x4>

08001a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <MemManage_Handler+0x4>

08001a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <BusFault_Handler+0x4>

08001a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <UsageFault_Handler+0x4>

08001a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa0:	f000 f97a 	bl	8001d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <TIM2_IRQHandler+0x10>)
 8001aae:	f006 f881 	bl	8007bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	240000e0 	.word	0x240000e0

08001abc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <TIM3_IRQHandler+0x10>)
 8001ac2:	f006 f877 	bl	8007bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	2400012c 	.word	0x2400012c

08001ad0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <TIM4_IRQHandler+0x10>)
 8001ad6:	f006 f86d 	bl	8007bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	24000178 	.word	0x24000178

08001ae4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aec:	4a14      	ldr	r2, [pc, #80]	; (8001b40 <_sbrk+0x5c>)
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <_sbrk+0x60>)
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af8:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <_sbrk+0x64>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d102      	bne.n	8001b06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <_sbrk+0x64>)
 8001b02:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <_sbrk+0x68>)
 8001b04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <_sbrk+0x64>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d207      	bcs.n	8001b24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b14:	f008 f954 	bl	8009dc0 <__errno>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b22:	e009      	b.n	8001b38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <_sbrk+0x64>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <_sbrk+0x64>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	4a05      	ldr	r2, [pc, #20]	; (8001b48 <_sbrk+0x64>)
 8001b34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b36:	68fb      	ldr	r3, [r7, #12]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	24080000 	.word	0x24080000
 8001b44:	00000400 	.word	0x00000400
 8001b48:	24001228 	.word	0x24001228
 8001b4c:	24001378 	.word	0x24001378

08001b50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b54:	4b37      	ldr	r3, [pc, #220]	; (8001c34 <SystemInit+0xe4>)
 8001b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5a:	4a36      	ldr	r2, [pc, #216]	; (8001c34 <SystemInit+0xe4>)
 8001b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b64:	4b34      	ldr	r3, [pc, #208]	; (8001c38 <SystemInit+0xe8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	2b06      	cmp	r3, #6
 8001b6e:	d807      	bhi.n	8001b80 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b70:	4b31      	ldr	r3, [pc, #196]	; (8001c38 <SystemInit+0xe8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f023 030f 	bic.w	r3, r3, #15
 8001b78:	4a2f      	ldr	r2, [pc, #188]	; (8001c38 <SystemInit+0xe8>)
 8001b7a:	f043 0307 	orr.w	r3, r3, #7
 8001b7e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b80:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <SystemInit+0xec>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a2d      	ldr	r2, [pc, #180]	; (8001c3c <SystemInit+0xec>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <SystemInit+0xec>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b92:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <SystemInit+0xec>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4929      	ldr	r1, [pc, #164]	; (8001c3c <SystemInit+0xec>)
 8001b98:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <SystemInit+0xf0>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b9e:	4b26      	ldr	r3, [pc, #152]	; (8001c38 <SystemInit+0xe8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001baa:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <SystemInit+0xe8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f023 030f 	bic.w	r3, r3, #15
 8001bb2:	4a21      	ldr	r2, [pc, #132]	; (8001c38 <SystemInit+0xe8>)
 8001bb4:	f043 0307 	orr.w	r3, r3, #7
 8001bb8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001bba:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <SystemInit+0xec>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001bc0:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <SystemInit+0xec>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001bc6:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <SystemInit+0xec>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001bcc:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <SystemInit+0xec>)
 8001bce:	4a1d      	ldr	r2, [pc, #116]	; (8001c44 <SystemInit+0xf4>)
 8001bd0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <SystemInit+0xec>)
 8001bd4:	4a1c      	ldr	r2, [pc, #112]	; (8001c48 <SystemInit+0xf8>)
 8001bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001bd8:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <SystemInit+0xec>)
 8001bda:	4a1c      	ldr	r2, [pc, #112]	; (8001c4c <SystemInit+0xfc>)
 8001bdc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001bde:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <SystemInit+0xec>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001be4:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <SystemInit+0xec>)
 8001be6:	4a19      	ldr	r2, [pc, #100]	; (8001c4c <SystemInit+0xfc>)
 8001be8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001bea:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <SystemInit+0xec>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <SystemInit+0xec>)
 8001bf2:	4a16      	ldr	r2, [pc, #88]	; (8001c4c <SystemInit+0xfc>)
 8001bf4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001bf6:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <SystemInit+0xec>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <SystemInit+0xec>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0e      	ldr	r2, [pc, #56]	; (8001c3c <SystemInit+0xec>)
 8001c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <SystemInit+0xec>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <SystemInit+0x100>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <SystemInit+0x104>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c1a:	d202      	bcs.n	8001c22 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <SystemInit+0x108>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c22:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <SystemInit+0x10c>)
 8001c24:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001c28:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000ed00 	.word	0xe000ed00
 8001c38:	52002000 	.word	0x52002000
 8001c3c:	58024400 	.word	0x58024400
 8001c40:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c44:	02020200 	.word	0x02020200
 8001c48:	01ff0000 	.word	0x01ff0000
 8001c4c:	01010280 	.word	0x01010280
 8001c50:	5c001000 	.word	0x5c001000
 8001c54:	ffff0000 	.word	0xffff0000
 8001c58:	51008108 	.word	0x51008108
 8001c5c:	52004000 	.word	0x52004000

08001c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c64:	f7ff ff74 	bl	8001b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c6a:	490d      	ldr	r1, [pc, #52]	; (8001ca0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ca4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c70:	e002      	b.n	8001c78 <LoopCopyDataInit>

08001c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c76:	3304      	adds	r3, #4

08001c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c7c:	d3f9      	bcc.n	8001c72 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c80:	4c0a      	ldr	r4, [pc, #40]	; (8001cac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c84:	e001      	b.n	8001c8a <LoopFillZerobss>

08001c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c88:	3204      	adds	r2, #4

08001c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c8c:	d3fb      	bcc.n	8001c86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c8e:	f008 f89d 	bl	8009dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c92:	f7ff f89f 	bl	8000dd4 <main>
  bx  lr
 8001c96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c98:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c9c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ca0:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001ca4:	0800b678 	.word	0x0800b678
  ldr r2, =_sbss
 8001ca8:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8001cac:	24001378 	.word	0x24001378

08001cb0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cb0:	e7fe      	b.n	8001cb0 <ADC3_IRQHandler>
	...

08001cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cba:	2003      	movs	r0, #3
 8001cbc:	f001 fcae 	bl	800361c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cc0:	f002 fd00 	bl	80046c4 <HAL_RCC_GetSysClockFreq>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <HAL_Init+0x68>)
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	0a1b      	lsrs	r3, r3, #8
 8001ccc:	f003 030f 	and.w	r3, r3, #15
 8001cd0:	4913      	ldr	r1, [pc, #76]	; (8001d20 <HAL_Init+0x6c>)
 8001cd2:	5ccb      	ldrb	r3, [r1, r3]
 8001cd4:	f003 031f 	and.w	r3, r3, #31
 8001cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cdc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cde:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <HAL_Init+0x68>)
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	4a0e      	ldr	r2, [pc, #56]	; (8001d20 <HAL_Init+0x6c>)
 8001ce8:	5cd3      	ldrb	r3, [r2, r3]
 8001cea:	f003 031f 	and.w	r3, r3, #31
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf4:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <HAL_Init+0x70>)
 8001cf6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cf8:	4a0b      	ldr	r2, [pc, #44]	; (8001d28 <HAL_Init+0x74>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cfe:	200f      	movs	r0, #15
 8001d00:	f000 f814 	bl	8001d2c <HAL_InitTick>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e002      	b.n	8001d14 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d0e:	f7ff fcb9 	bl	8001684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	58024400 	.word	0x58024400
 8001d20:	0800b420 	.word	0x0800b420
 8001d24:	24000004 	.word	0x24000004
 8001d28:	24000000 	.word	0x24000000

08001d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d34:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HAL_InitTick+0x60>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e021      	b.n	8001d84 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <HAL_InitTick+0x64>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <HAL_InitTick+0x60>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d56:	4618      	mov	r0, r3
 8001d58:	f001 fc93 	bl	8003682 <HAL_SYSTICK_Config>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e00e      	b.n	8001d84 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b0f      	cmp	r3, #15
 8001d6a:	d80a      	bhi.n	8001d82 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d74:	f001 fc5d 	bl	8003632 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d78:	4a06      	ldr	r2, [pc, #24]	; (8001d94 <HAL_InitTick+0x68>)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	e000      	b.n	8001d84 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	2400000c 	.word	0x2400000c
 8001d90:	24000000 	.word	0x24000000
 8001d94:	24000008 	.word	0x24000008

08001d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_IncTick+0x20>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_IncTick+0x24>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4413      	add	r3, r2
 8001da8:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <HAL_IncTick+0x24>)
 8001daa:	6013      	str	r3, [r2, #0]
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	2400000c 	.word	0x2400000c
 8001dbc:	2400122c 	.word	0x2400122c

08001dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc4:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <HAL_GetTick+0x14>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	2400122c 	.word	0x2400122c

08001dd8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <HAL_GetREVID+0x14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	0c1b      	lsrs	r3, r3, #16
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	5c001000 	.word	0x5c001000

08001df0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	609a      	str	r2, [r3, #8]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b087      	sub	sp, #28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	3360      	adds	r3, #96	; 0x60
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	430b      	orrs	r3, r1
 8001e86:	431a      	orrs	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	371c      	adds	r7, #28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f003 031f 	and.w	r3, r3, #31
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	611a      	str	r2, [r3, #16]
}
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b087      	sub	sp, #28
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	3360      	adds	r3, #96	; 0x60
 8001eda:	461a      	mov	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	601a      	str	r2, [r3, #0]
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	371c      	adds	r7, #28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b087      	sub	sp, #28
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	3330      	adds	r3, #48	; 0x30
 8001f36:	461a      	mov	r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	0a1b      	lsrs	r3, r3, #8
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	4413      	add	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	211f      	movs	r1, #31
 8001f52:	fa01 f303 	lsl.w	r3, r1, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	401a      	ands	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	0e9b      	lsrs	r3, r3, #26
 8001f5e:	f003 011f 	and.w	r1, r3, #31
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	f003 031f 	and.w	r3, r3, #31
 8001f68:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f72:	bf00      	nop
 8001f74:	371c      	adds	r7, #28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b087      	sub	sp, #28
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	3314      	adds	r3, #20
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	0e5b      	lsrs	r3, r3, #25
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	4413      	add	r3, r2
 8001f9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	0d1b      	lsrs	r3, r3, #20
 8001fa6:	f003 031f 	and.w	r3, r3, #31
 8001faa:	2107      	movs	r1, #7
 8001fac:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	0d1b      	lsrs	r3, r3, #20
 8001fb8:	f003 031f 	and.w	r3, r3, #31
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fc8:	bf00      	nop
 8001fca:	371c      	adds	r7, #28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fec:	43db      	mvns	r3, r3
 8001fee:	401a      	ands	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f003 0318 	and.w	r3, r3, #24
 8001ff6:	4908      	ldr	r1, [pc, #32]	; (8002018 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ff8:	40d9      	lsrs	r1, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	400b      	ands	r3, r1
 8001ffe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002002:	431a      	orrs	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800200a:	bf00      	nop
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	000fffff 	.word	0x000fffff

0800201c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 031f 	and.w	r3, r3, #31
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002048:	4618      	mov	r0, r3
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002062:	4013      	ands	r3, r2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6093      	str	r3, [r2, #8]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	5fffffc0 	.word	0x5fffffc0

08002078 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800208c:	d101      	bne.n	8002092 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <LL_ADC_EnableInternalRegulator+0x24>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	6fffffc0 	.word	0x6fffffc0

080020c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020dc:	d101      	bne.n	80020e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <LL_ADC_Enable+0x24>)
 80020fe:	4013      	ands	r3, r2
 8002100:	f043 0201 	orr.w	r2, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	7fffffc0 	.word	0x7fffffc0

08002118 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <LL_ADC_IsEnabled+0x18>
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <LL_ADC_IsEnabled+0x1a>
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <LL_ADC_REG_StartConversion+0x24>)
 800214e:	4013      	ands	r3, r2
 8002150:	f043 0204 	orr.w	r2, r3, #4
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	7fffffc0 	.word	0x7fffffc0

08002168 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b04      	cmp	r3, #4
 800217a:	d101      	bne.n	8002180 <LL_ADC_REG_IsConversionOngoing+0x18>
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d101      	bne.n	80021a6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021b4:	b590      	push	{r4, r7, lr}
 80021b6:	b089      	sub	sp, #36	; 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021bc:	2300      	movs	r3, #0
 80021be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e18f      	b.n	80024ee <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d109      	bne.n	80021f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff fa6b 	bl	80016b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff3f 	bl	8002078 <LL_ADC_IsDeepPowerDownEnabled>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d004      	beq.n	800220a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff25 	bl	8002054 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff ff5a 	bl	80020c8 <LL_ADC_IsInternalRegulatorEnabled>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d114      	bne.n	8002244 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff ff3e 	bl	80020a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002224:	4b87      	ldr	r3, [pc, #540]	; (8002444 <HAL_ADC_Init+0x290>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	099b      	lsrs	r3, r3, #6
 800222a:	4a87      	ldr	r2, [pc, #540]	; (8002448 <HAL_ADC_Init+0x294>)
 800222c:	fba2 2303 	umull	r2, r3, r2, r3
 8002230:	099b      	lsrs	r3, r3, #6
 8002232:	3301      	adds	r3, #1
 8002234:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002236:	e002      	b.n	800223e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	3b01      	subs	r3, #1
 800223c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1f9      	bne.n	8002238 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff3d 	bl	80020c8 <LL_ADC_IsInternalRegulatorEnabled>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10d      	bne.n	8002270 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002258:	f043 0210 	orr.w	r2, r3, #16
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002264:	f043 0201 	orr.w	r2, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff77 	bl	8002168 <LL_ADC_REG_IsConversionOngoing>
 800227a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	2b00      	cmp	r3, #0
 8002286:	f040 8129 	bne.w	80024dc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2b00      	cmp	r3, #0
 800228e:	f040 8125 	bne.w	80024dc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002296:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800229a:	f043 0202 	orr.w	r2, r3, #2
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff ff36 	bl	8002118 <LL_ADC_IsEnabled>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d136      	bne.n	8002320 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a65      	ldr	r2, [pc, #404]	; (800244c <HAL_ADC_Init+0x298>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d004      	beq.n	80022c6 <HAL_ADC_Init+0x112>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a63      	ldr	r2, [pc, #396]	; (8002450 <HAL_ADC_Init+0x29c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d10e      	bne.n	80022e4 <HAL_ADC_Init+0x130>
 80022c6:	4861      	ldr	r0, [pc, #388]	; (800244c <HAL_ADC_Init+0x298>)
 80022c8:	f7ff ff26 	bl	8002118 <LL_ADC_IsEnabled>
 80022cc:	4604      	mov	r4, r0
 80022ce:	4860      	ldr	r0, [pc, #384]	; (8002450 <HAL_ADC_Init+0x29c>)
 80022d0:	f7ff ff22 	bl	8002118 <LL_ADC_IsEnabled>
 80022d4:	4603      	mov	r3, r0
 80022d6:	4323      	orrs	r3, r4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	bf0c      	ite	eq
 80022dc:	2301      	moveq	r3, #1
 80022de:	2300      	movne	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	e008      	b.n	80022f6 <HAL_ADC_Init+0x142>
 80022e4:	485b      	ldr	r0, [pc, #364]	; (8002454 <HAL_ADC_Init+0x2a0>)
 80022e6:	f7ff ff17 	bl	8002118 <LL_ADC_IsEnabled>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	bf0c      	ite	eq
 80022f0:	2301      	moveq	r3, #1
 80022f2:	2300      	movne	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d012      	beq.n	8002320 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a53      	ldr	r2, [pc, #332]	; (800244c <HAL_ADC_Init+0x298>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d004      	beq.n	800230e <HAL_ADC_Init+0x15a>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a51      	ldr	r2, [pc, #324]	; (8002450 <HAL_ADC_Init+0x29c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d101      	bne.n	8002312 <HAL_ADC_Init+0x15e>
 800230e:	4a52      	ldr	r2, [pc, #328]	; (8002458 <HAL_ADC_Init+0x2a4>)
 8002310:	e000      	b.n	8002314 <HAL_ADC_Init+0x160>
 8002312:	4a52      	ldr	r2, [pc, #328]	; (800245c <HAL_ADC_Init+0x2a8>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	4619      	mov	r1, r3
 800231a:	4610      	mov	r0, r2
 800231c:	f7ff fd68 	bl	8001df0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002320:	f7ff fd5a 	bl	8001dd8 <HAL_GetREVID>
 8002324:	4603      	mov	r3, r0
 8002326:	f241 0203 	movw	r2, #4099	; 0x1003
 800232a:	4293      	cmp	r3, r2
 800232c:	d914      	bls.n	8002358 <HAL_ADC_Init+0x1a4>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b10      	cmp	r3, #16
 8002334:	d110      	bne.n	8002358 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	7d5b      	ldrb	r3, [r3, #21]
 800233a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002340:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002346:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	7f1b      	ldrb	r3, [r3, #28]
 800234c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800234e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002350:	f043 030c 	orr.w	r3, r3, #12
 8002354:	61bb      	str	r3, [r7, #24]
 8002356:	e00d      	b.n	8002374 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	7d5b      	ldrb	r3, [r3, #21]
 800235c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002362:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002368:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	7f1b      	ldrb	r3, [r3, #28]
 800236e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	7f1b      	ldrb	r3, [r3, #28]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d106      	bne.n	800238a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	3b01      	subs	r3, #1
 8002382:	045b      	lsls	r3, r3, #17
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	2b00      	cmp	r3, #0
 8002390:	d009      	beq.n	80023a6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	4b2c      	ldr	r3, [pc, #176]	; (8002460 <HAL_ADC_Init+0x2ac>)
 80023ae:	4013      	ands	r3, r2
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	69b9      	ldr	r1, [r7, #24]
 80023b6:	430b      	orrs	r3, r1
 80023b8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fed2 	bl	8002168 <LL_ADC_REG_IsConversionOngoing>
 80023c4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fedf 	bl	800218e <LL_ADC_INJ_IsConversionOngoing>
 80023d0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d15f      	bne.n	8002498 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d15c      	bne.n	8002498 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	7d1b      	ldrb	r3, [r3, #20]
 80023e2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <HAL_ADC_Init+0x2b0>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6812      	ldr	r2, [r2, #0]
 80023fa:	69b9      	ldr	r1, [r7, #24]
 80023fc:	430b      	orrs	r3, r1
 80023fe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002406:	2b01      	cmp	r3, #1
 8002408:	d130      	bne.n	800246c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691a      	ldr	r2, [r3, #16]
 8002416:	4b14      	ldr	r3, [pc, #80]	; (8002468 <HAL_ADC_Init+0x2b4>)
 8002418:	4013      	ands	r3, r2
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800241e:	3a01      	subs	r2, #1
 8002420:	0411      	lsls	r1, r2, #16
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002426:	4311      	orrs	r1, r2
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800242c:	4311      	orrs	r1, r2
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002432:	430a      	orrs	r2, r1
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	611a      	str	r2, [r3, #16]
 8002440:	e01c      	b.n	800247c <HAL_ADC_Init+0x2c8>
 8002442:	bf00      	nop
 8002444:	24000000 	.word	0x24000000
 8002448:	053e2d63 	.word	0x053e2d63
 800244c:	40022000 	.word	0x40022000
 8002450:	40022100 	.word	0x40022100
 8002454:	58026000 	.word	0x58026000
 8002458:	40022300 	.word	0x40022300
 800245c:	58026300 	.word	0x58026300
 8002460:	fff0c003 	.word	0xfff0c003
 8002464:	ffffbffc 	.word	0xffffbffc
 8002468:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0201 	bic.w	r2, r2, #1
 800247a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 fde2 	bl	800305c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d10c      	bne.n	80024ba <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f023 010f 	bic.w	r1, r3, #15
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	1e5a      	subs	r2, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
 80024b8:	e007      	b.n	80024ca <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 020f 	bic.w	r2, r2, #15
 80024c8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ce:	f023 0303 	bic.w	r3, r3, #3
 80024d2:	f043 0201 	orr.w	r2, r3, #1
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	655a      	str	r2, [r3, #84]	; 0x54
 80024da:	e007      	b.n	80024ec <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e0:	f043 0210 	orr.w	r2, r3, #16
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3724      	adds	r7, #36	; 0x24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd90      	pop	{r4, r7, pc}
 80024f6:	bf00      	nop

080024f8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a5c      	ldr	r2, [pc, #368]	; (8002678 <HAL_ADC_Start+0x180>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d004      	beq.n	8002514 <HAL_ADC_Start+0x1c>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a5b      	ldr	r2, [pc, #364]	; (800267c <HAL_ADC_Start+0x184>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d101      	bne.n	8002518 <HAL_ADC_Start+0x20>
 8002514:	4b5a      	ldr	r3, [pc, #360]	; (8002680 <HAL_ADC_Start+0x188>)
 8002516:	e000      	b.n	800251a <HAL_ADC_Start+0x22>
 8002518:	4b5a      	ldr	r3, [pc, #360]	; (8002684 <HAL_ADC_Start+0x18c>)
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fd7e 	bl	800201c <LL_ADC_GetMultimode>
 8002520:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fe1e 	bl	8002168 <LL_ADC_REG_IsConversionOngoing>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	f040 809a 	bne.w	8002668 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800253a:	2b01      	cmp	r3, #1
 800253c:	d101      	bne.n	8002542 <HAL_ADC_Start+0x4a>
 800253e:	2302      	movs	r3, #2
 8002540:	e095      	b.n	800266e <HAL_ADC_Start+0x176>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fcfc 	bl	8002f48 <ADC_Enable>
 8002550:	4603      	mov	r3, r0
 8002552:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002554:	7dfb      	ldrb	r3, [r7, #23]
 8002556:	2b00      	cmp	r3, #0
 8002558:	f040 8081 	bne.w	800265e <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002560:	4b49      	ldr	r3, [pc, #292]	; (8002688 <HAL_ADC_Start+0x190>)
 8002562:	4013      	ands	r3, r2
 8002564:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a42      	ldr	r2, [pc, #264]	; (800267c <HAL_ADC_Start+0x184>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d002      	beq.n	800257c <HAL_ADC_Start+0x84>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	e000      	b.n	800257e <HAL_ADC_Start+0x86>
 800257c:	4b3e      	ldr	r3, [pc, #248]	; (8002678 <HAL_ADC_Start+0x180>)
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	4293      	cmp	r3, r2
 8002584:	d002      	beq.n	800258c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d105      	bne.n	8002598 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002590:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a4:	d106      	bne.n	80025b4 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025aa:	f023 0206 	bic.w	r2, r3, #6
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	659a      	str	r2, [r3, #88]	; 0x58
 80025b2:	e002      	b.n	80025ba <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	221c      	movs	r2, #28
 80025c0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a2b      	ldr	r2, [pc, #172]	; (800267c <HAL_ADC_Start+0x184>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d002      	beq.n	80025da <HAL_ADC_Start+0xe2>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	e000      	b.n	80025dc <HAL_ADC_Start+0xe4>
 80025da:	4b27      	ldr	r3, [pc, #156]	; (8002678 <HAL_ADC_Start+0x180>)
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d008      	beq.n	80025f6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	2b05      	cmp	r3, #5
 80025ee:	d002      	beq.n	80025f6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	2b09      	cmp	r3, #9
 80025f4:	d114      	bne.n	8002620 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d007      	beq.n	8002614 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002608:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800260c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fd91 	bl	8002140 <LL_ADC_REG_StartConversion>
 800261e:	e025      	b.n	800266c <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002624:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a12      	ldr	r2, [pc, #72]	; (800267c <HAL_ADC_Start+0x184>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d002      	beq.n	800263c <HAL_ADC_Start+0x144>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	e000      	b.n	800263e <HAL_ADC_Start+0x146>
 800263c:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <HAL_ADC_Start+0x180>)
 800263e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00f      	beq.n	800266c <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002650:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002654:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	655a      	str	r2, [r3, #84]	; 0x54
 800265c:	e006      	b.n	800266c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002666:	e001      	b.n	800266c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002668:	2302      	movs	r3, #2
 800266a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800266c:	7dfb      	ldrb	r3, [r7, #23]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40022000 	.word	0x40022000
 800267c:	40022100 	.word	0x40022100
 8002680:	40022300 	.word	0x40022300
 8002684:	58026300 	.word	0x58026300
 8002688:	fffff0fe 	.word	0xfffff0fe

0800268c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a72      	ldr	r2, [pc, #456]	; (8002864 <HAL_ADC_PollForConversion+0x1d8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d004      	beq.n	80026aa <HAL_ADC_PollForConversion+0x1e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a70      	ldr	r2, [pc, #448]	; (8002868 <HAL_ADC_PollForConversion+0x1dc>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d101      	bne.n	80026ae <HAL_ADC_PollForConversion+0x22>
 80026aa:	4b70      	ldr	r3, [pc, #448]	; (800286c <HAL_ADC_PollForConversion+0x1e0>)
 80026ac:	e000      	b.n	80026b0 <HAL_ADC_PollForConversion+0x24>
 80026ae:	4b70      	ldr	r3, [pc, #448]	; (8002870 <HAL_ADC_PollForConversion+0x1e4>)
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fcb3 	bl	800201c <LL_ADC_GetMultimode>
 80026b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	2b08      	cmp	r3, #8
 80026be:	d102      	bne.n	80026c6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80026c0:	2308      	movs	r3, #8
 80026c2:	61fb      	str	r3, [r7, #28]
 80026c4:	e037      	b.n	8002736 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	2b05      	cmp	r3, #5
 80026d0:	d002      	beq.n	80026d8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2b09      	cmp	r3, #9
 80026d6:	d111      	bne.n	80026fc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d007      	beq.n	80026f6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ea:	f043 0220 	orr.w	r2, r3, #32
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e0b1      	b.n	800285a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80026f6:	2304      	movs	r3, #4
 80026f8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80026fa:	e01c      	b.n	8002736 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a58      	ldr	r2, [pc, #352]	; (8002864 <HAL_ADC_PollForConversion+0x1d8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d004      	beq.n	8002710 <HAL_ADC_PollForConversion+0x84>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a57      	ldr	r2, [pc, #348]	; (8002868 <HAL_ADC_PollForConversion+0x1dc>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d101      	bne.n	8002714 <HAL_ADC_PollForConversion+0x88>
 8002710:	4b56      	ldr	r3, [pc, #344]	; (800286c <HAL_ADC_PollForConversion+0x1e0>)
 8002712:	e000      	b.n	8002716 <HAL_ADC_PollForConversion+0x8a>
 8002714:	4b56      	ldr	r3, [pc, #344]	; (8002870 <HAL_ADC_PollForConversion+0x1e4>)
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fc8e 	bl	8002038 <LL_ADC_GetMultiDMATransfer>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d007      	beq.n	8002732 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002726:	f043 0220 	orr.w	r2, r3, #32
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e093      	b.n	800285a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002732:	2304      	movs	r3, #4
 8002734:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002736:	f7ff fb43 	bl	8001dc0 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800273c:	e021      	b.n	8002782 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002744:	d01d      	beq.n	8002782 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002746:	f7ff fb3b 	bl	8001dc0 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d302      	bcc.n	800275c <HAL_ADC_PollForConversion+0xd0>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d112      	bne.n	8002782 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	4013      	ands	r3, r2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10b      	bne.n	8002782 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276e:	f043 0204 	orr.w	r2, r3, #4
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e06b      	b.n	800285a <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	4013      	ands	r3, r2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0d6      	beq.n	800273e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002794:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fbad 	bl	8001f00 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d01c      	beq.n	80027e6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	7d5b      	ldrb	r3, [r3, #21]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d118      	bne.n	80027e6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d111      	bne.n	80027e6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d105      	bne.n	80027e6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027de:	f043 0201 	orr.w	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a1f      	ldr	r2, [pc, #124]	; (8002868 <HAL_ADC_PollForConversion+0x1dc>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d002      	beq.n	80027f6 <HAL_ADC_PollForConversion+0x16a>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	e000      	b.n	80027f8 <HAL_ADC_PollForConversion+0x16c>
 80027f6:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <HAL_ADC_PollForConversion+0x1d8>)
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d008      	beq.n	8002812 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d005      	beq.n	8002812 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2b05      	cmp	r3, #5
 800280a:	d002      	beq.n	8002812 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2b09      	cmp	r3, #9
 8002810:	d104      	bne.n	800281c <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	61bb      	str	r3, [r7, #24]
 800281a:	e00c      	b.n	8002836 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a11      	ldr	r2, [pc, #68]	; (8002868 <HAL_ADC_PollForConversion+0x1dc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d002      	beq.n	800282c <HAL_ADC_PollForConversion+0x1a0>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	e000      	b.n	800282e <HAL_ADC_PollForConversion+0x1a2>
 800282c:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <HAL_ADC_PollForConversion+0x1d8>)
 800282e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	2b08      	cmp	r3, #8
 800283a:	d104      	bne.n	8002846 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2208      	movs	r2, #8
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	e008      	b.n	8002858 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d103      	bne.n	8002858 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	220c      	movs	r2, #12
 8002856:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3720      	adds	r7, #32
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40022000 	.word	0x40022000
 8002868:	40022100 	.word	0x40022100
 800286c:	40022300 	.word	0x40022300
 8002870:	58026300 	.word	0x58026300

08002874 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b0a1      	sub	sp, #132	; 0x84
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	4a65      	ldr	r2, [pc, #404]	; (8002a40 <HAL_ADC_ConfigChannel+0x1b0>)
 80028aa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x2a>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e32e      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x688>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff fc4e 	bl	8002168 <LL_ADC_REG_IsConversionOngoing>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f040 8313 	bne.w	8002efa <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	db2c      	blt.n	8002936 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d108      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x6a>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	0e9b      	lsrs	r3, r3, #26
 80028ee:	f003 031f 	and.w	r3, r3, #31
 80028f2:	2201      	movs	r2, #1
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	e016      	b.n	8002928 <HAL_ADC_ConfigChannel+0x98>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002902:	fa93 f3a3 	rbit	r3, r3
 8002906:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002908:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800290a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800290c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002912:	2320      	movs	r3, #32
 8002914:	e003      	b.n	800291e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002916:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002918:	fab3 f383 	clz	r3, r3
 800291c:	b2db      	uxtb	r3, r3
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	2201      	movs	r2, #1
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	69d1      	ldr	r1, [r2, #28]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	430b      	orrs	r3, r1
 8002934:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6859      	ldr	r1, [r3, #4]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	f7ff faef 	bl	8001f26 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff fc0b 	bl	8002168 <LL_ADC_REG_IsConversionOngoing>
 8002952:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fc18 	bl	800218e <LL_ADC_INJ_IsConversionOngoing>
 800295e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002962:	2b00      	cmp	r3, #0
 8002964:	f040 80b8 	bne.w	8002ad8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002968:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800296a:	2b00      	cmp	r3, #0
 800296c:	f040 80b4 	bne.w	8002ad8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	6819      	ldr	r1, [r3, #0]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	461a      	mov	r2, r3
 800297e:	f7ff fafe 	bl	8001f7e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002982:	4b30      	ldr	r3, [pc, #192]	; (8002a44 <HAL_ADC_ConfigChannel+0x1b4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800298a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800298e:	d10b      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x118>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	695a      	ldr	r2, [r3, #20]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	089b      	lsrs	r3, r3, #2
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	e01d      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x154>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10b      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x13e>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	089b      	lsrs	r3, r3, #2
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	e00a      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x154>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	695a      	ldr	r2, [r3, #20]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	089b      	lsrs	r3, r3, #2
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d02c      	beq.n	8002a48 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	6919      	ldr	r1, [r3, #16]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029fc:	f7ff fa2c 	bl	8001e58 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6818      	ldr	r0, [r3, #0]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	6919      	ldr	r1, [r3, #16]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	7e5b      	ldrb	r3, [r3, #25]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d102      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x186>
 8002a10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002a14:	e000      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x188>
 8002a16:	2300      	movs	r3, #0
 8002a18:	461a      	mov	r2, r3
 8002a1a:	f7ff fa56 	bl	8001eca <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6818      	ldr	r0, [r3, #0]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	6919      	ldr	r1, [r3, #16]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	7e1b      	ldrb	r3, [r3, #24]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d102      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x1a4>
 8002a2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a32:	e000      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x1a6>
 8002a34:	2300      	movs	r3, #0
 8002a36:	461a      	mov	r2, r3
 8002a38:	f7ff fa2e 	bl	8001e98 <LL_ADC_SetDataRightShift>
 8002a3c:	e04c      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x248>
 8002a3e:	bf00      	nop
 8002a40:	47ff0000 	.word	0x47ff0000
 8002a44:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	069b      	lsls	r3, r3, #26
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d107      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a6a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	069b      	lsls	r3, r3, #26
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d107      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a8e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	069b      	lsls	r3, r3, #26
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d107      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ab2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	069b      	lsls	r3, r3, #26
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d107      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ad6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fb1b 	bl	8002118 <LL_ADC_IsEnabled>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f040 8211 	bne.w	8002f0c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6818      	ldr	r0, [r3, #0]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	6819      	ldr	r1, [r3, #0]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	461a      	mov	r2, r3
 8002af8:	f7ff fa6c 	bl	8001fd4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	4aa1      	ldr	r2, [pc, #644]	; (8002d88 <HAL_ADC_ConfigChannel+0x4f8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	f040 812e 	bne.w	8002d64 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10b      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x2a0>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	0e9b      	lsrs	r3, r3, #26
 8002b1e:	3301      	adds	r3, #1
 8002b20:	f003 031f 	and.w	r3, r3, #31
 8002b24:	2b09      	cmp	r3, #9
 8002b26:	bf94      	ite	ls
 8002b28:	2301      	movls	r3, #1
 8002b2a:	2300      	movhi	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	e019      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x2d4>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b38:	fa93 f3a3 	rbit	r3, r3
 8002b3c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b40:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002b48:	2320      	movs	r3, #32
 8002b4a:	e003      	b.n	8002b54 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b4e:	fab3 f383 	clz	r3, r3
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	3301      	adds	r3, #1
 8002b56:	f003 031f 	and.w	r3, r3, #31
 8002b5a:	2b09      	cmp	r3, #9
 8002b5c:	bf94      	ite	ls
 8002b5e:	2301      	movls	r3, #1
 8002b60:	2300      	movhi	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d079      	beq.n	8002c5c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d107      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x2f4>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	0e9b      	lsrs	r3, r3, #26
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	069b      	lsls	r3, r3, #26
 8002b7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b82:	e015      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x320>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b8c:	fa93 f3a3 	rbit	r3, r3
 8002b90:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b94:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002b9c:	2320      	movs	r3, #32
 8002b9e:	e003      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	3301      	adds	r3, #1
 8002baa:	069b      	lsls	r3, r3, #26
 8002bac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d109      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x340>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0e9b      	lsrs	r3, r3, #26
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	2101      	movs	r1, #1
 8002bca:	fa01 f303 	lsl.w	r3, r1, r3
 8002bce:	e017      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x370>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bd8:	fa93 f3a3 	rbit	r3, r3
 8002bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002be8:	2320      	movs	r3, #32
 8002bea:	e003      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bee:	fab3 f383 	clz	r3, r3
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	f003 031f 	and.w	r3, r3, #31
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002c00:	ea42 0103 	orr.w	r1, r2, r3
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10a      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x396>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	0e9b      	lsrs	r3, r3, #26
 8002c16:	3301      	adds	r3, #1
 8002c18:	f003 021f 	and.w	r2, r3, #31
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	4413      	add	r3, r2
 8002c22:	051b      	lsls	r3, r3, #20
 8002c24:	e018      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x3c8>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c2e:	fa93 f3a3 	rbit	r3, r3
 8002c32:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c36:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002c3e:	2320      	movs	r3, #32
 8002c40:	e003      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c44:	fab3 f383 	clz	r3, r3
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	f003 021f 	and.w	r2, r3, #31
 8002c50:	4613      	mov	r3, r2
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	4413      	add	r3, r2
 8002c56:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	e07e      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d107      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x3e8>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	0e9b      	lsrs	r3, r3, #26
 8002c6e:	3301      	adds	r3, #1
 8002c70:	069b      	lsls	r3, r3, #26
 8002c72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c76:	e015      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x414>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c80:	fa93 f3a3 	rbit	r3, r3
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002c90:	2320      	movs	r3, #32
 8002c92:	e003      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c96:	fab3 f383 	clz	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	069b      	lsls	r3, r3, #26
 8002ca0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d109      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x434>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	0e9b      	lsrs	r3, r3, #26
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	f003 031f 	and.w	r3, r3, #31
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc2:	e017      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x464>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	61bb      	str	r3, [r7, #24]
  return result;
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002cdc:	2320      	movs	r3, #32
 8002cde:	e003      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	fab3 f383 	clz	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	3301      	adds	r3, #1
 8002cea:	f003 031f 	and.w	r3, r3, #31
 8002cee:	2101      	movs	r1, #1
 8002cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf4:	ea42 0103 	orr.w	r1, r2, r3
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10d      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x490>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	0e9b      	lsrs	r3, r3, #26
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	f003 021f 	and.w	r2, r3, #31
 8002d10:	4613      	mov	r3, r2
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	4413      	add	r3, r2
 8002d16:	3b1e      	subs	r3, #30
 8002d18:	051b      	lsls	r3, r3, #20
 8002d1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d1e:	e01b      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x4c8>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	fa93 f3a3 	rbit	r3, r3
 8002d2c:	60fb      	str	r3, [r7, #12]
  return result;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002d38:	2320      	movs	r3, #32
 8002d3a:	e003      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	fab3 f383 	clz	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	3301      	adds	r3, #1
 8002d46:	f003 021f 	and.w	r2, r3, #31
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	4413      	add	r3, r2
 8002d50:	3b1e      	subs	r3, #30
 8002d52:	051b      	lsls	r3, r3, #20
 8002d54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d58:	430b      	orrs	r3, r1
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	6892      	ldr	r2, [r2, #8]
 8002d5e:	4619      	mov	r1, r3
 8002d60:	f7ff f90d 	bl	8001f7e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f280 80cf 	bge.w	8002f0c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a06      	ldr	r2, [pc, #24]	; (8002d8c <HAL_ADC_ConfigChannel+0x4fc>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d004      	beq.n	8002d82 <HAL_ADC_ConfigChannel+0x4f2>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a04      	ldr	r2, [pc, #16]	; (8002d90 <HAL_ADC_ConfigChannel+0x500>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d10a      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x508>
 8002d82:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <HAL_ADC_ConfigChannel+0x504>)
 8002d84:	e009      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x50a>
 8002d86:	bf00      	nop
 8002d88:	47ff0000 	.word	0x47ff0000
 8002d8c:	40022000 	.word	0x40022000
 8002d90:	40022100 	.word	0x40022100
 8002d94:	40022300 	.word	0x40022300
 8002d98:	4b61      	ldr	r3, [pc, #388]	; (8002f20 <HAL_ADC_ConfigChannel+0x690>)
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff f84e 	bl	8001e3c <LL_ADC_GetCommonPathInternalCh>
 8002da0:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a5f      	ldr	r2, [pc, #380]	; (8002f24 <HAL_ADC_ConfigChannel+0x694>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d004      	beq.n	8002db6 <HAL_ADC_ConfigChannel+0x526>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a5d      	ldr	r2, [pc, #372]	; (8002f28 <HAL_ADC_ConfigChannel+0x698>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d10e      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x544>
 8002db6:	485b      	ldr	r0, [pc, #364]	; (8002f24 <HAL_ADC_ConfigChannel+0x694>)
 8002db8:	f7ff f9ae 	bl	8002118 <LL_ADC_IsEnabled>
 8002dbc:	4604      	mov	r4, r0
 8002dbe:	485a      	ldr	r0, [pc, #360]	; (8002f28 <HAL_ADC_ConfigChannel+0x698>)
 8002dc0:	f7ff f9aa 	bl	8002118 <LL_ADC_IsEnabled>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	4323      	orrs	r3, r4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	bf0c      	ite	eq
 8002dcc:	2301      	moveq	r3, #1
 8002dce:	2300      	movne	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	e008      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x556>
 8002dd4:	4855      	ldr	r0, [pc, #340]	; (8002f2c <HAL_ADC_ConfigChannel+0x69c>)
 8002dd6:	f7ff f99f 	bl	8002118 <LL_ADC_IsEnabled>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf0c      	ite	eq
 8002de0:	2301      	moveq	r3, #1
 8002de2:	2300      	movne	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d07d      	beq.n	8002ee6 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a50      	ldr	r2, [pc, #320]	; (8002f30 <HAL_ADC_ConfigChannel+0x6a0>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d130      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x5c6>
 8002df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d12b      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a4a      	ldr	r2, [pc, #296]	; (8002f2c <HAL_ADC_ConfigChannel+0x69c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	f040 8081 	bne.w	8002f0c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a45      	ldr	r2, [pc, #276]	; (8002f24 <HAL_ADC_ConfigChannel+0x694>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d004      	beq.n	8002e1e <HAL_ADC_ConfigChannel+0x58e>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a43      	ldr	r2, [pc, #268]	; (8002f28 <HAL_ADC_ConfigChannel+0x698>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d101      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x592>
 8002e1e:	4a45      	ldr	r2, [pc, #276]	; (8002f34 <HAL_ADC_ConfigChannel+0x6a4>)
 8002e20:	e000      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x594>
 8002e22:	4a3f      	ldr	r2, [pc, #252]	; (8002f20 <HAL_ADC_ConfigChannel+0x690>)
 8002e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	f7fe fff2 	bl	8001e16 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e32:	4b41      	ldr	r3, [pc, #260]	; (8002f38 <HAL_ADC_ConfigChannel+0x6a8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	099b      	lsrs	r3, r3, #6
 8002e38:	4a40      	ldr	r2, [pc, #256]	; (8002f3c <HAL_ADC_ConfigChannel+0x6ac>)
 8002e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3e:	099b      	lsrs	r3, r3, #6
 8002e40:	3301      	adds	r3, #1
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002e46:	e002      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f9      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e54:	e05a      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a39      	ldr	r2, [pc, #228]	; (8002f40 <HAL_ADC_ConfigChannel+0x6b0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d11e      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x60e>
 8002e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d119      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a2f      	ldr	r2, [pc, #188]	; (8002f2c <HAL_ADC_ConfigChannel+0x69c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d14b      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a2a      	ldr	r2, [pc, #168]	; (8002f24 <HAL_ADC_ConfigChannel+0x694>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d004      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x5f8>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a29      	ldr	r2, [pc, #164]	; (8002f28 <HAL_ADC_ConfigChannel+0x698>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d101      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x5fc>
 8002e88:	4a2a      	ldr	r2, [pc, #168]	; (8002f34 <HAL_ADC_ConfigChannel+0x6a4>)
 8002e8a:	e000      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x5fe>
 8002e8c:	4a24      	ldr	r2, [pc, #144]	; (8002f20 <HAL_ADC_ConfigChannel+0x690>)
 8002e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e94:	4619      	mov	r1, r3
 8002e96:	4610      	mov	r0, r2
 8002e98:	f7fe ffbd 	bl	8001e16 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e9c:	e036      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a28      	ldr	r2, [pc, #160]	; (8002f44 <HAL_ADC_ConfigChannel+0x6b4>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d131      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x67c>
 8002ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d12c      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1d      	ldr	r2, [pc, #116]	; (8002f2c <HAL_ADC_ConfigChannel+0x69c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d127      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a18      	ldr	r2, [pc, #96]	; (8002f24 <HAL_ADC_ConfigChannel+0x694>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d004      	beq.n	8002ed0 <HAL_ADC_ConfigChannel+0x640>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a17      	ldr	r2, [pc, #92]	; (8002f28 <HAL_ADC_ConfigChannel+0x698>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d101      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x644>
 8002ed0:	4a18      	ldr	r2, [pc, #96]	; (8002f34 <HAL_ADC_ConfigChannel+0x6a4>)
 8002ed2:	e000      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x646>
 8002ed4:	4a12      	ldr	r2, [pc, #72]	; (8002f20 <HAL_ADC_ConfigChannel+0x690>)
 8002ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002edc:	4619      	mov	r1, r3
 8002ede:	4610      	mov	r0, r2
 8002ee0:	f7fe ff99 	bl	8001e16 <LL_ADC_SetCommonPathInternalCh>
 8002ee4:	e012      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eea:	f043 0220 	orr.w	r2, r3, #32
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002ef8:	e008      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efe:	f043 0220 	orr.w	r2, r3, #32
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f14:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3784      	adds	r7, #132	; 0x84
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd90      	pop	{r4, r7, pc}
 8002f20:	58026300 	.word	0x58026300
 8002f24:	40022000 	.word	0x40022000
 8002f28:	40022100 	.word	0x40022100
 8002f2c:	58026000 	.word	0x58026000
 8002f30:	cb840000 	.word	0xcb840000
 8002f34:	40022300 	.word	0x40022300
 8002f38:	24000000 	.word	0x24000000
 8002f3c:	053e2d63 	.word	0x053e2d63
 8002f40:	c7520000 	.word	0xc7520000
 8002f44:	cfb80000 	.word	0xcfb80000

08002f48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff f8df 	bl	8002118 <LL_ADC_IsEnabled>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d16e      	bne.n	800303e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	4b38      	ldr	r3, [pc, #224]	; (8003048 <ADC_Enable+0x100>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00d      	beq.n	8002f8a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f72:	f043 0210 	orr.w	r2, r3, #16
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7e:	f043 0201 	orr.w	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e05a      	b.n	8003040 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff f8ae 	bl	80020f0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f94:	f7fe ff14 	bl	8001dc0 <HAL_GetTick>
 8002f98:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a2b      	ldr	r2, [pc, #172]	; (800304c <ADC_Enable+0x104>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d004      	beq.n	8002fae <ADC_Enable+0x66>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a29      	ldr	r2, [pc, #164]	; (8003050 <ADC_Enable+0x108>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d101      	bne.n	8002fb2 <ADC_Enable+0x6a>
 8002fae:	4b29      	ldr	r3, [pc, #164]	; (8003054 <ADC_Enable+0x10c>)
 8002fb0:	e000      	b.n	8002fb4 <ADC_Enable+0x6c>
 8002fb2:	4b29      	ldr	r3, [pc, #164]	; (8003058 <ADC_Enable+0x110>)
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff f831 	bl	800201c <LL_ADC_GetMultimode>
 8002fba:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a23      	ldr	r2, [pc, #140]	; (8003050 <ADC_Enable+0x108>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d002      	beq.n	8002fcc <ADC_Enable+0x84>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	e000      	b.n	8002fce <ADC_Enable+0x86>
 8002fcc:	4b1f      	ldr	r3, [pc, #124]	; (800304c <ADC_Enable+0x104>)
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d02c      	beq.n	8003030 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d130      	bne.n	800303e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fdc:	e028      	b.n	8003030 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff f898 	bl	8002118 <LL_ADC_IsEnabled>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d104      	bne.n	8002ff8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff f87c 	bl	80020f0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ff8:	f7fe fee2 	bl	8001dc0 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d914      	bls.n	8003030 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b01      	cmp	r3, #1
 8003012:	d00d      	beq.n	8003030 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003018:	f043 0210 	orr.w	r2, r3, #16
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003024:	f043 0201 	orr.w	r2, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e007      	b.n	8003040 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b01      	cmp	r3, #1
 800303c:	d1cf      	bne.n	8002fde <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	8000003f 	.word	0x8000003f
 800304c:	40022000 	.word	0x40022000
 8003050:	40022100 	.word	0x40022100
 8003054:	40022300 	.word	0x40022300
 8003058:	58026300 	.word	0x58026300

0800305c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a7a      	ldr	r2, [pc, #488]	; (8003254 <ADC_ConfigureBoostMode+0x1f8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d004      	beq.n	8003078 <ADC_ConfigureBoostMode+0x1c>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a79      	ldr	r2, [pc, #484]	; (8003258 <ADC_ConfigureBoostMode+0x1fc>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d109      	bne.n	800308c <ADC_ConfigureBoostMode+0x30>
 8003078:	4b78      	ldr	r3, [pc, #480]	; (800325c <ADC_ConfigureBoostMode+0x200>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf14      	ite	ne
 8003084:	2301      	movne	r3, #1
 8003086:	2300      	moveq	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	e008      	b.n	800309e <ADC_ConfigureBoostMode+0x42>
 800308c:	4b74      	ldr	r3, [pc, #464]	; (8003260 <ADC_ConfigureBoostMode+0x204>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003094:	2b00      	cmp	r3, #0
 8003096:	bf14      	ite	ne
 8003098:	2301      	movne	r3, #1
 800309a:	2300      	moveq	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d01c      	beq.n	80030dc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80030a2:	f001 fc89 	bl	80049b8 <HAL_RCC_GetHCLKFreq>
 80030a6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030b0:	d010      	beq.n	80030d4 <ADC_ConfigureBoostMode+0x78>
 80030b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030b6:	d873      	bhi.n	80031a0 <ADC_ConfigureBoostMode+0x144>
 80030b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030bc:	d002      	beq.n	80030c4 <ADC_ConfigureBoostMode+0x68>
 80030be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030c2:	d16d      	bne.n	80031a0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	0c1b      	lsrs	r3, r3, #16
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d0:	60fb      	str	r3, [r7, #12]
        break;
 80030d2:	e068      	b.n	80031a6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	089b      	lsrs	r3, r3, #2
 80030d8:	60fb      	str	r3, [r7, #12]
        break;
 80030da:	e064      	b.n	80031a6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80030dc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80030e0:	f04f 0100 	mov.w	r1, #0
 80030e4:	f002 fece 	bl	8005e84 <HAL_RCCEx_GetPeriphCLKFreq>
 80030e8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80030f2:	d051      	beq.n	8003198 <ADC_ConfigureBoostMode+0x13c>
 80030f4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80030f8:	d854      	bhi.n	80031a4 <ADC_ConfigureBoostMode+0x148>
 80030fa:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80030fe:	d047      	beq.n	8003190 <ADC_ConfigureBoostMode+0x134>
 8003100:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003104:	d84e      	bhi.n	80031a4 <ADC_ConfigureBoostMode+0x148>
 8003106:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800310a:	d03d      	beq.n	8003188 <ADC_ConfigureBoostMode+0x12c>
 800310c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003110:	d848      	bhi.n	80031a4 <ADC_ConfigureBoostMode+0x148>
 8003112:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003116:	d033      	beq.n	8003180 <ADC_ConfigureBoostMode+0x124>
 8003118:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800311c:	d842      	bhi.n	80031a4 <ADC_ConfigureBoostMode+0x148>
 800311e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003122:	d029      	beq.n	8003178 <ADC_ConfigureBoostMode+0x11c>
 8003124:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003128:	d83c      	bhi.n	80031a4 <ADC_ConfigureBoostMode+0x148>
 800312a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800312e:	d01a      	beq.n	8003166 <ADC_ConfigureBoostMode+0x10a>
 8003130:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003134:	d836      	bhi.n	80031a4 <ADC_ConfigureBoostMode+0x148>
 8003136:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800313a:	d014      	beq.n	8003166 <ADC_ConfigureBoostMode+0x10a>
 800313c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003140:	d830      	bhi.n	80031a4 <ADC_ConfigureBoostMode+0x148>
 8003142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003146:	d00e      	beq.n	8003166 <ADC_ConfigureBoostMode+0x10a>
 8003148:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800314c:	d82a      	bhi.n	80031a4 <ADC_ConfigureBoostMode+0x148>
 800314e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003152:	d008      	beq.n	8003166 <ADC_ConfigureBoostMode+0x10a>
 8003154:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003158:	d824      	bhi.n	80031a4 <ADC_ConfigureBoostMode+0x148>
 800315a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800315e:	d002      	beq.n	8003166 <ADC_ConfigureBoostMode+0x10a>
 8003160:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003164:	d11e      	bne.n	80031a4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	0c9b      	lsrs	r3, r3, #18
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	fbb2 f3f3 	udiv	r3, r2, r3
 8003174:	60fb      	str	r3, [r7, #12]
        break;
 8003176:	e016      	b.n	80031a6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	091b      	lsrs	r3, r3, #4
 800317c:	60fb      	str	r3, [r7, #12]
        break;
 800317e:	e012      	b.n	80031a6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	60fb      	str	r3, [r7, #12]
        break;
 8003186:	e00e      	b.n	80031a6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	099b      	lsrs	r3, r3, #6
 800318c:	60fb      	str	r3, [r7, #12]
        break;
 800318e:	e00a      	b.n	80031a6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	09db      	lsrs	r3, r3, #7
 8003194:	60fb      	str	r3, [r7, #12]
        break;
 8003196:	e006      	b.n	80031a6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	0a1b      	lsrs	r3, r3, #8
 800319c:	60fb      	str	r3, [r7, #12]
        break;
 800319e:	e002      	b.n	80031a6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80031a0:	bf00      	nop
 80031a2:	e000      	b.n	80031a6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80031a4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80031a6:	f7fe fe17 	bl	8001dd8 <HAL_GetREVID>
 80031aa:	4603      	mov	r3, r0
 80031ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d815      	bhi.n	80031e0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4a2b      	ldr	r2, [pc, #172]	; (8003264 <ADC_ConfigureBoostMode+0x208>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d908      	bls.n	80031ce <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031ca:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80031cc:	e03e      	b.n	800324c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031dc:	609a      	str	r2, [r3, #8]
}
 80031de:	e035      	b.n	800324c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	085b      	lsrs	r3, r3, #1
 80031e4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4a1f      	ldr	r2, [pc, #124]	; (8003268 <ADC_ConfigureBoostMode+0x20c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d808      	bhi.n	8003200 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80031fc:	609a      	str	r2, [r3, #8]
}
 80031fe:	e025      	b.n	800324c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4a1a      	ldr	r2, [pc, #104]	; (800326c <ADC_ConfigureBoostMode+0x210>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d80a      	bhi.n	800321e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800321a:	609a      	str	r2, [r3, #8]
}
 800321c:	e016      	b.n	800324c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4a13      	ldr	r2, [pc, #76]	; (8003270 <ADC_ConfigureBoostMode+0x214>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d80a      	bhi.n	800323c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003238:	609a      	str	r2, [r3, #8]
}
 800323a:	e007      	b.n	800324c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800324a:	609a      	str	r2, [r3, #8]
}
 800324c:	bf00      	nop
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40022000 	.word	0x40022000
 8003258:	40022100 	.word	0x40022100
 800325c:	40022300 	.word	0x40022300
 8003260:	58026300 	.word	0x58026300
 8003264:	01312d00 	.word	0x01312d00
 8003268:	005f5e10 	.word	0x005f5e10
 800326c:	00bebc20 	.word	0x00bebc20
 8003270:	017d7840 	.word	0x017d7840

08003274 <LL_ADC_IsEnabled>:
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <LL_ADC_IsEnabled+0x18>
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <LL_ADC_IsEnabled+0x1a>
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <LL_ADC_REG_IsConversionOngoing>:
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d101      	bne.n	80032b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80032c0:	b590      	push	{r4, r7, lr}
 80032c2:	b09f      	sub	sp, #124	; 0x7c
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d101      	bne.n	80032de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032da:	2302      	movs	r3, #2
 80032dc:	e0be      	b.n	800345c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80032e6:	2300      	movs	r3, #0
 80032e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80032ea:	2300      	movs	r3, #0
 80032ec:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a5c      	ldr	r2, [pc, #368]	; (8003464 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d102      	bne.n	80032fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80032f8:	4b5b      	ldr	r3, [pc, #364]	; (8003468 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	e001      	b.n	8003302 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80032fe:	2300      	movs	r3, #0
 8003300:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10b      	bne.n	8003320 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330c:	f043 0220 	orr.w	r2, r3, #32
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e09d      	b.n	800345c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff ffb9 	bl	800329a <LL_ADC_REG_IsConversionOngoing>
 8003328:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff ffb3 	bl	800329a <LL_ADC_REG_IsConversionOngoing>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d17f      	bne.n	800343a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800333a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800333c:	2b00      	cmp	r3, #0
 800333e:	d17c      	bne.n	800343a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a47      	ldr	r2, [pc, #284]	; (8003464 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d004      	beq.n	8003354 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a46      	ldr	r2, [pc, #280]	; (8003468 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d101      	bne.n	8003358 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003354:	4b45      	ldr	r3, [pc, #276]	; (800346c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003356:	e000      	b.n	800335a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003358:	4b45      	ldr	r3, [pc, #276]	; (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800335a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d039      	beq.n	80033d8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	431a      	orrs	r2, r3
 8003372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003374:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a3a      	ldr	r2, [pc, #232]	; (8003464 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d004      	beq.n	800338a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a38      	ldr	r2, [pc, #224]	; (8003468 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d10e      	bne.n	80033a8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800338a:	4836      	ldr	r0, [pc, #216]	; (8003464 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800338c:	f7ff ff72 	bl	8003274 <LL_ADC_IsEnabled>
 8003390:	4604      	mov	r4, r0
 8003392:	4835      	ldr	r0, [pc, #212]	; (8003468 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003394:	f7ff ff6e 	bl	8003274 <LL_ADC_IsEnabled>
 8003398:	4603      	mov	r3, r0
 800339a:	4323      	orrs	r3, r4
 800339c:	2b00      	cmp	r3, #0
 800339e:	bf0c      	ite	eq
 80033a0:	2301      	moveq	r3, #1
 80033a2:	2300      	movne	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	e008      	b.n	80033ba <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80033a8:	4832      	ldr	r0, [pc, #200]	; (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80033aa:	f7ff ff63 	bl	8003274 <LL_ADC_IsEnabled>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf0c      	ite	eq
 80033b4:	2301      	moveq	r3, #1
 80033b6:	2300      	movne	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d047      	beq.n	800344e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	4b2d      	ldr	r3, [pc, #180]	; (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	6811      	ldr	r1, [r2, #0]
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	6892      	ldr	r2, [r2, #8]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	431a      	orrs	r2, r3
 80033d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033d6:	e03a      	b.n	800344e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80033d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a1e      	ldr	r2, [pc, #120]	; (8003464 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d004      	beq.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a1d      	ldr	r2, [pc, #116]	; (8003468 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d10e      	bne.n	8003416 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80033f8:	481a      	ldr	r0, [pc, #104]	; (8003464 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033fa:	f7ff ff3b 	bl	8003274 <LL_ADC_IsEnabled>
 80033fe:	4604      	mov	r4, r0
 8003400:	4819      	ldr	r0, [pc, #100]	; (8003468 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003402:	f7ff ff37 	bl	8003274 <LL_ADC_IsEnabled>
 8003406:	4603      	mov	r3, r0
 8003408:	4323      	orrs	r3, r4
 800340a:	2b00      	cmp	r3, #0
 800340c:	bf0c      	ite	eq
 800340e:	2301      	moveq	r3, #1
 8003410:	2300      	movne	r3, #0
 8003412:	b2db      	uxtb	r3, r3
 8003414:	e008      	b.n	8003428 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003416:	4817      	ldr	r0, [pc, #92]	; (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003418:	f7ff ff2c 	bl	8003274 <LL_ADC_IsEnabled>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	bf0c      	ite	eq
 8003422:	2301      	moveq	r3, #1
 8003424:	2300      	movne	r3, #0
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d010      	beq.n	800344e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800342c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	4b11      	ldr	r3, [pc, #68]	; (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003432:	4013      	ands	r3, r2
 8003434:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003436:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003438:	e009      	b.n	800344e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343e:	f043 0220 	orr.w	r2, r3, #32
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800344c:	e000      	b.n	8003450 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800344e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003458:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800345c:	4618      	mov	r0, r3
 800345e:	377c      	adds	r7, #124	; 0x7c
 8003460:	46bd      	mov	sp, r7
 8003462:	bd90      	pop	{r4, r7, pc}
 8003464:	40022000 	.word	0x40022000
 8003468:	40022100 	.word	0x40022100
 800346c:	40022300 	.word	0x40022300
 8003470:	58026300 	.word	0x58026300
 8003474:	58026000 	.word	0x58026000
 8003478:	fffff0e0 	.word	0xfffff0e0

0800347c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800348c:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <__NVIC_SetPriorityGrouping+0x40>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003498:	4013      	ands	r3, r2
 800349a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80034a4:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <__NVIC_SetPriorityGrouping+0x44>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034aa:	4a04      	ldr	r2, [pc, #16]	; (80034bc <__NVIC_SetPriorityGrouping+0x40>)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	60d3      	str	r3, [r2, #12]
}
 80034b0:	bf00      	nop
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	e000ed00 	.word	0xe000ed00
 80034c0:	05fa0000 	.word	0x05fa0000

080034c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034c8:	4b04      	ldr	r3, [pc, #16]	; (80034dc <__NVIC_GetPriorityGrouping+0x18>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	0a1b      	lsrs	r3, r3, #8
 80034ce:	f003 0307 	and.w	r3, r3, #7
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	db0b      	blt.n	800350a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034f2:	88fb      	ldrh	r3, [r7, #6]
 80034f4:	f003 021f 	and.w	r2, r3, #31
 80034f8:	4907      	ldr	r1, [pc, #28]	; (8003518 <__NVIC_EnableIRQ+0x38>)
 80034fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034fe:	095b      	lsrs	r3, r3, #5
 8003500:	2001      	movs	r0, #1
 8003502:	fa00 f202 	lsl.w	r2, r0, r2
 8003506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	e000e100 	.word	0xe000e100

0800351c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	6039      	str	r1, [r7, #0]
 8003526:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003528:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800352c:	2b00      	cmp	r3, #0
 800352e:	db0a      	blt.n	8003546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	b2da      	uxtb	r2, r3
 8003534:	490c      	ldr	r1, [pc, #48]	; (8003568 <__NVIC_SetPriority+0x4c>)
 8003536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800353a:	0112      	lsls	r2, r2, #4
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	440b      	add	r3, r1
 8003540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003544:	e00a      	b.n	800355c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	b2da      	uxtb	r2, r3
 800354a:	4908      	ldr	r1, [pc, #32]	; (800356c <__NVIC_SetPriority+0x50>)
 800354c:	88fb      	ldrh	r3, [r7, #6]
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	3b04      	subs	r3, #4
 8003554:	0112      	lsls	r2, r2, #4
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	440b      	add	r3, r1
 800355a:	761a      	strb	r2, [r3, #24]
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	e000e100 	.word	0xe000e100
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003570:	b480      	push	{r7}
 8003572:	b089      	sub	sp, #36	; 0x24
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f1c3 0307 	rsb	r3, r3, #7
 800358a:	2b04      	cmp	r3, #4
 800358c:	bf28      	it	cs
 800358e:	2304      	movcs	r3, #4
 8003590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	3304      	adds	r3, #4
 8003596:	2b06      	cmp	r3, #6
 8003598:	d902      	bls.n	80035a0 <NVIC_EncodePriority+0x30>
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3b03      	subs	r3, #3
 800359e:	e000      	b.n	80035a2 <NVIC_EncodePriority+0x32>
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	43da      	mvns	r2, r3
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	401a      	ands	r2, r3
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	fa01 f303 	lsl.w	r3, r1, r3
 80035c2:	43d9      	mvns	r1, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c8:	4313      	orrs	r3, r2
         );
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3724      	adds	r7, #36	; 0x24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
	...

080035d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035e8:	d301      	bcc.n	80035ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035ea:	2301      	movs	r3, #1
 80035ec:	e00f      	b.n	800360e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035ee:	4a0a      	ldr	r2, [pc, #40]	; (8003618 <SysTick_Config+0x40>)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035f6:	210f      	movs	r1, #15
 80035f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035fc:	f7ff ff8e 	bl	800351c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003600:	4b05      	ldr	r3, [pc, #20]	; (8003618 <SysTick_Config+0x40>)
 8003602:	2200      	movs	r2, #0
 8003604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003606:	4b04      	ldr	r3, [pc, #16]	; (8003618 <SysTick_Config+0x40>)
 8003608:	2207      	movs	r2, #7
 800360a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	e000e010 	.word	0xe000e010

0800361c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7ff ff29 	bl	800347c <__NVIC_SetPriorityGrouping>
}
 800362a:	bf00      	nop
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b086      	sub	sp, #24
 8003636:	af00      	add	r7, sp, #0
 8003638:	4603      	mov	r3, r0
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
 800363e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003640:	f7ff ff40 	bl	80034c4 <__NVIC_GetPriorityGrouping>
 8003644:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	68b9      	ldr	r1, [r7, #8]
 800364a:	6978      	ldr	r0, [r7, #20]
 800364c:	f7ff ff90 	bl	8003570 <NVIC_EncodePriority>
 8003650:	4602      	mov	r2, r0
 8003652:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003656:	4611      	mov	r1, r2
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff ff5f 	bl	800351c <__NVIC_SetPriority>
}
 800365e:	bf00      	nop
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b082      	sub	sp, #8
 800366a:	af00      	add	r7, sp, #0
 800366c:	4603      	mov	r3, r0
 800366e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003670:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff ff33 	bl	80034e0 <__NVIC_EnableIRQ>
}
 800367a:	bf00      	nop
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff ffa4 	bl	80035d8 <SysTick_Config>
 8003690:	4603      	mov	r3, r0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
	...

0800369c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800369c:	b480      	push	{r7}
 800369e:	b089      	sub	sp, #36	; 0x24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80036aa:	4b89      	ldr	r3, [pc, #548]	; (80038d0 <HAL_GPIO_Init+0x234>)
 80036ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036ae:	e194      	b.n	80039da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	2101      	movs	r1, #1
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	fa01 f303 	lsl.w	r3, r1, r3
 80036bc:	4013      	ands	r3, r2
 80036be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 8186 	beq.w	80039d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 0303 	and.w	r3, r3, #3
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d005      	beq.n	80036e0 <HAL_GPIO_Init+0x44>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d130      	bne.n	8003742 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	2203      	movs	r2, #3
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4313      	orrs	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003716:	2201      	movs	r2, #1
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43db      	mvns	r3, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4013      	ands	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	091b      	lsrs	r3, r3, #4
 800372c:	f003 0201 	and.w	r2, r3, #1
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4313      	orrs	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	2b03      	cmp	r3, #3
 800374c:	d017      	beq.n	800377e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	2203      	movs	r2, #3
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	43db      	mvns	r3, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4013      	ands	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4313      	orrs	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d123      	bne.n	80037d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	08da      	lsrs	r2, r3, #3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3208      	adds	r2, #8
 8003792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003796:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	220f      	movs	r2, #15
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43db      	mvns	r3, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4013      	ands	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	08da      	lsrs	r2, r3, #3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3208      	adds	r2, #8
 80037cc:	69b9      	ldr	r1, [r7, #24]
 80037ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	2203      	movs	r2, #3
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43db      	mvns	r3, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4013      	ands	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f003 0203 	and.w	r2, r3, #3
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 80e0 	beq.w	80039d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003814:	4b2f      	ldr	r3, [pc, #188]	; (80038d4 <HAL_GPIO_Init+0x238>)
 8003816:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800381a:	4a2e      	ldr	r2, [pc, #184]	; (80038d4 <HAL_GPIO_Init+0x238>)
 800381c:	f043 0302 	orr.w	r3, r3, #2
 8003820:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003824:	4b2b      	ldr	r3, [pc, #172]	; (80038d4 <HAL_GPIO_Init+0x238>)
 8003826:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003832:	4a29      	ldr	r2, [pc, #164]	; (80038d8 <HAL_GPIO_Init+0x23c>)
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	089b      	lsrs	r3, r3, #2
 8003838:	3302      	adds	r3, #2
 800383a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800383e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	220f      	movs	r2, #15
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4013      	ands	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a20      	ldr	r2, [pc, #128]	; (80038dc <HAL_GPIO_Init+0x240>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d052      	beq.n	8003904 <HAL_GPIO_Init+0x268>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a1f      	ldr	r2, [pc, #124]	; (80038e0 <HAL_GPIO_Init+0x244>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d031      	beq.n	80038ca <HAL_GPIO_Init+0x22e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a1e      	ldr	r2, [pc, #120]	; (80038e4 <HAL_GPIO_Init+0x248>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d02b      	beq.n	80038c6 <HAL_GPIO_Init+0x22a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a1d      	ldr	r2, [pc, #116]	; (80038e8 <HAL_GPIO_Init+0x24c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d025      	beq.n	80038c2 <HAL_GPIO_Init+0x226>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a1c      	ldr	r2, [pc, #112]	; (80038ec <HAL_GPIO_Init+0x250>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d01f      	beq.n	80038be <HAL_GPIO_Init+0x222>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a1b      	ldr	r2, [pc, #108]	; (80038f0 <HAL_GPIO_Init+0x254>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d019      	beq.n	80038ba <HAL_GPIO_Init+0x21e>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a1a      	ldr	r2, [pc, #104]	; (80038f4 <HAL_GPIO_Init+0x258>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d013      	beq.n	80038b6 <HAL_GPIO_Init+0x21a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a19      	ldr	r2, [pc, #100]	; (80038f8 <HAL_GPIO_Init+0x25c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d00d      	beq.n	80038b2 <HAL_GPIO_Init+0x216>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a18      	ldr	r2, [pc, #96]	; (80038fc <HAL_GPIO_Init+0x260>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d007      	beq.n	80038ae <HAL_GPIO_Init+0x212>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a17      	ldr	r2, [pc, #92]	; (8003900 <HAL_GPIO_Init+0x264>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d101      	bne.n	80038aa <HAL_GPIO_Init+0x20e>
 80038a6:	2309      	movs	r3, #9
 80038a8:	e02d      	b.n	8003906 <HAL_GPIO_Init+0x26a>
 80038aa:	230a      	movs	r3, #10
 80038ac:	e02b      	b.n	8003906 <HAL_GPIO_Init+0x26a>
 80038ae:	2308      	movs	r3, #8
 80038b0:	e029      	b.n	8003906 <HAL_GPIO_Init+0x26a>
 80038b2:	2307      	movs	r3, #7
 80038b4:	e027      	b.n	8003906 <HAL_GPIO_Init+0x26a>
 80038b6:	2306      	movs	r3, #6
 80038b8:	e025      	b.n	8003906 <HAL_GPIO_Init+0x26a>
 80038ba:	2305      	movs	r3, #5
 80038bc:	e023      	b.n	8003906 <HAL_GPIO_Init+0x26a>
 80038be:	2304      	movs	r3, #4
 80038c0:	e021      	b.n	8003906 <HAL_GPIO_Init+0x26a>
 80038c2:	2303      	movs	r3, #3
 80038c4:	e01f      	b.n	8003906 <HAL_GPIO_Init+0x26a>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e01d      	b.n	8003906 <HAL_GPIO_Init+0x26a>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e01b      	b.n	8003906 <HAL_GPIO_Init+0x26a>
 80038ce:	bf00      	nop
 80038d0:	58000080 	.word	0x58000080
 80038d4:	58024400 	.word	0x58024400
 80038d8:	58000400 	.word	0x58000400
 80038dc:	58020000 	.word	0x58020000
 80038e0:	58020400 	.word	0x58020400
 80038e4:	58020800 	.word	0x58020800
 80038e8:	58020c00 	.word	0x58020c00
 80038ec:	58021000 	.word	0x58021000
 80038f0:	58021400 	.word	0x58021400
 80038f4:	58021800 	.word	0x58021800
 80038f8:	58021c00 	.word	0x58021c00
 80038fc:	58022000 	.word	0x58022000
 8003900:	58022400 	.word	0x58022400
 8003904:	2300      	movs	r3, #0
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	f002 0203 	and.w	r2, r2, #3
 800390c:	0092      	lsls	r2, r2, #2
 800390e:	4093      	lsls	r3, r2
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003916:	4938      	ldr	r1, [pc, #224]	; (80039f8 <HAL_GPIO_Init+0x35c>)
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	089b      	lsrs	r3, r3, #2
 800391c:	3302      	adds	r3, #2
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	43db      	mvns	r3, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4013      	ands	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800394a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	43db      	mvns	r3, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003978:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	43db      	mvns	r3, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	43db      	mvns	r3, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4013      	ands	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	3301      	adds	r3, #1
 80039d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	fa22 f303 	lsr.w	r3, r2, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f47f ae63 	bne.w	80036b0 <HAL_GPIO_Init+0x14>
  }
}
 80039ea:	bf00      	nop
 80039ec:	bf00      	nop
 80039ee:	3724      	adds	r7, #36	; 0x24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	58000400 	.word	0x58000400

080039fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	807b      	strh	r3, [r7, #2]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a0c:	787b      	ldrb	r3, [r7, #1]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a12:	887a      	ldrh	r2, [r7, #2]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003a18:	e003      	b.n	8003a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003a1a:	887b      	ldrh	r3, [r7, #2]
 8003a1c:	041a      	lsls	r2, r3, #16
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	619a      	str	r2, [r3, #24]
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003a38:	4b19      	ldr	r3, [pc, #100]	; (8003aa0 <HAL_PWREx_ConfigSupply+0x70>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d00a      	beq.n	8003a5a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003a44:	4b16      	ldr	r3, [pc, #88]	; (8003aa0 <HAL_PWREx_ConfigSupply+0x70>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d001      	beq.n	8003a56 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e01f      	b.n	8003a96 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003a56:	2300      	movs	r3, #0
 8003a58:	e01d      	b.n	8003a96 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003a5a:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <HAL_PWREx_ConfigSupply+0x70>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f023 0207 	bic.w	r2, r3, #7
 8003a62:	490f      	ldr	r1, [pc, #60]	; (8003aa0 <HAL_PWREx_ConfigSupply+0x70>)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003a6a:	f7fe f9a9 	bl	8001dc0 <HAL_GetTick>
 8003a6e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a70:	e009      	b.n	8003a86 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a72:	f7fe f9a5 	bl	8001dc0 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a80:	d901      	bls.n	8003a86 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e007      	b.n	8003a96 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a86:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <HAL_PWREx_ConfigSupply+0x70>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a92:	d1ee      	bne.n	8003a72 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	58024800 	.word	0x58024800

08003aa4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08c      	sub	sp, #48	; 0x30
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d102      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	f000 bc48 	b.w	8004348 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 8088 	beq.w	8003bd6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ac6:	4b99      	ldr	r3, [pc, #612]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ad0:	4b96      	ldr	r3, [pc, #600]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad8:	2b10      	cmp	r3, #16
 8003ada:	d007      	beq.n	8003aec <HAL_RCC_OscConfig+0x48>
 8003adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ade:	2b18      	cmp	r3, #24
 8003ae0:	d111      	bne.n	8003b06 <HAL_RCC_OscConfig+0x62>
 8003ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d10c      	bne.n	8003b06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aec:	4b8f      	ldr	r3, [pc, #572]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d06d      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x130>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d169      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	f000 bc21 	b.w	8004348 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b0e:	d106      	bne.n	8003b1e <HAL_RCC_OscConfig+0x7a>
 8003b10:	4b86      	ldr	r3, [pc, #536]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a85      	ldr	r2, [pc, #532]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	e02e      	b.n	8003b7c <HAL_RCC_OscConfig+0xd8>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10c      	bne.n	8003b40 <HAL_RCC_OscConfig+0x9c>
 8003b26:	4b81      	ldr	r3, [pc, #516]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a80      	ldr	r2, [pc, #512]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003b2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	4b7e      	ldr	r3, [pc, #504]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a7d      	ldr	r2, [pc, #500]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003b38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	e01d      	b.n	8003b7c <HAL_RCC_OscConfig+0xd8>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b48:	d10c      	bne.n	8003b64 <HAL_RCC_OscConfig+0xc0>
 8003b4a:	4b78      	ldr	r3, [pc, #480]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a77      	ldr	r2, [pc, #476]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	4b75      	ldr	r3, [pc, #468]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a74      	ldr	r2, [pc, #464]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	e00b      	b.n	8003b7c <HAL_RCC_OscConfig+0xd8>
 8003b64:	4b71      	ldr	r3, [pc, #452]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a70      	ldr	r2, [pc, #448]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	4b6e      	ldr	r3, [pc, #440]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a6d      	ldr	r2, [pc, #436]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d013      	beq.n	8003bac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b84:	f7fe f91c 	bl	8001dc0 <HAL_GetTick>
 8003b88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b8c:	f7fe f918 	bl	8001dc0 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	; 0x64
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e3d4      	b.n	8004348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b9e:	4b63      	ldr	r3, [pc, #396]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCC_OscConfig+0xe8>
 8003baa:	e014      	b.n	8003bd6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bac:	f7fe f908 	bl	8001dc0 <HAL_GetTick>
 8003bb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb4:	f7fe f904 	bl	8001dc0 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b64      	cmp	r3, #100	; 0x64
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e3c0      	b.n	8004348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003bc6:	4b59      	ldr	r3, [pc, #356]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x110>
 8003bd2:	e000      	b.n	8003bd6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 80ca 	beq.w	8003d78 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003be4:	4b51      	ldr	r3, [pc, #324]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bee:	4b4f      	ldr	r3, [pc, #316]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d007      	beq.n	8003c0a <HAL_RCC_OscConfig+0x166>
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	2b18      	cmp	r3, #24
 8003bfe:	d156      	bne.n	8003cae <HAL_RCC_OscConfig+0x20a>
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d151      	bne.n	8003cae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c0a:	4b48      	ldr	r3, [pc, #288]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d005      	beq.n	8003c22 <HAL_RCC_OscConfig+0x17e>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e392      	b.n	8004348 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c22:	4b42      	ldr	r3, [pc, #264]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f023 0219 	bic.w	r2, r3, #25
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	493f      	ldr	r1, [pc, #252]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fe f8c4 	bl	8001dc0 <HAL_GetTick>
 8003c38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c3c:	f7fe f8c0 	bl	8001dc0 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e37c      	b.n	8004348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c4e:	4b37      	ldr	r3, [pc, #220]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c5a:	f7fe f8bd 	bl	8001dd8 <HAL_GetREVID>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d817      	bhi.n	8003c98 <HAL_RCC_OscConfig+0x1f4>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	2b40      	cmp	r3, #64	; 0x40
 8003c6e:	d108      	bne.n	8003c82 <HAL_RCC_OscConfig+0x1de>
 8003c70:	4b2e      	ldr	r3, [pc, #184]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003c78:	4a2c      	ldr	r2, [pc, #176]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c7e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c80:	e07a      	b.n	8003d78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c82:	4b2a      	ldr	r3, [pc, #168]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	031b      	lsls	r3, r3, #12
 8003c90:	4926      	ldr	r1, [pc, #152]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c96:	e06f      	b.n	8003d78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c98:	4b24      	ldr	r3, [pc, #144]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	061b      	lsls	r3, r3, #24
 8003ca6:	4921      	ldr	r1, [pc, #132]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cac:	e064      	b.n	8003d78 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d047      	beq.n	8003d46 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003cb6:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f023 0219 	bic.w	r2, r3, #25
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	491a      	ldr	r1, [pc, #104]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc8:	f7fe f87a 	bl	8001dc0 <HAL_GetTick>
 8003ccc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd0:	f7fe f876 	bl	8001dc0 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e332      	b.n	8004348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ce2:	4b12      	ldr	r3, [pc, #72]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cee:	f7fe f873 	bl	8001dd8 <HAL_GetREVID>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f241 0203 	movw	r2, #4099	; 0x1003
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d819      	bhi.n	8003d30 <HAL_RCC_OscConfig+0x28c>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	2b40      	cmp	r3, #64	; 0x40
 8003d02:	d108      	bne.n	8003d16 <HAL_RCC_OscConfig+0x272>
 8003d04:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003d0c:	4a07      	ldr	r2, [pc, #28]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d12:	6053      	str	r3, [r2, #4]
 8003d14:	e030      	b.n	8003d78 <HAL_RCC_OscConfig+0x2d4>
 8003d16:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	031b      	lsls	r3, r3, #12
 8003d24:	4901      	ldr	r1, [pc, #4]	; (8003d2c <HAL_RCC_OscConfig+0x288>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	604b      	str	r3, [r1, #4]
 8003d2a:	e025      	b.n	8003d78 <HAL_RCC_OscConfig+0x2d4>
 8003d2c:	58024400 	.word	0x58024400
 8003d30:	4b9a      	ldr	r3, [pc, #616]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	061b      	lsls	r3, r3, #24
 8003d3e:	4997      	ldr	r1, [pc, #604]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	604b      	str	r3, [r1, #4]
 8003d44:	e018      	b.n	8003d78 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d46:	4b95      	ldr	r3, [pc, #596]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a94      	ldr	r2, [pc, #592]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003d4c:	f023 0301 	bic.w	r3, r3, #1
 8003d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d52:	f7fe f835 	bl	8001dc0 <HAL_GetTick>
 8003d56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d5a:	f7fe f831 	bl	8001dc0 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e2ed      	b.n	8004348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d6c:	4b8b      	ldr	r3, [pc, #556]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1f0      	bne.n	8003d5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0310 	and.w	r3, r3, #16
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 80a9 	beq.w	8003ed8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d86:	4b85      	ldr	r3, [pc, #532]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d8e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d90:	4b82      	ldr	r3, [pc, #520]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d94:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d007      	beq.n	8003dac <HAL_RCC_OscConfig+0x308>
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	2b18      	cmp	r3, #24
 8003da0:	d13a      	bne.n	8003e18 <HAL_RCC_OscConfig+0x374>
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f003 0303 	and.w	r3, r3, #3
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d135      	bne.n	8003e18 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dac:	4b7b      	ldr	r3, [pc, #492]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x320>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	2b80      	cmp	r3, #128	; 0x80
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e2c1      	b.n	8004348 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dc4:	f7fe f808 	bl	8001dd8 <HAL_GetREVID>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f241 0203 	movw	r2, #4099	; 0x1003
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d817      	bhi.n	8003e02 <HAL_RCC_OscConfig+0x35e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	d108      	bne.n	8003dec <HAL_RCC_OscConfig+0x348>
 8003dda:	4b70      	ldr	r3, [pc, #448]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003de2:	4a6e      	ldr	r2, [pc, #440]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003de4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003de8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dea:	e075      	b.n	8003ed8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dec:	4b6b      	ldr	r3, [pc, #428]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	069b      	lsls	r3, r3, #26
 8003dfa:	4968      	ldr	r1, [pc, #416]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e00:	e06a      	b.n	8003ed8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e02:	4b66      	ldr	r3, [pc, #408]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	061b      	lsls	r3, r3, #24
 8003e10:	4962      	ldr	r1, [pc, #392]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e16:	e05f      	b.n	8003ed8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d042      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003e20:	4b5e      	ldr	r3, [pc, #376]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a5d      	ldr	r2, [pc, #372]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2c:	f7fd ffc8 	bl	8001dc0 <HAL_GetTick>
 8003e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003e34:	f7fd ffc4 	bl	8001dc0 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e280      	b.n	8004348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e46:	4b55      	ldr	r3, [pc, #340]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f0      	beq.n	8003e34 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e52:	f7fd ffc1 	bl	8001dd8 <HAL_GetREVID>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d817      	bhi.n	8003e90 <HAL_RCC_OscConfig+0x3ec>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d108      	bne.n	8003e7a <HAL_RCC_OscConfig+0x3d6>
 8003e68:	4b4c      	ldr	r3, [pc, #304]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003e70:	4a4a      	ldr	r2, [pc, #296]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003e72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e76:	6053      	str	r3, [r2, #4]
 8003e78:	e02e      	b.n	8003ed8 <HAL_RCC_OscConfig+0x434>
 8003e7a:	4b48      	ldr	r3, [pc, #288]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	069b      	lsls	r3, r3, #26
 8003e88:	4944      	ldr	r1, [pc, #272]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	604b      	str	r3, [r1, #4]
 8003e8e:	e023      	b.n	8003ed8 <HAL_RCC_OscConfig+0x434>
 8003e90:	4b42      	ldr	r3, [pc, #264]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	061b      	lsls	r3, r3, #24
 8003e9e:	493f      	ldr	r1, [pc, #252]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60cb      	str	r3, [r1, #12]
 8003ea4:	e018      	b.n	8003ed8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003ea6:	4b3d      	ldr	r3, [pc, #244]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a3c      	ldr	r2, [pc, #240]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003eac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb2:	f7fd ff85 	bl	8001dc0 <HAL_GetTick>
 8003eb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003eba:	f7fd ff81 	bl	8001dc0 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e23d      	b.n	8004348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ecc:	4b33      	ldr	r3, [pc, #204]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1f0      	bne.n	8003eba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d036      	beq.n	8003f52 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d019      	beq.n	8003f20 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eec:	4b2b      	ldr	r3, [pc, #172]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef0:	4a2a      	ldr	r2, [pc, #168]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003ef2:	f043 0301 	orr.w	r3, r3, #1
 8003ef6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef8:	f7fd ff62 	bl	8001dc0 <HAL_GetTick>
 8003efc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f00:	f7fd ff5e 	bl	8001dc0 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e21a      	b.n	8004348 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f12:	4b22      	ldr	r3, [pc, #136]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f0      	beq.n	8003f00 <HAL_RCC_OscConfig+0x45c>
 8003f1e:	e018      	b.n	8003f52 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f20:	4b1e      	ldr	r3, [pc, #120]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f24:	4a1d      	ldr	r2, [pc, #116]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003f26:	f023 0301 	bic.w	r3, r3, #1
 8003f2a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2c:	f7fd ff48 	bl	8001dc0 <HAL_GetTick>
 8003f30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f34:	f7fd ff44 	bl	8001dc0 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e200      	b.n	8004348 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f46:	4b15      	ldr	r3, [pc, #84]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0320 	and.w	r3, r3, #32
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d039      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d01c      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f66:	4b0d      	ldr	r3, [pc, #52]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a0c      	ldr	r2, [pc, #48]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003f6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f70:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f72:	f7fd ff25 	bl	8001dc0 <HAL_GetTick>
 8003f76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f7a:	f7fd ff21 	bl	8001dc0 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e1dd      	b.n	8004348 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f8c:	4b03      	ldr	r3, [pc, #12]	; (8003f9c <HAL_RCC_OscConfig+0x4f8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0f0      	beq.n	8003f7a <HAL_RCC_OscConfig+0x4d6>
 8003f98:	e01b      	b.n	8003fd2 <HAL_RCC_OscConfig+0x52e>
 8003f9a:	bf00      	nop
 8003f9c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fa0:	4b9b      	ldr	r3, [pc, #620]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a9a      	ldr	r2, [pc, #616]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 8003fa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003faa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003fac:	f7fd ff08 	bl	8001dc0 <HAL_GetTick>
 8003fb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fb4:	f7fd ff04 	bl	8001dc0 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e1c0      	b.n	8004348 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003fc6:	4b92      	ldr	r3, [pc, #584]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f0      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 8081 	beq.w	80040e2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fe0:	4b8c      	ldr	r3, [pc, #560]	; (8004214 <HAL_RCC_OscConfig+0x770>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a8b      	ldr	r2, [pc, #556]	; (8004214 <HAL_RCC_OscConfig+0x770>)
 8003fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fec:	f7fd fee8 	bl	8001dc0 <HAL_GetTick>
 8003ff0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff4:	f7fd fee4 	bl	8001dc0 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b64      	cmp	r3, #100	; 0x64
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e1a0      	b.n	8004348 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004006:	4b83      	ldr	r3, [pc, #524]	; (8004214 <HAL_RCC_OscConfig+0x770>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0f0      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d106      	bne.n	8004028 <HAL_RCC_OscConfig+0x584>
 800401a:	4b7d      	ldr	r3, [pc, #500]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	4a7c      	ldr	r2, [pc, #496]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	6713      	str	r3, [r2, #112]	; 0x70
 8004026:	e02d      	b.n	8004084 <HAL_RCC_OscConfig+0x5e0>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10c      	bne.n	800404a <HAL_RCC_OscConfig+0x5a6>
 8004030:	4b77      	ldr	r3, [pc, #476]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 8004032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004034:	4a76      	ldr	r2, [pc, #472]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 8004036:	f023 0301 	bic.w	r3, r3, #1
 800403a:	6713      	str	r3, [r2, #112]	; 0x70
 800403c:	4b74      	ldr	r3, [pc, #464]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 800403e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004040:	4a73      	ldr	r2, [pc, #460]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 8004042:	f023 0304 	bic.w	r3, r3, #4
 8004046:	6713      	str	r3, [r2, #112]	; 0x70
 8004048:	e01c      	b.n	8004084 <HAL_RCC_OscConfig+0x5e0>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	2b05      	cmp	r3, #5
 8004050:	d10c      	bne.n	800406c <HAL_RCC_OscConfig+0x5c8>
 8004052:	4b6f      	ldr	r3, [pc, #444]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004056:	4a6e      	ldr	r2, [pc, #440]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 8004058:	f043 0304 	orr.w	r3, r3, #4
 800405c:	6713      	str	r3, [r2, #112]	; 0x70
 800405e:	4b6c      	ldr	r3, [pc, #432]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 8004060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004062:	4a6b      	ldr	r2, [pc, #428]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 8004064:	f043 0301 	orr.w	r3, r3, #1
 8004068:	6713      	str	r3, [r2, #112]	; 0x70
 800406a:	e00b      	b.n	8004084 <HAL_RCC_OscConfig+0x5e0>
 800406c:	4b68      	ldr	r3, [pc, #416]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 800406e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004070:	4a67      	ldr	r2, [pc, #412]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 8004072:	f023 0301 	bic.w	r3, r3, #1
 8004076:	6713      	str	r3, [r2, #112]	; 0x70
 8004078:	4b65      	ldr	r3, [pc, #404]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 800407a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407c:	4a64      	ldr	r2, [pc, #400]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 800407e:	f023 0304 	bic.w	r3, r3, #4
 8004082:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d015      	beq.n	80040b8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408c:	f7fd fe98 	bl	8001dc0 <HAL_GetTick>
 8004090:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004092:	e00a      	b.n	80040aa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004094:	f7fd fe94 	bl	8001dc0 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e14e      	b.n	8004348 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040aa:	4b59      	ldr	r3, [pc, #356]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0ee      	beq.n	8004094 <HAL_RCC_OscConfig+0x5f0>
 80040b6:	e014      	b.n	80040e2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b8:	f7fd fe82 	bl	8001dc0 <HAL_GetTick>
 80040bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80040be:	e00a      	b.n	80040d6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c0:	f7fd fe7e 	bl	8001dc0 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e138      	b.n	8004348 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80040d6:	4b4e      	ldr	r3, [pc, #312]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 80040d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1ee      	bne.n	80040c0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 812d 	beq.w	8004346 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80040ec:	4b48      	ldr	r3, [pc, #288]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040f4:	2b18      	cmp	r3, #24
 80040f6:	f000 80bd 	beq.w	8004274 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	2b02      	cmp	r3, #2
 8004100:	f040 809e 	bne.w	8004240 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004104:	4b42      	ldr	r3, [pc, #264]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a41      	ldr	r2, [pc, #260]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 800410a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800410e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004110:	f7fd fe56 	bl	8001dc0 <HAL_GetTick>
 8004114:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004118:	f7fd fe52 	bl	8001dc0 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e10e      	b.n	8004348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800412a:	4b39      	ldr	r3, [pc, #228]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f0      	bne.n	8004118 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004136:	4b36      	ldr	r3, [pc, #216]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 8004138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800413a:	4b37      	ldr	r3, [pc, #220]	; (8004218 <HAL_RCC_OscConfig+0x774>)
 800413c:	4013      	ands	r3, r2
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004146:	0112      	lsls	r2, r2, #4
 8004148:	430a      	orrs	r2, r1
 800414a:	4931      	ldr	r1, [pc, #196]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 800414c:	4313      	orrs	r3, r2
 800414e:	628b      	str	r3, [r1, #40]	; 0x28
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004154:	3b01      	subs	r3, #1
 8004156:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415e:	3b01      	subs	r3, #1
 8004160:	025b      	lsls	r3, r3, #9
 8004162:	b29b      	uxth	r3, r3
 8004164:	431a      	orrs	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	3b01      	subs	r3, #1
 800416c:	041b      	lsls	r3, r3, #16
 800416e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004178:	3b01      	subs	r3, #1
 800417a:	061b      	lsls	r3, r3, #24
 800417c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004180:	4923      	ldr	r1, [pc, #140]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 8004182:	4313      	orrs	r3, r2
 8004184:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004186:	4b22      	ldr	r3, [pc, #136]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 8004188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418a:	4a21      	ldr	r2, [pc, #132]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 800418c:	f023 0301 	bic.w	r3, r3, #1
 8004190:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004192:	4b1f      	ldr	r3, [pc, #124]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 8004194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004196:	4b21      	ldr	r3, [pc, #132]	; (800421c <HAL_RCC_OscConfig+0x778>)
 8004198:	4013      	ands	r3, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800419e:	00d2      	lsls	r2, r2, #3
 80041a0:	491b      	ldr	r1, [pc, #108]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80041a6:	4b1a      	ldr	r3, [pc, #104]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	f023 020c 	bic.w	r2, r3, #12
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	4917      	ldr	r1, [pc, #92]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80041b8:	4b15      	ldr	r3, [pc, #84]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	f023 0202 	bic.w	r2, r3, #2
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c4:	4912      	ldr	r1, [pc, #72]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80041ca:	4b11      	ldr	r3, [pc, #68]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	4a10      	ldr	r2, [pc, #64]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 80041d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041d6:	4b0e      	ldr	r3, [pc, #56]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 80041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041da:	4a0d      	ldr	r2, [pc, #52]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 80041dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80041e2:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 80041e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e6:	4a0a      	ldr	r2, [pc, #40]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 80041e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80041ee:	4b08      	ldr	r3, [pc, #32]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	4a07      	ldr	r2, [pc, #28]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 80041f4:	f043 0301 	orr.w	r3, r3, #1
 80041f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041fa:	4b05      	ldr	r3, [pc, #20]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a04      	ldr	r2, [pc, #16]	; (8004210 <HAL_RCC_OscConfig+0x76c>)
 8004200:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004206:	f7fd fddb 	bl	8001dc0 <HAL_GetTick>
 800420a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800420c:	e011      	b.n	8004232 <HAL_RCC_OscConfig+0x78e>
 800420e:	bf00      	nop
 8004210:	58024400 	.word	0x58024400
 8004214:	58024800 	.word	0x58024800
 8004218:	fffffc0c 	.word	0xfffffc0c
 800421c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004220:	f7fd fdce 	bl	8001dc0 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e08a      	b.n	8004348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004232:	4b47      	ldr	r3, [pc, #284]	; (8004350 <HAL_RCC_OscConfig+0x8ac>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0f0      	beq.n	8004220 <HAL_RCC_OscConfig+0x77c>
 800423e:	e082      	b.n	8004346 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004240:	4b43      	ldr	r3, [pc, #268]	; (8004350 <HAL_RCC_OscConfig+0x8ac>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a42      	ldr	r2, [pc, #264]	; (8004350 <HAL_RCC_OscConfig+0x8ac>)
 8004246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800424a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fd fdb8 	bl	8001dc0 <HAL_GetTick>
 8004250:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004254:	f7fd fdb4 	bl	8001dc0 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e070      	b.n	8004348 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004266:	4b3a      	ldr	r3, [pc, #232]	; (8004350 <HAL_RCC_OscConfig+0x8ac>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f0      	bne.n	8004254 <HAL_RCC_OscConfig+0x7b0>
 8004272:	e068      	b.n	8004346 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004274:	4b36      	ldr	r3, [pc, #216]	; (8004350 <HAL_RCC_OscConfig+0x8ac>)
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800427a:	4b35      	ldr	r3, [pc, #212]	; (8004350 <HAL_RCC_OscConfig+0x8ac>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	2b01      	cmp	r3, #1
 8004286:	d031      	beq.n	80042ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	f003 0203 	and.w	r2, r3, #3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004292:	429a      	cmp	r2, r3
 8004294:	d12a      	bne.n	80042ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	091b      	lsrs	r3, r3, #4
 800429a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d122      	bne.n	80042ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d11a      	bne.n	80042ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	0a5b      	lsrs	r3, r3, #9
 80042ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d111      	bne.n	80042ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	0c1b      	lsrs	r3, r3, #16
 80042cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d108      	bne.n	80042ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	0e1b      	lsrs	r3, r3, #24
 80042de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d001      	beq.n	80042f0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e02b      	b.n	8004348 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80042f0:	4b17      	ldr	r3, [pc, #92]	; (8004350 <HAL_RCC_OscConfig+0x8ac>)
 80042f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f4:	08db      	lsrs	r3, r3, #3
 80042f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042fa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	429a      	cmp	r2, r3
 8004304:	d01f      	beq.n	8004346 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004306:	4b12      	ldr	r3, [pc, #72]	; (8004350 <HAL_RCC_OscConfig+0x8ac>)
 8004308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430a:	4a11      	ldr	r2, [pc, #68]	; (8004350 <HAL_RCC_OscConfig+0x8ac>)
 800430c:	f023 0301 	bic.w	r3, r3, #1
 8004310:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004312:	f7fd fd55 	bl	8001dc0 <HAL_GetTick>
 8004316:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004318:	bf00      	nop
 800431a:	f7fd fd51 	bl	8001dc0 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	4293      	cmp	r3, r2
 8004324:	d0f9      	beq.n	800431a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004326:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <HAL_RCC_OscConfig+0x8ac>)
 8004328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800432a:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <HAL_RCC_OscConfig+0x8b0>)
 800432c:	4013      	ands	r3, r2
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004332:	00d2      	lsls	r2, r2, #3
 8004334:	4906      	ldr	r1, [pc, #24]	; (8004350 <HAL_RCC_OscConfig+0x8ac>)
 8004336:	4313      	orrs	r3, r2
 8004338:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800433a:	4b05      	ldr	r3, [pc, #20]	; (8004350 <HAL_RCC_OscConfig+0x8ac>)
 800433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433e:	4a04      	ldr	r2, [pc, #16]	; (8004350 <HAL_RCC_OscConfig+0x8ac>)
 8004340:	f043 0301 	orr.w	r3, r3, #1
 8004344:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3730      	adds	r7, #48	; 0x30
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	58024400 	.word	0x58024400
 8004354:	ffff0007 	.word	0xffff0007

08004358 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e19c      	b.n	80046a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800436c:	4b8a      	ldr	r3, [pc, #552]	; (8004598 <HAL_RCC_ClockConfig+0x240>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d910      	bls.n	800439c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437a:	4b87      	ldr	r3, [pc, #540]	; (8004598 <HAL_RCC_ClockConfig+0x240>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f023 020f 	bic.w	r2, r3, #15
 8004382:	4985      	ldr	r1, [pc, #532]	; (8004598 <HAL_RCC_ClockConfig+0x240>)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	4313      	orrs	r3, r2
 8004388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800438a:	4b83      	ldr	r3, [pc, #524]	; (8004598 <HAL_RCC_ClockConfig+0x240>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d001      	beq.n	800439c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e184      	b.n	80046a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d010      	beq.n	80043ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	4b7b      	ldr	r3, [pc, #492]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d908      	bls.n	80043ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043b8:	4b78      	ldr	r3, [pc, #480]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	4975      	ldr	r1, [pc, #468]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d010      	beq.n	80043f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	4b70      	ldr	r3, [pc, #448]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d908      	bls.n	80043f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043e6:	4b6d      	ldr	r3, [pc, #436]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	496a      	ldr	r1, [pc, #424]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0310 	and.w	r3, r3, #16
 8004400:	2b00      	cmp	r3, #0
 8004402:	d010      	beq.n	8004426 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699a      	ldr	r2, [r3, #24]
 8004408:	4b64      	ldr	r3, [pc, #400]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004410:	429a      	cmp	r2, r3
 8004412:	d908      	bls.n	8004426 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004414:	4b61      	ldr	r3, [pc, #388]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	495e      	ldr	r1, [pc, #376]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 8004422:	4313      	orrs	r3, r2
 8004424:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0320 	and.w	r3, r3, #32
 800442e:	2b00      	cmp	r3, #0
 8004430:	d010      	beq.n	8004454 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69da      	ldr	r2, [r3, #28]
 8004436:	4b59      	ldr	r3, [pc, #356]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800443e:	429a      	cmp	r2, r3
 8004440:	d908      	bls.n	8004454 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004442:	4b56      	ldr	r3, [pc, #344]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	4953      	ldr	r1, [pc, #332]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 8004450:	4313      	orrs	r3, r2
 8004452:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d010      	beq.n	8004482 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	4b4d      	ldr	r3, [pc, #308]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	f003 030f 	and.w	r3, r3, #15
 800446c:	429a      	cmp	r2, r3
 800446e:	d908      	bls.n	8004482 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004470:	4b4a      	ldr	r3, [pc, #296]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	f023 020f 	bic.w	r2, r3, #15
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	4947      	ldr	r1, [pc, #284]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 800447e:	4313      	orrs	r3, r2
 8004480:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d055      	beq.n	800453a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800448e:	4b43      	ldr	r3, [pc, #268]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	4940      	ldr	r1, [pc, #256]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 800449c:	4313      	orrs	r3, r2
 800449e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d107      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044a8:	4b3c      	ldr	r3, [pc, #240]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d121      	bne.n	80044f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e0f6      	b.n	80046a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2b03      	cmp	r3, #3
 80044be:	d107      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044c0:	4b36      	ldr	r3, [pc, #216]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d115      	bne.n	80044f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e0ea      	b.n	80046a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d107      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044d8:	4b30      	ldr	r3, [pc, #192]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d109      	bne.n	80044f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0de      	b.n	80046a6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044e8:	4b2c      	ldr	r3, [pc, #176]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e0d6      	b.n	80046a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044f8:	4b28      	ldr	r3, [pc, #160]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	f023 0207 	bic.w	r2, r3, #7
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	4925      	ldr	r1, [pc, #148]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 8004506:	4313      	orrs	r3, r2
 8004508:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800450a:	f7fd fc59 	bl	8001dc0 <HAL_GetTick>
 800450e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004510:	e00a      	b.n	8004528 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004512:	f7fd fc55 	bl	8001dc0 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004520:	4293      	cmp	r3, r2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e0be      	b.n	80046a6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004528:	4b1c      	ldr	r3, [pc, #112]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	429a      	cmp	r2, r3
 8004538:	d1eb      	bne.n	8004512 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d010      	beq.n	8004568 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	4b14      	ldr	r3, [pc, #80]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	429a      	cmp	r2, r3
 8004554:	d208      	bcs.n	8004568 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004556:	4b11      	ldr	r3, [pc, #68]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	f023 020f 	bic.w	r2, r3, #15
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	490e      	ldr	r1, [pc, #56]	; (800459c <HAL_RCC_ClockConfig+0x244>)
 8004564:	4313      	orrs	r3, r2
 8004566:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004568:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_RCC_ClockConfig+0x240>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 030f 	and.w	r3, r3, #15
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d214      	bcs.n	80045a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004576:	4b08      	ldr	r3, [pc, #32]	; (8004598 <HAL_RCC_ClockConfig+0x240>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f023 020f 	bic.w	r2, r3, #15
 800457e:	4906      	ldr	r1, [pc, #24]	; (8004598 <HAL_RCC_ClockConfig+0x240>)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	4313      	orrs	r3, r2
 8004584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004586:	4b04      	ldr	r3, [pc, #16]	; (8004598 <HAL_RCC_ClockConfig+0x240>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d005      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e086      	b.n	80046a6 <HAL_RCC_ClockConfig+0x34e>
 8004598:	52002000 	.word	0x52002000
 800459c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d010      	beq.n	80045ce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691a      	ldr	r2, [r3, #16]
 80045b0:	4b3f      	ldr	r3, [pc, #252]	; (80046b0 <HAL_RCC_ClockConfig+0x358>)
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d208      	bcs.n	80045ce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045bc:	4b3c      	ldr	r3, [pc, #240]	; (80046b0 <HAL_RCC_ClockConfig+0x358>)
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	4939      	ldr	r1, [pc, #228]	; (80046b0 <HAL_RCC_ClockConfig+0x358>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d010      	beq.n	80045fc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	695a      	ldr	r2, [r3, #20]
 80045de:	4b34      	ldr	r3, [pc, #208]	; (80046b0 <HAL_RCC_ClockConfig+0x358>)
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d208      	bcs.n	80045fc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045ea:	4b31      	ldr	r3, [pc, #196]	; (80046b0 <HAL_RCC_ClockConfig+0x358>)
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	492e      	ldr	r1, [pc, #184]	; (80046b0 <HAL_RCC_ClockConfig+0x358>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	2b00      	cmp	r3, #0
 8004606:	d010      	beq.n	800462a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	699a      	ldr	r2, [r3, #24]
 800460c:	4b28      	ldr	r3, [pc, #160]	; (80046b0 <HAL_RCC_ClockConfig+0x358>)
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004614:	429a      	cmp	r2, r3
 8004616:	d208      	bcs.n	800462a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004618:	4b25      	ldr	r3, [pc, #148]	; (80046b0 <HAL_RCC_ClockConfig+0x358>)
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	4922      	ldr	r1, [pc, #136]	; (80046b0 <HAL_RCC_ClockConfig+0x358>)
 8004626:	4313      	orrs	r3, r2
 8004628:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0320 	and.w	r3, r3, #32
 8004632:	2b00      	cmp	r3, #0
 8004634:	d010      	beq.n	8004658 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69da      	ldr	r2, [r3, #28]
 800463a:	4b1d      	ldr	r3, [pc, #116]	; (80046b0 <HAL_RCC_ClockConfig+0x358>)
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004642:	429a      	cmp	r2, r3
 8004644:	d208      	bcs.n	8004658 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004646:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <HAL_RCC_ClockConfig+0x358>)
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	4917      	ldr	r1, [pc, #92]	; (80046b0 <HAL_RCC_ClockConfig+0x358>)
 8004654:	4313      	orrs	r3, r2
 8004656:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004658:	f000 f834 	bl	80046c4 <HAL_RCC_GetSysClockFreq>
 800465c:	4602      	mov	r2, r0
 800465e:	4b14      	ldr	r3, [pc, #80]	; (80046b0 <HAL_RCC_ClockConfig+0x358>)
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	0a1b      	lsrs	r3, r3, #8
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	4912      	ldr	r1, [pc, #72]	; (80046b4 <HAL_RCC_ClockConfig+0x35c>)
 800466a:	5ccb      	ldrb	r3, [r1, r3]
 800466c:	f003 031f 	and.w	r3, r3, #31
 8004670:	fa22 f303 	lsr.w	r3, r2, r3
 8004674:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004676:	4b0e      	ldr	r3, [pc, #56]	; (80046b0 <HAL_RCC_ClockConfig+0x358>)
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	4a0d      	ldr	r2, [pc, #52]	; (80046b4 <HAL_RCC_ClockConfig+0x35c>)
 8004680:	5cd3      	ldrb	r3, [r2, r3]
 8004682:	f003 031f 	and.w	r3, r3, #31
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	fa22 f303 	lsr.w	r3, r2, r3
 800468c:	4a0a      	ldr	r2, [pc, #40]	; (80046b8 <HAL_RCC_ClockConfig+0x360>)
 800468e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004690:	4a0a      	ldr	r2, [pc, #40]	; (80046bc <HAL_RCC_ClockConfig+0x364>)
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004696:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <HAL_RCC_ClockConfig+0x368>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f7fd fb46 	bl	8001d2c <HAL_InitTick>
 80046a0:	4603      	mov	r3, r0
 80046a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	58024400 	.word	0x58024400
 80046b4:	0800b420 	.word	0x0800b420
 80046b8:	24000004 	.word	0x24000004
 80046bc:	24000000 	.word	0x24000000
 80046c0:	24000008 	.word	0x24000008

080046c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b089      	sub	sp, #36	; 0x24
 80046c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046ca:	4bb3      	ldr	r3, [pc, #716]	; (8004998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046d2:	2b18      	cmp	r3, #24
 80046d4:	f200 8155 	bhi.w	8004982 <HAL_RCC_GetSysClockFreq+0x2be>
 80046d8:	a201      	add	r2, pc, #4	; (adr r2, 80046e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80046da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046de:	bf00      	nop
 80046e0:	08004745 	.word	0x08004745
 80046e4:	08004983 	.word	0x08004983
 80046e8:	08004983 	.word	0x08004983
 80046ec:	08004983 	.word	0x08004983
 80046f0:	08004983 	.word	0x08004983
 80046f4:	08004983 	.word	0x08004983
 80046f8:	08004983 	.word	0x08004983
 80046fc:	08004983 	.word	0x08004983
 8004700:	0800476b 	.word	0x0800476b
 8004704:	08004983 	.word	0x08004983
 8004708:	08004983 	.word	0x08004983
 800470c:	08004983 	.word	0x08004983
 8004710:	08004983 	.word	0x08004983
 8004714:	08004983 	.word	0x08004983
 8004718:	08004983 	.word	0x08004983
 800471c:	08004983 	.word	0x08004983
 8004720:	08004771 	.word	0x08004771
 8004724:	08004983 	.word	0x08004983
 8004728:	08004983 	.word	0x08004983
 800472c:	08004983 	.word	0x08004983
 8004730:	08004983 	.word	0x08004983
 8004734:	08004983 	.word	0x08004983
 8004738:	08004983 	.word	0x08004983
 800473c:	08004983 	.word	0x08004983
 8004740:	08004777 	.word	0x08004777
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004744:	4b94      	ldr	r3, [pc, #592]	; (8004998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0320 	and.w	r3, r3, #32
 800474c:	2b00      	cmp	r3, #0
 800474e:	d009      	beq.n	8004764 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004750:	4b91      	ldr	r3, [pc, #580]	; (8004998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	08db      	lsrs	r3, r3, #3
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	4a90      	ldr	r2, [pc, #576]	; (800499c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800475c:	fa22 f303 	lsr.w	r3, r2, r3
 8004760:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004762:	e111      	b.n	8004988 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004764:	4b8d      	ldr	r3, [pc, #564]	; (800499c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004766:	61bb      	str	r3, [r7, #24]
      break;
 8004768:	e10e      	b.n	8004988 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800476a:	4b8d      	ldr	r3, [pc, #564]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800476c:	61bb      	str	r3, [r7, #24]
      break;
 800476e:	e10b      	b.n	8004988 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004770:	4b8c      	ldr	r3, [pc, #560]	; (80049a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004772:	61bb      	str	r3, [r7, #24]
      break;
 8004774:	e108      	b.n	8004988 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004776:	4b88      	ldr	r3, [pc, #544]	; (8004998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004780:	4b85      	ldr	r3, [pc, #532]	; (8004998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004784:	091b      	lsrs	r3, r3, #4
 8004786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800478a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800478c:	4b82      	ldr	r3, [pc, #520]	; (8004998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004796:	4b80      	ldr	r3, [pc, #512]	; (8004998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479a:	08db      	lsrs	r3, r3, #3
 800479c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	fb02 f303 	mul.w	r3, r2, r3
 80047a6:	ee07 3a90 	vmov	s15, r3
 80047aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 80e1 	beq.w	800497c <HAL_RCC_GetSysClockFreq+0x2b8>
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	f000 8083 	beq.w	80048c8 <HAL_RCC_GetSysClockFreq+0x204>
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	f200 80a1 	bhi.w	800490c <HAL_RCC_GetSysClockFreq+0x248>
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <HAL_RCC_GetSysClockFreq+0x114>
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d056      	beq.n	8004884 <HAL_RCC_GetSysClockFreq+0x1c0>
 80047d6:	e099      	b.n	800490c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047d8:	4b6f      	ldr	r3, [pc, #444]	; (8004998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0320 	and.w	r3, r3, #32
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d02d      	beq.n	8004840 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047e4:	4b6c      	ldr	r3, [pc, #432]	; (8004998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	08db      	lsrs	r3, r3, #3
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	4a6b      	ldr	r2, [pc, #428]	; (800499c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
 80047f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	ee07 3a90 	vmov	s15, r3
 80047fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800480e:	4b62      	ldr	r3, [pc, #392]	; (8004998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004816:	ee07 3a90 	vmov	s15, r3
 800481a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800481e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004822:	eddf 5a61 	vldr	s11, [pc, #388]	; 80049a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800482a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800482e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800483a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800483e:	e087      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	ee07 3a90 	vmov	s15, r3
 8004846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80049ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800484e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004852:	4b51      	ldr	r3, [pc, #324]	; (8004998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004862:	ed97 6a02 	vldr	s12, [r7, #8]
 8004866:	eddf 5a50 	vldr	s11, [pc, #320]	; 80049a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800486a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800486e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800487a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800487e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004882:	e065      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	ee07 3a90 	vmov	s15, r3
 800488a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80049b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004896:	4b40      	ldr	r3, [pc, #256]	; (8004998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80048aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80049a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80048c6:	e043      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80049b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80048d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048da:	4b2f      	ldr	r3, [pc, #188]	; (8004998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80048ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80049a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004906:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800490a:	e021      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004916:	eddf 6a26 	vldr	s13, [pc, #152]	; 80049b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800491a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800491e:	4b1e      	ldr	r3, [pc, #120]	; (8004998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800492e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004932:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80049a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800493a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800493e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800494a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800494e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004950:	4b11      	ldr	r3, [pc, #68]	; (8004998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004954:	0a5b      	lsrs	r3, r3, #9
 8004956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800495a:	3301      	adds	r3, #1
 800495c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	ee07 3a90 	vmov	s15, r3
 8004964:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004968:	edd7 6a07 	vldr	s13, [r7, #28]
 800496c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004974:	ee17 3a90 	vmov	r3, s15
 8004978:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800497a:	e005      	b.n	8004988 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800497c:	2300      	movs	r3, #0
 800497e:	61bb      	str	r3, [r7, #24]
      break;
 8004980:	e002      	b.n	8004988 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004982:	4b07      	ldr	r3, [pc, #28]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004984:	61bb      	str	r3, [r7, #24]
      break;
 8004986:	bf00      	nop
  }

  return sysclockfreq;
 8004988:	69bb      	ldr	r3, [r7, #24]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3724      	adds	r7, #36	; 0x24
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	58024400 	.word	0x58024400
 800499c:	03d09000 	.word	0x03d09000
 80049a0:	003d0900 	.word	0x003d0900
 80049a4:	017d7840 	.word	0x017d7840
 80049a8:	46000000 	.word	0x46000000
 80049ac:	4c742400 	.word	0x4c742400
 80049b0:	4a742400 	.word	0x4a742400
 80049b4:	4bbebc20 	.word	0x4bbebc20

080049b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80049be:	f7ff fe81 	bl	80046c4 <HAL_RCC_GetSysClockFreq>
 80049c2:	4602      	mov	r2, r0
 80049c4:	4b10      	ldr	r3, [pc, #64]	; (8004a08 <HAL_RCC_GetHCLKFreq+0x50>)
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	0a1b      	lsrs	r3, r3, #8
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	490f      	ldr	r1, [pc, #60]	; (8004a0c <HAL_RCC_GetHCLKFreq+0x54>)
 80049d0:	5ccb      	ldrb	r3, [r1, r3]
 80049d2:	f003 031f 	and.w	r3, r3, #31
 80049d6:	fa22 f303 	lsr.w	r3, r2, r3
 80049da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049dc:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <HAL_RCC_GetHCLKFreq+0x50>)
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	f003 030f 	and.w	r3, r3, #15
 80049e4:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <HAL_RCC_GetHCLKFreq+0x54>)
 80049e6:	5cd3      	ldrb	r3, [r2, r3]
 80049e8:	f003 031f 	and.w	r3, r3, #31
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	fa22 f303 	lsr.w	r3, r2, r3
 80049f2:	4a07      	ldr	r2, [pc, #28]	; (8004a10 <HAL_RCC_GetHCLKFreq+0x58>)
 80049f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049f6:	4a07      	ldr	r2, [pc, #28]	; (8004a14 <HAL_RCC_GetHCLKFreq+0x5c>)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80049fc:	4b04      	ldr	r3, [pc, #16]	; (8004a10 <HAL_RCC_GetHCLKFreq+0x58>)
 80049fe:	681b      	ldr	r3, [r3, #0]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	58024400 	.word	0x58024400
 8004a0c:	0800b420 	.word	0x0800b420
 8004a10:	24000004 	.word	0x24000004
 8004a14:	24000000 	.word	0x24000000

08004a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004a1c:	f7ff ffcc 	bl	80049b8 <HAL_RCC_GetHCLKFreq>
 8004a20:	4602      	mov	r2, r0
 8004a22:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	091b      	lsrs	r3, r3, #4
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	4904      	ldr	r1, [pc, #16]	; (8004a40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a2e:	5ccb      	ldrb	r3, [r1, r3]
 8004a30:	f003 031f 	and.w	r3, r3, #31
 8004a34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	58024400 	.word	0x58024400
 8004a40:	0800b420 	.word	0x0800b420

08004a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004a48:	f7ff ffb6 	bl	80049b8 <HAL_RCC_GetHCLKFreq>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	4904      	ldr	r1, [pc, #16]	; (8004a6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a5a:	5ccb      	ldrb	r3, [r1, r3]
 8004a5c:	f003 031f 	and.w	r3, r3, #31
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	58024400 	.word	0x58024400
 8004a6c:	0800b420 	.word	0x0800b420

08004a70 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a74:	b0ca      	sub	sp, #296	; 0x128
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a82:	2300      	movs	r3, #0
 8004a84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a90:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004a94:	2500      	movs	r5, #0
 8004a96:	ea54 0305 	orrs.w	r3, r4, r5
 8004a9a:	d049      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aa2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004aa6:	d02f      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004aa8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004aac:	d828      	bhi.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004aae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ab2:	d01a      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004ab4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ab8:	d822      	bhi.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004abe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ac2:	d007      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ac4:	e01c      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ac6:	4bb8      	ldr	r3, [pc, #736]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	4ab7      	ldr	r2, [pc, #732]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004ad2:	e01a      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ad8:	3308      	adds	r3, #8
 8004ada:	2102      	movs	r1, #2
 8004adc:	4618      	mov	r0, r3
 8004ade:	f002 fb61 	bl	80071a4 <RCCEx_PLL2_Config>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004ae8:	e00f      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aee:	3328      	adds	r3, #40	; 0x28
 8004af0:	2102      	movs	r1, #2
 8004af2:	4618      	mov	r0, r3
 8004af4:	f002 fc08 	bl	8007308 <RCCEx_PLL3_Config>
 8004af8:	4603      	mov	r3, r0
 8004afa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004afe:	e004      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b06:	e000      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004b08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10a      	bne.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004b12:	4ba5      	ldr	r3, [pc, #660]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b16:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b20:	4aa1      	ldr	r2, [pc, #644]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b22:	430b      	orrs	r3, r1
 8004b24:	6513      	str	r3, [r2, #80]	; 0x50
 8004b26:	e003      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b38:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004b3c:	f04f 0900 	mov.w	r9, #0
 8004b40:	ea58 0309 	orrs.w	r3, r8, r9
 8004b44:	d047      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d82a      	bhi.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004b50:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b56:	bf00      	nop
 8004b58:	08004b6d 	.word	0x08004b6d
 8004b5c:	08004b7b 	.word	0x08004b7b
 8004b60:	08004b91 	.word	0x08004b91
 8004b64:	08004baf 	.word	0x08004baf
 8004b68:	08004baf 	.word	0x08004baf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b6c:	4b8e      	ldr	r3, [pc, #568]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	4a8d      	ldr	r2, [pc, #564]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b78:	e01a      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b7e:	3308      	adds	r3, #8
 8004b80:	2100      	movs	r1, #0
 8004b82:	4618      	mov	r0, r3
 8004b84:	f002 fb0e 	bl	80071a4 <RCCEx_PLL2_Config>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b8e:	e00f      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b94:	3328      	adds	r3, #40	; 0x28
 8004b96:	2100      	movs	r1, #0
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f002 fbb5 	bl	8007308 <RCCEx_PLL3_Config>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ba4:	e004      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004bac:	e000      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004bae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10a      	bne.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bb8:	4b7b      	ldr	r3, [pc, #492]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bbc:	f023 0107 	bic.w	r1, r3, #7
 8004bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc6:	4a78      	ldr	r2, [pc, #480]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	6513      	str	r3, [r2, #80]	; 0x50
 8004bcc:	e003      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bde:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004be2:	f04f 0b00 	mov.w	fp, #0
 8004be6:	ea5a 030b 	orrs.w	r3, sl, fp
 8004bea:	d04c      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bf6:	d030      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bfc:	d829      	bhi.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004bfe:	2bc0      	cmp	r3, #192	; 0xc0
 8004c00:	d02d      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004c02:	2bc0      	cmp	r3, #192	; 0xc0
 8004c04:	d825      	bhi.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004c06:	2b80      	cmp	r3, #128	; 0x80
 8004c08:	d018      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004c0a:	2b80      	cmp	r3, #128	; 0x80
 8004c0c:	d821      	bhi.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004c12:	2b40      	cmp	r3, #64	; 0x40
 8004c14:	d007      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004c16:	e01c      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c18:	4b63      	ldr	r3, [pc, #396]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	4a62      	ldr	r2, [pc, #392]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004c24:	e01c      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c2a:	3308      	adds	r3, #8
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f002 fab8 	bl	80071a4 <RCCEx_PLL2_Config>
 8004c34:	4603      	mov	r3, r0
 8004c36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004c3a:	e011      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c40:	3328      	adds	r3, #40	; 0x28
 8004c42:	2100      	movs	r1, #0
 8004c44:	4618      	mov	r0, r3
 8004c46:	f002 fb5f 	bl	8007308 <RCCEx_PLL3_Config>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004c50:	e006      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c58:	e002      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004c5a:	bf00      	nop
 8004c5c:	e000      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004c5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10a      	bne.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004c68:	4b4f      	ldr	r3, [pc, #316]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c6c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c76:	4a4c      	ldr	r2, [pc, #304]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c78:	430b      	orrs	r3, r1
 8004c7a:	6513      	str	r3, [r2, #80]	; 0x50
 8004c7c:	e003      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004c92:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004c96:	2300      	movs	r3, #0
 8004c98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004c9c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	d053      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004caa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004cae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cb2:	d035      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004cb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cb8:	d82e      	bhi.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004cba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004cbe:	d031      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004cc0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004cc4:	d828      	bhi.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004cc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cca:	d01a      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004ccc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cd0:	d822      	bhi.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004cd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cda:	d007      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004cdc:	e01c      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cde:	4b32      	ldr	r3, [pc, #200]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	4a31      	ldr	r2, [pc, #196]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ce8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cea:	e01c      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cf0:	3308      	adds	r3, #8
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f002 fa55 	bl	80071a4 <RCCEx_PLL2_Config>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004d00:	e011      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d06:	3328      	adds	r3, #40	; 0x28
 8004d08:	2100      	movs	r1, #0
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f002 fafc 	bl	8007308 <RCCEx_PLL3_Config>
 8004d10:	4603      	mov	r3, r0
 8004d12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d16:	e006      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d1e:	e002      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004d20:	bf00      	nop
 8004d22:	e000      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10b      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004d2e:	4b1e      	ldr	r3, [pc, #120]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d32:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d3e:	4a1a      	ldr	r2, [pc, #104]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d40:	430b      	orrs	r3, r1
 8004d42:	6593      	str	r3, [r2, #88]	; 0x58
 8004d44:	e003      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d56:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004d5a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d64:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	d056      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d7a:	d038      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004d7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d80:	d831      	bhi.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d86:	d034      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004d88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d8c:	d82b      	bhi.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d92:	d01d      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004d94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d98:	d825      	bhi.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d006      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004d9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004da2:	d00a      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004da4:	e01f      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004da6:	bf00      	nop
 8004da8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dac:	4ba2      	ldr	r3, [pc, #648]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db0:	4aa1      	ldr	r2, [pc, #644]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004db2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004db6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004db8:	e01c      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dbe:	3308      	adds	r3, #8
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f002 f9ee 	bl	80071a4 <RCCEx_PLL2_Config>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004dce:	e011      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dd4:	3328      	adds	r3, #40	; 0x28
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f002 fa95 	bl	8007308 <RCCEx_PLL3_Config>
 8004dde:	4603      	mov	r3, r0
 8004de0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004de4:	e006      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004dec:	e002      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004dee:	bf00      	nop
 8004df0:	e000      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004df4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10b      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004dfc:	4b8e      	ldr	r3, [pc, #568]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e00:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004e0c:	4a8a      	ldr	r2, [pc, #552]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e0e:	430b      	orrs	r3, r1
 8004e10:	6593      	str	r3, [r2, #88]	; 0x58
 8004e12:	e003      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e24:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004e28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e32:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004e36:	460b      	mov	r3, r1
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	d03a      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e42:	2b30      	cmp	r3, #48	; 0x30
 8004e44:	d01f      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004e46:	2b30      	cmp	r3, #48	; 0x30
 8004e48:	d819      	bhi.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004e4a:	2b20      	cmp	r3, #32
 8004e4c:	d00c      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004e4e:	2b20      	cmp	r3, #32
 8004e50:	d815      	bhi.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d019      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004e56:	2b10      	cmp	r3, #16
 8004e58:	d111      	bne.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e5a:	4b77      	ldr	r3, [pc, #476]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5e:	4a76      	ldr	r2, [pc, #472]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004e66:	e011      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e6c:	3308      	adds	r3, #8
 8004e6e:	2102      	movs	r1, #2
 8004e70:	4618      	mov	r0, r3
 8004e72:	f002 f997 	bl	80071a4 <RCCEx_PLL2_Config>
 8004e76:	4603      	mov	r3, r0
 8004e78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004e7c:	e006      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e84:	e002      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004e86:	bf00      	nop
 8004e88:	e000      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004e8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10a      	bne.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004e94:	4b68      	ldr	r3, [pc, #416]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e98:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea2:	4a65      	ldr	r2, [pc, #404]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ea4:	430b      	orrs	r3, r1
 8004ea6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ea8:	e003      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004eae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eba:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004ebe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004ec8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	d051      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004edc:	d035      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004ede:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ee2:	d82e      	bhi.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ee4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ee8:	d031      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004eea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004eee:	d828      	bhi.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ef4:	d01a      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004efa:	d822      	bhi.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f04:	d007      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004f06:	e01c      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f08:	4b4b      	ldr	r3, [pc, #300]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	4a4a      	ldr	r2, [pc, #296]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f14:	e01c      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f1a:	3308      	adds	r3, #8
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f002 f940 	bl	80071a4 <RCCEx_PLL2_Config>
 8004f24:	4603      	mov	r3, r0
 8004f26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f2a:	e011      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f30:	3328      	adds	r3, #40	; 0x28
 8004f32:	2100      	movs	r1, #0
 8004f34:	4618      	mov	r0, r3
 8004f36:	f002 f9e7 	bl	8007308 <RCCEx_PLL3_Config>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f40:	e006      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f48:	e002      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004f4a:	bf00      	nop
 8004f4c:	e000      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004f4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10a      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004f58:	4b37      	ldr	r3, [pc, #220]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f5c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f66:	4a34      	ldr	r2, [pc, #208]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f68:	430b      	orrs	r3, r1
 8004f6a:	6513      	str	r3, [r2, #80]	; 0x50
 8004f6c:	e003      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004f82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f86:	2300      	movs	r3, #0
 8004f88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f8c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004f90:	460b      	mov	r3, r1
 8004f92:	4313      	orrs	r3, r2
 8004f94:	d056      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fa0:	d033      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004fa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fa6:	d82c      	bhi.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004fa8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fac:	d02f      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004fae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fb2:	d826      	bhi.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004fb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004fb8:	d02b      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004fba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004fbe:	d820      	bhi.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004fc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fc4:	d012      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004fc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fca:	d81a      	bhi.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d022      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd4:	d115      	bne.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fda:	3308      	adds	r3, #8
 8004fdc:	2101      	movs	r1, #1
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f002 f8e0 	bl	80071a4 <RCCEx_PLL2_Config>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004fea:	e015      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ff0:	3328      	adds	r3, #40	; 0x28
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f002 f987 	bl	8007308 <RCCEx_PLL3_Config>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005000:	e00a      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005008:	e006      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800500a:	bf00      	nop
 800500c:	e004      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800500e:	bf00      	nop
 8005010:	e002      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005012:	bf00      	nop
 8005014:	e000      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005016:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005018:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10d      	bne.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005020:	4b05      	ldr	r3, [pc, #20]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005024:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800502c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800502e:	4a02      	ldr	r2, [pc, #8]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005030:	430b      	orrs	r3, r1
 8005032:	6513      	str	r3, [r2, #80]	; 0x50
 8005034:	e006      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005036:	bf00      	nop
 8005038:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800503c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005040:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005050:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005054:	2300      	movs	r3, #0
 8005056:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800505a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800505e:	460b      	mov	r3, r1
 8005060:	4313      	orrs	r3, r2
 8005062:	d055      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005068:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800506c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005070:	d033      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005072:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005076:	d82c      	bhi.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800507c:	d02f      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800507e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005082:	d826      	bhi.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005084:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005088:	d02b      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800508a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800508e:	d820      	bhi.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005094:	d012      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005096:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800509a:	d81a      	bhi.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800509c:	2b00      	cmp	r3, #0
 800509e:	d022      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80050a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050a4:	d115      	bne.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050aa:	3308      	adds	r3, #8
 80050ac:	2101      	movs	r1, #1
 80050ae:	4618      	mov	r0, r3
 80050b0:	f002 f878 	bl	80071a4 <RCCEx_PLL2_Config>
 80050b4:	4603      	mov	r3, r0
 80050b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80050ba:	e015      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050c0:	3328      	adds	r3, #40	; 0x28
 80050c2:	2101      	movs	r1, #1
 80050c4:	4618      	mov	r0, r3
 80050c6:	f002 f91f 	bl	8007308 <RCCEx_PLL3_Config>
 80050ca:	4603      	mov	r3, r0
 80050cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80050d0:	e00a      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050d8:	e006      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050da:	bf00      	nop
 80050dc:	e004      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050de:	bf00      	nop
 80050e0:	e002      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050e2:	bf00      	nop
 80050e4:	e000      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10b      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80050f0:	4ba3      	ldr	r3, [pc, #652]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80050f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005100:	4a9f      	ldr	r2, [pc, #636]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005102:	430b      	orrs	r3, r1
 8005104:	6593      	str	r3, [r2, #88]	; 0x58
 8005106:	e003      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005108:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800510c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005118:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800511c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005120:	2300      	movs	r3, #0
 8005122:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005126:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800512a:	460b      	mov	r3, r1
 800512c:	4313      	orrs	r3, r2
 800512e:	d037      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800513a:	d00e      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800513c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005140:	d816      	bhi.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005142:	2b00      	cmp	r3, #0
 8005144:	d018      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005146:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800514a:	d111      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800514c:	4b8c      	ldr	r3, [pc, #560]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800514e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005150:	4a8b      	ldr	r2, [pc, #556]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005156:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005158:	e00f      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800515a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800515e:	3308      	adds	r3, #8
 8005160:	2101      	movs	r1, #1
 8005162:	4618      	mov	r0, r3
 8005164:	f002 f81e 	bl	80071a4 <RCCEx_PLL2_Config>
 8005168:	4603      	mov	r3, r0
 800516a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800516e:	e004      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005176:	e000      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800517a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10a      	bne.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005182:	4b7f      	ldr	r3, [pc, #508]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005186:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800518a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800518e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005190:	4a7b      	ldr	r2, [pc, #492]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005192:	430b      	orrs	r3, r1
 8005194:	6513      	str	r3, [r2, #80]	; 0x50
 8005196:	e003      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005198:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800519c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80051a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80051ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051b0:	2300      	movs	r3, #0
 80051b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80051b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80051ba:	460b      	mov	r3, r1
 80051bc:	4313      	orrs	r3, r2
 80051be:	d039      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80051c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d81c      	bhi.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80051ca:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80051cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d0:	0800520d 	.word	0x0800520d
 80051d4:	080051e1 	.word	0x080051e1
 80051d8:	080051ef 	.word	0x080051ef
 80051dc:	0800520d 	.word	0x0800520d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051e0:	4b67      	ldr	r3, [pc, #412]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e4:	4a66      	ldr	r2, [pc, #408]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80051ec:	e00f      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f2:	3308      	adds	r3, #8
 80051f4:	2102      	movs	r1, #2
 80051f6:	4618      	mov	r0, r3
 80051f8:	f001 ffd4 	bl	80071a4 <RCCEx_PLL2_Config>
 80051fc:	4603      	mov	r3, r0
 80051fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005202:	e004      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800520a:	e000      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800520c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800520e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10a      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005216:	4b5a      	ldr	r3, [pc, #360]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800521a:	f023 0103 	bic.w	r1, r3, #3
 800521e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005224:	4a56      	ldr	r2, [pc, #344]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005226:	430b      	orrs	r3, r1
 8005228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800522a:	e003      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800522c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005230:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005240:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005244:	2300      	movs	r3, #0
 8005246:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800524a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800524e:	460b      	mov	r3, r1
 8005250:	4313      	orrs	r3, r2
 8005252:	f000 809f 	beq.w	8005394 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005256:	4b4b      	ldr	r3, [pc, #300]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a4a      	ldr	r2, [pc, #296]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800525c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005260:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005262:	f7fc fdad 	bl	8001dc0 <HAL_GetTick>
 8005266:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800526a:	e00b      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800526c:	f7fc fda8 	bl	8001dc0 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b64      	cmp	r3, #100	; 0x64
 800527a:	d903      	bls.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005282:	e005      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005284:	4b3f      	ldr	r3, [pc, #252]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0ed      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005290:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005294:	2b00      	cmp	r3, #0
 8005296:	d179      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005298:	4b39      	ldr	r3, [pc, #228]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800529a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800529c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80052a4:	4053      	eors	r3, r2
 80052a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d015      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052ae:	4b34      	ldr	r3, [pc, #208]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052ba:	4b31      	ldr	r3, [pc, #196]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052be:	4a30      	ldr	r2, [pc, #192]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052c4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052c6:	4b2e      	ldr	r3, [pc, #184]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ca:	4a2d      	ldr	r2, [pc, #180]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052d0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80052d2:	4a2b      	ldr	r2, [pc, #172]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052d8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80052da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80052e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052e6:	d118      	bne.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e8:	f7fc fd6a 	bl	8001dc0 <HAL_GetTick>
 80052ec:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052f0:	e00d      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052f2:	f7fc fd65 	bl	8001dc0 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80052fc:	1ad2      	subs	r2, r2, r3
 80052fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8005302:	429a      	cmp	r2, r3
 8005304:	d903      	bls.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800530c:	e005      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800530e:	4b1c      	ldr	r3, [pc, #112]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d0eb      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800531a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800531e:	2b00      	cmp	r3, #0
 8005320:	d129      	bne.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005326:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800532a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800532e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005332:	d10e      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005334:	4b12      	ldr	r3, [pc, #72]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800533c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005340:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005344:	091a      	lsrs	r2, r3, #4
 8005346:	4b10      	ldr	r3, [pc, #64]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005348:	4013      	ands	r3, r2
 800534a:	4a0d      	ldr	r2, [pc, #52]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800534c:	430b      	orrs	r3, r1
 800534e:	6113      	str	r3, [r2, #16]
 8005350:	e005      	b.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005352:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	4a0a      	ldr	r2, [pc, #40]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005358:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800535c:	6113      	str	r3, [r2, #16]
 800535e:	4b08      	ldr	r3, [pc, #32]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005360:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005366:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800536a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800536e:	4a04      	ldr	r2, [pc, #16]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005370:	430b      	orrs	r3, r1
 8005372:	6713      	str	r3, [r2, #112]	; 0x70
 8005374:	e00e      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005376:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800537a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800537e:	e009      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005380:	58024400 	.word	0x58024400
 8005384:	58024800 	.word	0x58024800
 8005388:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800538c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005390:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005394:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539c:	f002 0301 	and.w	r3, r2, #1
 80053a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053a4:	2300      	movs	r3, #0
 80053a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f000 8089 	beq.w	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80053b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053bc:	2b28      	cmp	r3, #40	; 0x28
 80053be:	d86b      	bhi.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80053c0:	a201      	add	r2, pc, #4	; (adr r2, 80053c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80053c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c6:	bf00      	nop
 80053c8:	080054a1 	.word	0x080054a1
 80053cc:	08005499 	.word	0x08005499
 80053d0:	08005499 	.word	0x08005499
 80053d4:	08005499 	.word	0x08005499
 80053d8:	08005499 	.word	0x08005499
 80053dc:	08005499 	.word	0x08005499
 80053e0:	08005499 	.word	0x08005499
 80053e4:	08005499 	.word	0x08005499
 80053e8:	0800546d 	.word	0x0800546d
 80053ec:	08005499 	.word	0x08005499
 80053f0:	08005499 	.word	0x08005499
 80053f4:	08005499 	.word	0x08005499
 80053f8:	08005499 	.word	0x08005499
 80053fc:	08005499 	.word	0x08005499
 8005400:	08005499 	.word	0x08005499
 8005404:	08005499 	.word	0x08005499
 8005408:	08005483 	.word	0x08005483
 800540c:	08005499 	.word	0x08005499
 8005410:	08005499 	.word	0x08005499
 8005414:	08005499 	.word	0x08005499
 8005418:	08005499 	.word	0x08005499
 800541c:	08005499 	.word	0x08005499
 8005420:	08005499 	.word	0x08005499
 8005424:	08005499 	.word	0x08005499
 8005428:	080054a1 	.word	0x080054a1
 800542c:	08005499 	.word	0x08005499
 8005430:	08005499 	.word	0x08005499
 8005434:	08005499 	.word	0x08005499
 8005438:	08005499 	.word	0x08005499
 800543c:	08005499 	.word	0x08005499
 8005440:	08005499 	.word	0x08005499
 8005444:	08005499 	.word	0x08005499
 8005448:	080054a1 	.word	0x080054a1
 800544c:	08005499 	.word	0x08005499
 8005450:	08005499 	.word	0x08005499
 8005454:	08005499 	.word	0x08005499
 8005458:	08005499 	.word	0x08005499
 800545c:	08005499 	.word	0x08005499
 8005460:	08005499 	.word	0x08005499
 8005464:	08005499 	.word	0x08005499
 8005468:	080054a1 	.word	0x080054a1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800546c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005470:	3308      	adds	r3, #8
 8005472:	2101      	movs	r1, #1
 8005474:	4618      	mov	r0, r3
 8005476:	f001 fe95 	bl	80071a4 <RCCEx_PLL2_Config>
 800547a:	4603      	mov	r3, r0
 800547c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005480:	e00f      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005486:	3328      	adds	r3, #40	; 0x28
 8005488:	2101      	movs	r1, #1
 800548a:	4618      	mov	r0, r3
 800548c:	f001 ff3c 	bl	8007308 <RCCEx_PLL3_Config>
 8005490:	4603      	mov	r3, r0
 8005492:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005496:	e004      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800549e:	e000      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80054a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10a      	bne.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80054aa:	4bbf      	ldr	r3, [pc, #764]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ae:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80054b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054b8:	4abb      	ldr	r2, [pc, #748]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054ba:	430b      	orrs	r3, r1
 80054bc:	6553      	str	r3, [r2, #84]	; 0x54
 80054be:	e003      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80054c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d0:	f002 0302 	and.w	r3, r2, #2
 80054d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054d8:	2300      	movs	r3, #0
 80054da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80054de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80054e2:	460b      	mov	r3, r1
 80054e4:	4313      	orrs	r3, r2
 80054e6:	d041      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80054e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054ee:	2b05      	cmp	r3, #5
 80054f0:	d824      	bhi.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80054f2:	a201      	add	r2, pc, #4	; (adr r2, 80054f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80054f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f8:	08005545 	.word	0x08005545
 80054fc:	08005511 	.word	0x08005511
 8005500:	08005527 	.word	0x08005527
 8005504:	08005545 	.word	0x08005545
 8005508:	08005545 	.word	0x08005545
 800550c:	08005545 	.word	0x08005545
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005514:	3308      	adds	r3, #8
 8005516:	2101      	movs	r1, #1
 8005518:	4618      	mov	r0, r3
 800551a:	f001 fe43 	bl	80071a4 <RCCEx_PLL2_Config>
 800551e:	4603      	mov	r3, r0
 8005520:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005524:	e00f      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800552a:	3328      	adds	r3, #40	; 0x28
 800552c:	2101      	movs	r1, #1
 800552e:	4618      	mov	r0, r3
 8005530:	f001 feea 	bl	8007308 <RCCEx_PLL3_Config>
 8005534:	4603      	mov	r3, r0
 8005536:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800553a:	e004      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005542:	e000      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005544:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005546:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10a      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800554e:	4b96      	ldr	r3, [pc, #600]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005552:	f023 0107 	bic.w	r1, r3, #7
 8005556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800555a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800555c:	4a92      	ldr	r2, [pc, #584]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800555e:	430b      	orrs	r3, r1
 8005560:	6553      	str	r3, [r2, #84]	; 0x54
 8005562:	e003      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005564:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005568:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800556c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005574:	f002 0304 	and.w	r3, r2, #4
 8005578:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800557c:	2300      	movs	r3, #0
 800557e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005582:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005586:	460b      	mov	r3, r1
 8005588:	4313      	orrs	r3, r2
 800558a:	d044      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800558c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005594:	2b05      	cmp	r3, #5
 8005596:	d825      	bhi.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005598:	a201      	add	r2, pc, #4	; (adr r2, 80055a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800559a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559e:	bf00      	nop
 80055a0:	080055ed 	.word	0x080055ed
 80055a4:	080055b9 	.word	0x080055b9
 80055a8:	080055cf 	.word	0x080055cf
 80055ac:	080055ed 	.word	0x080055ed
 80055b0:	080055ed 	.word	0x080055ed
 80055b4:	080055ed 	.word	0x080055ed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055bc:	3308      	adds	r3, #8
 80055be:	2101      	movs	r1, #1
 80055c0:	4618      	mov	r0, r3
 80055c2:	f001 fdef 	bl	80071a4 <RCCEx_PLL2_Config>
 80055c6:	4603      	mov	r3, r0
 80055c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80055cc:	e00f      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055d2:	3328      	adds	r3, #40	; 0x28
 80055d4:	2101      	movs	r1, #1
 80055d6:	4618      	mov	r0, r3
 80055d8:	f001 fe96 	bl	8007308 <RCCEx_PLL3_Config>
 80055dc:	4603      	mov	r3, r0
 80055de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80055e2:	e004      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055ea:	e000      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80055ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10b      	bne.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055f6:	4b6c      	ldr	r3, [pc, #432]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fa:	f023 0107 	bic.w	r1, r3, #7
 80055fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005602:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005606:	4a68      	ldr	r2, [pc, #416]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005608:	430b      	orrs	r3, r1
 800560a:	6593      	str	r3, [r2, #88]	; 0x58
 800560c:	e003      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800560e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005612:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800561a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561e:	f002 0320 	and.w	r3, r2, #32
 8005622:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005626:	2300      	movs	r3, #0
 8005628:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800562c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005630:	460b      	mov	r3, r1
 8005632:	4313      	orrs	r3, r2
 8005634:	d055      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800563a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005642:	d033      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005644:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005648:	d82c      	bhi.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800564a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800564e:	d02f      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005654:	d826      	bhi.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005656:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800565a:	d02b      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800565c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005660:	d820      	bhi.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005662:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005666:	d012      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800566c:	d81a      	bhi.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800566e:	2b00      	cmp	r3, #0
 8005670:	d022      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005672:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005676:	d115      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800567c:	3308      	adds	r3, #8
 800567e:	2100      	movs	r1, #0
 8005680:	4618      	mov	r0, r3
 8005682:	f001 fd8f 	bl	80071a4 <RCCEx_PLL2_Config>
 8005686:	4603      	mov	r3, r0
 8005688:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800568c:	e015      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800568e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005692:	3328      	adds	r3, #40	; 0x28
 8005694:	2102      	movs	r1, #2
 8005696:	4618      	mov	r0, r3
 8005698:	f001 fe36 	bl	8007308 <RCCEx_PLL3_Config>
 800569c:	4603      	mov	r3, r0
 800569e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80056a2:	e00a      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056aa:	e006      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80056ac:	bf00      	nop
 80056ae:	e004      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80056b0:	bf00      	nop
 80056b2:	e002      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80056b4:	bf00      	nop
 80056b6:	e000      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80056b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10b      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056c2:	4b39      	ldr	r3, [pc, #228]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80056ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d2:	4a35      	ldr	r2, [pc, #212]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056d4:	430b      	orrs	r3, r1
 80056d6:	6553      	str	r3, [r2, #84]	; 0x54
 80056d8:	e003      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80056e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ea:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80056ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80056f2:	2300      	movs	r3, #0
 80056f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80056f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80056fc:	460b      	mov	r3, r1
 80056fe:	4313      	orrs	r3, r2
 8005700:	d058      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005706:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800570a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800570e:	d033      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005710:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005714:	d82c      	bhi.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800571a:	d02f      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800571c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005720:	d826      	bhi.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005722:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005726:	d02b      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005728:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800572c:	d820      	bhi.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800572e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005732:	d012      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005738:	d81a      	bhi.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800573a:	2b00      	cmp	r3, #0
 800573c:	d022      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800573e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005742:	d115      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005748:	3308      	adds	r3, #8
 800574a:	2100      	movs	r1, #0
 800574c:	4618      	mov	r0, r3
 800574e:	f001 fd29 	bl	80071a4 <RCCEx_PLL2_Config>
 8005752:	4603      	mov	r3, r0
 8005754:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005758:	e015      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800575a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800575e:	3328      	adds	r3, #40	; 0x28
 8005760:	2102      	movs	r1, #2
 8005762:	4618      	mov	r0, r3
 8005764:	f001 fdd0 	bl	8007308 <RCCEx_PLL3_Config>
 8005768:	4603      	mov	r3, r0
 800576a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800576e:	e00a      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005776:	e006      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005778:	bf00      	nop
 800577a:	e004      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800577c:	bf00      	nop
 800577e:	e002      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005780:	bf00      	nop
 8005782:	e000      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005786:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10e      	bne.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800578e:	4b06      	ldr	r3, [pc, #24]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005792:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800579a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800579e:	4a02      	ldr	r2, [pc, #8]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057a0:	430b      	orrs	r3, r1
 80057a2:	6593      	str	r3, [r2, #88]	; 0x58
 80057a4:	e006      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80057a6:	bf00      	nop
 80057a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80057b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057bc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80057c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80057c4:	2300      	movs	r3, #0
 80057c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80057ca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80057ce:	460b      	mov	r3, r1
 80057d0:	4313      	orrs	r3, r2
 80057d2:	d055      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80057d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80057dc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80057e0:	d033      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80057e2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80057e6:	d82c      	bhi.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80057e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ec:	d02f      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80057ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f2:	d826      	bhi.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80057f4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80057f8:	d02b      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80057fa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80057fe:	d820      	bhi.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005800:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005804:	d012      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005806:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800580a:	d81a      	bhi.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800580c:	2b00      	cmp	r3, #0
 800580e:	d022      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005814:	d115      	bne.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800581a:	3308      	adds	r3, #8
 800581c:	2100      	movs	r1, #0
 800581e:	4618      	mov	r0, r3
 8005820:	f001 fcc0 	bl	80071a4 <RCCEx_PLL2_Config>
 8005824:	4603      	mov	r3, r0
 8005826:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800582a:	e015      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800582c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005830:	3328      	adds	r3, #40	; 0x28
 8005832:	2102      	movs	r1, #2
 8005834:	4618      	mov	r0, r3
 8005836:	f001 fd67 	bl	8007308 <RCCEx_PLL3_Config>
 800583a:	4603      	mov	r3, r0
 800583c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005840:	e00a      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005848:	e006      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800584a:	bf00      	nop
 800584c:	e004      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800584e:	bf00      	nop
 8005850:	e002      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005852:	bf00      	nop
 8005854:	e000      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005856:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005858:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10b      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005860:	4ba1      	ldr	r3, [pc, #644]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005864:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800586c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005870:	4a9d      	ldr	r2, [pc, #628]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005872:	430b      	orrs	r3, r1
 8005874:	6593      	str	r3, [r2, #88]	; 0x58
 8005876:	e003      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005878:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800587c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005888:	f002 0308 	and.w	r3, r2, #8
 800588c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005890:	2300      	movs	r3, #0
 8005892:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005896:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800589a:	460b      	mov	r3, r1
 800589c:	4313      	orrs	r3, r2
 800589e:	d01e      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80058a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ac:	d10c      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058b2:	3328      	adds	r3, #40	; 0x28
 80058b4:	2102      	movs	r1, #2
 80058b6:	4618      	mov	r0, r3
 80058b8:	f001 fd26 	bl	8007308 <RCCEx_PLL3_Config>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80058c8:	4b87      	ldr	r3, [pc, #540]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058d8:	4a83      	ldr	r2, [pc, #524]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058da:	430b      	orrs	r3, r1
 80058dc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e6:	f002 0310 	and.w	r3, r2, #16
 80058ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058ee:	2300      	movs	r3, #0
 80058f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80058f4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80058f8:	460b      	mov	r3, r1
 80058fa:	4313      	orrs	r3, r2
 80058fc:	d01e      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80058fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005902:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800590a:	d10c      	bne.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800590c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005910:	3328      	adds	r3, #40	; 0x28
 8005912:	2102      	movs	r1, #2
 8005914:	4618      	mov	r0, r3
 8005916:	f001 fcf7 	bl	8007308 <RCCEx_PLL3_Config>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005926:	4b70      	ldr	r3, [pc, #448]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800592e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005932:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005936:	4a6c      	ldr	r2, [pc, #432]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005938:	430b      	orrs	r3, r1
 800593a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800593c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005944:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005948:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800594c:	2300      	movs	r3, #0
 800594e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005952:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005956:	460b      	mov	r3, r1
 8005958:	4313      	orrs	r3, r2
 800595a:	d03e      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800595c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005960:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005968:	d022      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800596a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800596e:	d81b      	bhi.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005970:	2b00      	cmp	r3, #0
 8005972:	d003      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005978:	d00b      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800597a:	e015      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800597c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005980:	3308      	adds	r3, #8
 8005982:	2100      	movs	r1, #0
 8005984:	4618      	mov	r0, r3
 8005986:	f001 fc0d 	bl	80071a4 <RCCEx_PLL2_Config>
 800598a:	4603      	mov	r3, r0
 800598c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005990:	e00f      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005996:	3328      	adds	r3, #40	; 0x28
 8005998:	2102      	movs	r1, #2
 800599a:	4618      	mov	r0, r3
 800599c:	f001 fcb4 	bl	8007308 <RCCEx_PLL3_Config>
 80059a0:	4603      	mov	r3, r0
 80059a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80059a6:	e004      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80059ae:	e000      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80059b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10b      	bne.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059ba:	4b4b      	ldr	r3, [pc, #300]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059be:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80059c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80059ca:	4a47      	ldr	r2, [pc, #284]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059cc:	430b      	orrs	r3, r1
 80059ce:	6593      	str	r3, [r2, #88]	; 0x58
 80059d0:	e003      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80059e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80059e8:	2300      	movs	r3, #0
 80059ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80059ec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80059f0:	460b      	mov	r3, r1
 80059f2:	4313      	orrs	r3, r2
 80059f4:	d03b      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80059f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a02:	d01f      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005a04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a08:	d818      	bhi.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a0e:	d003      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005a10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a14:	d007      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005a16:	e011      	b.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a18:	4b33      	ldr	r3, [pc, #204]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	4a32      	ldr	r2, [pc, #200]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005a24:	e00f      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a2a:	3328      	adds	r3, #40	; 0x28
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f001 fc6a 	bl	8007308 <RCCEx_PLL3_Config>
 8005a34:	4603      	mov	r3, r0
 8005a36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005a3a:	e004      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a42:	e000      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005a44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10b      	bne.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a4e:	4b26      	ldr	r3, [pc, #152]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a52:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5e:	4a22      	ldr	r2, [pc, #136]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a60:	430b      	orrs	r3, r1
 8005a62:	6553      	str	r3, [r2, #84]	; 0x54
 8005a64:	e003      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a76:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005a7a:	673b      	str	r3, [r7, #112]	; 0x70
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	677b      	str	r3, [r7, #116]	; 0x74
 8005a80:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005a84:	460b      	mov	r3, r1
 8005a86:	4313      	orrs	r3, r2
 8005a88:	d034      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d003      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a98:	d007      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005a9a:	e011      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a9c:	4b12      	ldr	r3, [pc, #72]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa0:	4a11      	ldr	r2, [pc, #68]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005aa8:	e00e      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aae:	3308      	adds	r3, #8
 8005ab0:	2102      	movs	r1, #2
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f001 fb76 	bl	80071a4 <RCCEx_PLL2_Config>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005abe:	e003      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10d      	bne.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005ad0:	4b05      	ldr	r3, [pc, #20]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ade:	4a02      	ldr	r2, [pc, #8]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ae0:	430b      	orrs	r3, r1
 8005ae2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ae4:	e006      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005ae6:	bf00      	nop
 8005ae8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005af0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005b00:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b02:	2300      	movs	r3, #0
 8005b04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b06:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	d00c      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b14:	3328      	adds	r3, #40	; 0x28
 8005b16:	2102      	movs	r1, #2
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f001 fbf5 	bl	8007308 <RCCEx_PLL3_Config>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d002      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b32:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005b36:	663b      	str	r3, [r7, #96]	; 0x60
 8005b38:	2300      	movs	r3, #0
 8005b3a:	667b      	str	r3, [r7, #100]	; 0x64
 8005b3c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005b40:	460b      	mov	r3, r1
 8005b42:	4313      	orrs	r3, r2
 8005b44:	d038      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b52:	d018      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005b54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b58:	d811      	bhi.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b5e:	d014      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b64:	d80b      	bhi.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d011      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b6e:	d106      	bne.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b70:	4bc3      	ldr	r3, [pc, #780]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b74:	4ac2      	ldr	r2, [pc, #776]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005b7c:	e008      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b84:	e004      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b86:	bf00      	nop
 8005b88:	e002      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b8a:	bf00      	nop
 8005b8c:	e000      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10b      	bne.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b98:	4bb9      	ldr	r3, [pc, #740]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ba8:	4ab5      	ldr	r2, [pc, #724]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005baa:	430b      	orrs	r3, r1
 8005bac:	6553      	str	r3, [r2, #84]	; 0x54
 8005bae:	e003      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005bc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	d009      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005bd4:	4baa      	ldr	r3, [pc, #680]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bd8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be2:	4aa7      	ldr	r2, [pc, #668]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005be4:	430b      	orrs	r3, r1
 8005be6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005bf4:	653b      	str	r3, [r7, #80]	; 0x50
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	657b      	str	r3, [r7, #84]	; 0x54
 8005bfa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4313      	orrs	r3, r2
 8005c02:	d00a      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005c04:	4b9e      	ldr	r3, [pc, #632]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c10:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005c14:	4a9a      	ldr	r2, [pc, #616]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c16:	430b      	orrs	r3, r1
 8005c18:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c22:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005c26:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c28:	2300      	movs	r3, #0
 8005c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c2c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005c30:	460b      	mov	r3, r1
 8005c32:	4313      	orrs	r3, r2
 8005c34:	d009      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c36:	4b92      	ldr	r3, [pc, #584]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c3a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c44:	4a8e      	ldr	r2, [pc, #568]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c46:	430b      	orrs	r3, r1
 8005c48:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c52:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005c56:	643b      	str	r3, [r7, #64]	; 0x40
 8005c58:	2300      	movs	r3, #0
 8005c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c5c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005c60:	460b      	mov	r3, r1
 8005c62:	4313      	orrs	r3, r2
 8005c64:	d00e      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c66:	4b86      	ldr	r3, [pc, #536]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	4a85      	ldr	r2, [pc, #532]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c70:	6113      	str	r3, [r2, #16]
 8005c72:	4b83      	ldr	r3, [pc, #524]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c74:	6919      	ldr	r1, [r3, #16]
 8005c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c7a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005c7e:	4a80      	ldr	r2, [pc, #512]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c80:	430b      	orrs	r3, r1
 8005c82:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005c90:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c92:	2300      	movs	r3, #0
 8005c94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c96:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	d009      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005ca0:	4b77      	ldr	r3, [pc, #476]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cae:	4a74      	ldr	r2, [pc, #464]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cb0:	430b      	orrs	r3, r1
 8005cb2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8005cc6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005cca:	460b      	mov	r3, r1
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	d00a      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005cd0:	4b6b      	ldr	r3, [pc, #428]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ce0:	4a67      	ldr	r2, [pc, #412]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ce2:	430b      	orrs	r3, r1
 8005ce4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cee:	2100      	movs	r1, #0
 8005cf0:	62b9      	str	r1, [r7, #40]	; 0x28
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cf8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	d011      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d06:	3308      	adds	r3, #8
 8005d08:	2100      	movs	r1, #0
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f001 fa4a 	bl	80071a4 <RCCEx_PLL2_Config>
 8005d10:	4603      	mov	r3, r0
 8005d12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005d16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2e:	2100      	movs	r1, #0
 8005d30:	6239      	str	r1, [r7, #32]
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	627b      	str	r3, [r7, #36]	; 0x24
 8005d38:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	d011      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d46:	3308      	adds	r3, #8
 8005d48:	2101      	movs	r1, #1
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f001 fa2a 	bl	80071a4 <RCCEx_PLL2_Config>
 8005d50:	4603      	mov	r3, r0
 8005d52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005d56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6e:	2100      	movs	r1, #0
 8005d70:	61b9      	str	r1, [r7, #24]
 8005d72:	f003 0304 	and.w	r3, r3, #4
 8005d76:	61fb      	str	r3, [r7, #28]
 8005d78:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	d011      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d86:	3308      	adds	r3, #8
 8005d88:	2102      	movs	r1, #2
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f001 fa0a 	bl	80071a4 <RCCEx_PLL2_Config>
 8005d90:	4603      	mov	r3, r0
 8005d92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005d96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d003      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005da2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dae:	2100      	movs	r1, #0
 8005db0:	6139      	str	r1, [r7, #16]
 8005db2:	f003 0308 	and.w	r3, r3, #8
 8005db6:	617b      	str	r3, [r7, #20]
 8005db8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	d011      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dc6:	3328      	adds	r3, #40	; 0x28
 8005dc8:	2100      	movs	r1, #0
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f001 fa9c 	bl	8007308 <RCCEx_PLL3_Config>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8005dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005de2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dee:	2100      	movs	r1, #0
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	f003 0310 	and.w	r3, r3, #16
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	d011      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e06:	3328      	adds	r3, #40	; 0x28
 8005e08:	2101      	movs	r1, #1
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f001 fa7c 	bl	8007308 <RCCEx_PLL3_Config>
 8005e10:	4603      	mov	r3, r0
 8005e12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005e16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2e:	2100      	movs	r1, #0
 8005e30:	6039      	str	r1, [r7, #0]
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	607b      	str	r3, [r7, #4]
 8005e38:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	d011      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e46:	3328      	adds	r3, #40	; 0x28
 8005e48:	2102      	movs	r1, #2
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f001 fa5c 	bl	8007308 <RCCEx_PLL3_Config>
 8005e50:	4603      	mov	r3, r0
 8005e52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005e56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005e66:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	e000      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e80:	58024400 	.word	0x58024400

08005e84 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b090      	sub	sp, #64	; 0x40
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005e8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e92:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8005e96:	430b      	orrs	r3, r1
 8005e98:	f040 8094 	bne.w	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005e9c:	4b9e      	ldr	r3, [pc, #632]	; (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	2b04      	cmp	r3, #4
 8005eaa:	f200 8087 	bhi.w	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005eae:	a201      	add	r2, pc, #4	; (adr r2, 8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb4:	08005ec9 	.word	0x08005ec9
 8005eb8:	08005ef1 	.word	0x08005ef1
 8005ebc:	08005f19 	.word	0x08005f19
 8005ec0:	08005fb5 	.word	0x08005fb5
 8005ec4:	08005f41 	.word	0x08005f41
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ec8:	4b93      	ldr	r3, [pc, #588]	; (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ed0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ed4:	d108      	bne.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005eda:	4618      	mov	r0, r3
 8005edc:	f001 f810 	bl	8006f00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ee4:	f000 bd45 	b.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005eec:	f000 bd41 	b.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ef0:	4b89      	ldr	r3, [pc, #548]	; (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ef8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005efc:	d108      	bne.n	8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005efe:	f107 0318 	add.w	r3, r7, #24
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 fd54 	bl	80069b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f0c:	f000 bd31 	b.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f10:	2300      	movs	r3, #0
 8005f12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f14:	f000 bd2d 	b.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f18:	4b7f      	ldr	r3, [pc, #508]	; (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f24:	d108      	bne.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f26:	f107 030c 	add.w	r3, r7, #12
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 fe94 	bl	8006c58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f34:	f000 bd1d 	b.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f3c:	f000 bd19 	b.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f40:	4b75      	ldr	r3, [pc, #468]	; (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f48:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f4a:	4b73      	ldr	r3, [pc, #460]	; (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0304 	and.w	r3, r3, #4
 8005f52:	2b04      	cmp	r3, #4
 8005f54:	d10c      	bne.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d109      	bne.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f5c:	4b6e      	ldr	r3, [pc, #440]	; (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	08db      	lsrs	r3, r3, #3
 8005f62:	f003 0303 	and.w	r3, r3, #3
 8005f66:	4a6d      	ldr	r2, [pc, #436]	; (800611c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005f68:	fa22 f303 	lsr.w	r3, r2, r3
 8005f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f6e:	e01f      	b.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f70:	4b69      	ldr	r3, [pc, #420]	; (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f7c:	d106      	bne.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f84:	d102      	bne.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005f86:	4b66      	ldr	r3, [pc, #408]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f8a:	e011      	b.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f8c:	4b62      	ldr	r3, [pc, #392]	; (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f98:	d106      	bne.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fa0:	d102      	bne.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005fa2:	4b60      	ldr	r3, [pc, #384]	; (8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fa6:	e003      	b.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005fac:	f000 bce1 	b.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005fb0:	f000 bcdf 	b.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005fb4:	4b5c      	ldr	r3, [pc, #368]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fb8:	f000 bcdb 	b.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fc0:	f000 bcd7 	b.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005fc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fc8:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005fcc:	430b      	orrs	r3, r1
 8005fce:	f040 80ad 	bne.w	800612c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8005fd2:	4b51      	ldr	r3, [pc, #324]	; (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005fda:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fe2:	d056      	beq.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fea:	f200 8090 	bhi.w	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff0:	2bc0      	cmp	r3, #192	; 0xc0
 8005ff2:	f000 8088 	beq.w	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	2bc0      	cmp	r3, #192	; 0xc0
 8005ffa:	f200 8088 	bhi.w	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006000:	2b80      	cmp	r3, #128	; 0x80
 8006002:	d032      	beq.n	800606a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006006:	2b80      	cmp	r3, #128	; 0x80
 8006008:	f200 8081 	bhi.w	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006014:	2b40      	cmp	r3, #64	; 0x40
 8006016:	d014      	beq.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006018:	e079      	b.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800601a:	4b3f      	ldr	r3, [pc, #252]	; (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006022:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006026:	d108      	bne.n	800603a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800602c:	4618      	mov	r0, r3
 800602e:	f000 ff67 	bl	8006f00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006034:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006036:	f000 bc9c 	b.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800603a:	2300      	movs	r3, #0
 800603c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800603e:	f000 bc98 	b.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006042:	4b35      	ldr	r3, [pc, #212]	; (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800604a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800604e:	d108      	bne.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006050:	f107 0318 	add.w	r3, r7, #24
 8006054:	4618      	mov	r0, r3
 8006056:	f000 fcab 	bl	80069b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800605e:	f000 bc88 	b.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006062:	2300      	movs	r3, #0
 8006064:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006066:	f000 bc84 	b.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800606a:	4b2b      	ldr	r3, [pc, #172]	; (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006076:	d108      	bne.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006078:	f107 030c 	add.w	r3, r7, #12
 800607c:	4618      	mov	r0, r3
 800607e:	f000 fdeb 	bl	8006c58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006086:	f000 bc74 	b.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800608a:	2300      	movs	r3, #0
 800608c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800608e:	f000 bc70 	b.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006092:	4b21      	ldr	r3, [pc, #132]	; (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006096:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800609a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800609c:	4b1e      	ldr	r3, [pc, #120]	; (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b04      	cmp	r3, #4
 80060a6:	d10c      	bne.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80060a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d109      	bne.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060ae:	4b1a      	ldr	r3, [pc, #104]	; (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	08db      	lsrs	r3, r3, #3
 80060b4:	f003 0303 	and.w	r3, r3, #3
 80060b8:	4a18      	ldr	r2, [pc, #96]	; (800611c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80060ba:	fa22 f303 	lsr.w	r3, r2, r3
 80060be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060c0:	e01f      	b.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80060c2:	4b15      	ldr	r3, [pc, #84]	; (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ce:	d106      	bne.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80060d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060d6:	d102      	bne.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80060d8:	4b11      	ldr	r3, [pc, #68]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80060da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060dc:	e011      	b.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80060de:	4b0e      	ldr	r3, [pc, #56]	; (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060ea:	d106      	bne.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80060ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060f2:	d102      	bne.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80060f4:	4b0b      	ldr	r3, [pc, #44]	; (8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80060f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060f8:	e003      	b.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80060fa:	2300      	movs	r3, #0
 80060fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80060fe:	f000 bc38 	b.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006102:	f000 bc36 	b.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006106:	4b08      	ldr	r3, [pc, #32]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006108:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800610a:	f000 bc32 	b.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800610e:	2300      	movs	r3, #0
 8006110:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006112:	f000 bc2e 	b.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006116:	bf00      	nop
 8006118:	58024400 	.word	0x58024400
 800611c:	03d09000 	.word	0x03d09000
 8006120:	003d0900 	.word	0x003d0900
 8006124:	017d7840 	.word	0x017d7840
 8006128:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800612c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006130:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006134:	430b      	orrs	r3, r1
 8006136:	f040 809c 	bne.w	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800613a:	4b9e      	ldr	r3, [pc, #632]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800613c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006142:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006146:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800614a:	d054      	beq.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800614c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006152:	f200 808b 	bhi.w	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800615c:	f000 8083 	beq.w	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006166:	f200 8081 	bhi.w	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800616a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006170:	d02f      	beq.n	80061d2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006178:	d878      	bhi.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800617a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617c:	2b00      	cmp	r3, #0
 800617e:	d004      	beq.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006182:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006186:	d012      	beq.n	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006188:	e070      	b.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800618a:	4b8a      	ldr	r3, [pc, #552]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006192:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006196:	d107      	bne.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800619c:	4618      	mov	r0, r3
 800619e:	f000 feaf 	bl	8006f00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061a6:	e3e4      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061a8:	2300      	movs	r3, #0
 80061aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061ac:	e3e1      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061ae:	4b81      	ldr	r3, [pc, #516]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061ba:	d107      	bne.n	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061bc:	f107 0318 	add.w	r3, r7, #24
 80061c0:	4618      	mov	r0, r3
 80061c2:	f000 fbf5 	bl	80069b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061ca:	e3d2      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061cc:	2300      	movs	r3, #0
 80061ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061d0:	e3cf      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80061d2:	4b78      	ldr	r3, [pc, #480]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061de:	d107      	bne.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061e0:	f107 030c 	add.w	r3, r7, #12
 80061e4:	4618      	mov	r0, r3
 80061e6:	f000 fd37 	bl	8006c58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061ee:	e3c0      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061f0:	2300      	movs	r3, #0
 80061f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061f4:	e3bd      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80061f6:	4b6f      	ldr	r3, [pc, #444]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80061f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061fe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006200:	4b6c      	ldr	r3, [pc, #432]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b04      	cmp	r3, #4
 800620a:	d10c      	bne.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800620c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620e:	2b00      	cmp	r3, #0
 8006210:	d109      	bne.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006212:	4b68      	ldr	r3, [pc, #416]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	08db      	lsrs	r3, r3, #3
 8006218:	f003 0303 	and.w	r3, r3, #3
 800621c:	4a66      	ldr	r2, [pc, #408]	; (80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800621e:	fa22 f303 	lsr.w	r3, r2, r3
 8006222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006224:	e01e      	b.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006226:	4b63      	ldr	r3, [pc, #396]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006232:	d106      	bne.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006236:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800623a:	d102      	bne.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800623c:	4b5f      	ldr	r3, [pc, #380]	; (80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800623e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006240:	e010      	b.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006242:	4b5c      	ldr	r3, [pc, #368]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800624a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800624e:	d106      	bne.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006256:	d102      	bne.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006258:	4b59      	ldr	r3, [pc, #356]	; (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800625a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800625c:	e002      	b.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800625e:	2300      	movs	r3, #0
 8006260:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006262:	e386      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006264:	e385      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006266:	4b57      	ldr	r3, [pc, #348]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006268:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800626a:	e382      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800626c:	2300      	movs	r3, #0
 800626e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006270:	e37f      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006272:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006276:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800627a:	430b      	orrs	r3, r1
 800627c:	f040 80a7 	bne.w	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006280:	4b4c      	ldr	r3, [pc, #304]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006284:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006288:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800628a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006290:	d055      	beq.n	800633e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006298:	f200 8096 	bhi.w	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800629c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80062a2:	f000 8084 	beq.w	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80062a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80062ac:	f200 808c 	bhi.w	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062b6:	d030      	beq.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80062b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062be:	f200 8083 	bhi.w	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d004      	beq.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80062c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062ce:	d012      	beq.n	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80062d0:	e07a      	b.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80062d2:	4b38      	ldr	r3, [pc, #224]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062de:	d107      	bne.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 fe0b 	bl	8006f00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80062ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80062ee:	e340      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80062f0:	2300      	movs	r3, #0
 80062f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062f4:	e33d      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80062f6:	4b2f      	ldr	r3, [pc, #188]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006302:	d107      	bne.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006304:	f107 0318 	add.w	r3, r7, #24
 8006308:	4618      	mov	r0, r3
 800630a:	f000 fb51 	bl	80069b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006312:	e32e      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006314:	2300      	movs	r3, #0
 8006316:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006318:	e32b      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800631a:	4b26      	ldr	r3, [pc, #152]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006326:	d107      	bne.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006328:	f107 030c 	add.w	r3, r7, #12
 800632c:	4618      	mov	r0, r3
 800632e:	f000 fc93 	bl	8006c58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006336:	e31c      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006338:	2300      	movs	r3, #0
 800633a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800633c:	e319      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800633e:	4b1d      	ldr	r3, [pc, #116]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006342:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006346:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006348:	4b1a      	ldr	r3, [pc, #104]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0304 	and.w	r3, r3, #4
 8006350:	2b04      	cmp	r3, #4
 8006352:	d10c      	bne.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006356:	2b00      	cmp	r3, #0
 8006358:	d109      	bne.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800635a:	4b16      	ldr	r3, [pc, #88]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	08db      	lsrs	r3, r3, #3
 8006360:	f003 0303 	and.w	r3, r3, #3
 8006364:	4a14      	ldr	r2, [pc, #80]	; (80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006366:	fa22 f303 	lsr.w	r3, r2, r3
 800636a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800636c:	e01e      	b.n	80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800636e:	4b11      	ldr	r3, [pc, #68]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800637a:	d106      	bne.n	800638a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800637c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006382:	d102      	bne.n	800638a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006384:	4b0d      	ldr	r3, [pc, #52]	; (80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006386:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006388:	e010      	b.n	80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800638a:	4b0a      	ldr	r3, [pc, #40]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006392:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006396:	d106      	bne.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800639a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800639e:	d102      	bne.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80063a0:	4b07      	ldr	r3, [pc, #28]	; (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80063a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063a4:	e002      	b.n	80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80063a6:	2300      	movs	r3, #0
 80063a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80063aa:	e2e2      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80063ac:	e2e1      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80063ae:	4b05      	ldr	r3, [pc, #20]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80063b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063b2:	e2de      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80063b4:	58024400 	.word	0x58024400
 80063b8:	03d09000 	.word	0x03d09000
 80063bc:	003d0900 	.word	0x003d0900
 80063c0:	017d7840 	.word	0x017d7840
 80063c4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80063c8:	2300      	movs	r3, #0
 80063ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063cc:	e2d1      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80063ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063d2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80063d6:	430b      	orrs	r3, r1
 80063d8:	f040 809c 	bne.w	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80063dc:	4b93      	ldr	r3, [pc, #588]	; (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80063de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80063e4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80063e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063ec:	d054      	beq.n	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80063ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063f4:	f200 808b 	bhi.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80063f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063fe:	f000 8083 	beq.w	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006404:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006408:	f200 8081 	bhi.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800640c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006412:	d02f      	beq.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800641a:	d878      	bhi.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800641c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641e:	2b00      	cmp	r3, #0
 8006420:	d004      	beq.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006428:	d012      	beq.n	8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800642a:	e070      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800642c:	4b7f      	ldr	r3, [pc, #508]	; (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006434:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006438:	d107      	bne.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800643a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800643e:	4618      	mov	r0, r3
 8006440:	f000 fd5e 	bl	8006f00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006446:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006448:	e293      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800644e:	e290      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006450:	4b76      	ldr	r3, [pc, #472]	; (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006458:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800645c:	d107      	bne.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800645e:	f107 0318 	add.w	r3, r7, #24
 8006462:	4618      	mov	r0, r3
 8006464:	f000 faa4 	bl	80069b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800646c:	e281      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800646e:	2300      	movs	r3, #0
 8006470:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006472:	e27e      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006474:	4b6d      	ldr	r3, [pc, #436]	; (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800647c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006480:	d107      	bne.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006482:	f107 030c 	add.w	r3, r7, #12
 8006486:	4618      	mov	r0, r3
 8006488:	f000 fbe6 	bl	8006c58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006490:	e26f      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006492:	2300      	movs	r3, #0
 8006494:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006496:	e26c      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006498:	4b64      	ldr	r3, [pc, #400]	; (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800649a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800649c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064a0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064a2:	4b62      	ldr	r3, [pc, #392]	; (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0304 	and.w	r3, r3, #4
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d10c      	bne.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80064ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d109      	bne.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064b4:	4b5d      	ldr	r3, [pc, #372]	; (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	08db      	lsrs	r3, r3, #3
 80064ba:	f003 0303 	and.w	r3, r3, #3
 80064be:	4a5c      	ldr	r2, [pc, #368]	; (8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80064c0:	fa22 f303 	lsr.w	r3, r2, r3
 80064c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064c6:	e01e      	b.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80064c8:	4b58      	ldr	r3, [pc, #352]	; (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064d4:	d106      	bne.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80064d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064dc:	d102      	bne.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80064de:	4b55      	ldr	r3, [pc, #340]	; (8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80064e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064e2:	e010      	b.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80064e4:	4b51      	ldr	r3, [pc, #324]	; (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064f0:	d106      	bne.n	8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80064f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064f8:	d102      	bne.n	8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80064fa:	4b4f      	ldr	r3, [pc, #316]	; (8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80064fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064fe:	e002      	b.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006504:	e235      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006506:	e234      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006508:	4b4c      	ldr	r3, [pc, #304]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800650a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800650c:	e231      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800650e:	2300      	movs	r3, #0
 8006510:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006512:	e22e      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006514:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006518:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800651c:	430b      	orrs	r3, r1
 800651e:	f040 808f 	bne.w	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006522:	4b42      	ldr	r3, [pc, #264]	; (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006526:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800652a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800652c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006532:	d06b      	beq.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006536:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800653a:	d874      	bhi.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800653c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006542:	d056      	beq.n	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006546:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800654a:	d86c      	bhi.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800654c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006552:	d03b      	beq.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006556:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800655a:	d864      	bhi.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800655c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006562:	d021      	beq.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006566:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800656a:	d85c      	bhi.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800656c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656e:	2b00      	cmp	r3, #0
 8006570:	d004      	beq.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006578:	d004      	beq.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800657a:	e054      	b.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800657c:	f7fe fa4c 	bl	8004a18 <HAL_RCC_GetPCLK1Freq>
 8006580:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006582:	e1f6      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006584:	4b29      	ldr	r3, [pc, #164]	; (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800658c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006590:	d107      	bne.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006592:	f107 0318 	add.w	r3, r7, #24
 8006596:	4618      	mov	r0, r3
 8006598:	f000 fa0a 	bl	80069b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065a0:	e1e7      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065a2:	2300      	movs	r3, #0
 80065a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065a6:	e1e4      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065a8:	4b20      	ldr	r3, [pc, #128]	; (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065b4:	d107      	bne.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065b6:	f107 030c 	add.w	r3, r7, #12
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 fb4c 	bl	8006c58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065c4:	e1d5      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065c6:	2300      	movs	r3, #0
 80065c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065ca:	e1d2      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065cc:	4b17      	ldr	r3, [pc, #92]	; (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0304 	and.w	r3, r3, #4
 80065d4:	2b04      	cmp	r3, #4
 80065d6:	d109      	bne.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065d8:	4b14      	ldr	r3, [pc, #80]	; (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	08db      	lsrs	r3, r3, #3
 80065de:	f003 0303 	and.w	r3, r3, #3
 80065e2:	4a13      	ldr	r2, [pc, #76]	; (8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80065e4:	fa22 f303 	lsr.w	r3, r2, r3
 80065e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065ea:	e1c2      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065ec:	2300      	movs	r3, #0
 80065ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065f0:	e1bf      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80065f2:	4b0e      	ldr	r3, [pc, #56]	; (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065fe:	d102      	bne.n	8006606 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006600:	4b0c      	ldr	r3, [pc, #48]	; (8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006602:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006604:	e1b5      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006606:	2300      	movs	r3, #0
 8006608:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800660a:	e1b2      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800660c:	4b07      	ldr	r3, [pc, #28]	; (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006614:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006618:	d102      	bne.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800661a:	4b07      	ldr	r3, [pc, #28]	; (8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800661c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800661e:	e1a8      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006620:	2300      	movs	r3, #0
 8006622:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006624:	e1a5      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006626:	2300      	movs	r3, #0
 8006628:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800662a:	e1a2      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800662c:	58024400 	.word	0x58024400
 8006630:	03d09000 	.word	0x03d09000
 8006634:	003d0900 	.word	0x003d0900
 8006638:	017d7840 	.word	0x017d7840
 800663c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006640:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006644:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006648:	430b      	orrs	r3, r1
 800664a:	d173      	bne.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800664c:	4b9c      	ldr	r3, [pc, #624]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800664e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006650:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006654:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006658:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800665c:	d02f      	beq.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800665e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006660:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006664:	d863      	bhi.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006668:	2b00      	cmp	r3, #0
 800666a:	d004      	beq.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800666c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006672:	d012      	beq.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006674:	e05b      	b.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006676:	4b92      	ldr	r3, [pc, #584]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800667e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006682:	d107      	bne.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006684:	f107 0318 	add.w	r3, r7, #24
 8006688:	4618      	mov	r0, r3
 800668a:	f000 f991 	bl	80069b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006692:	e16e      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006694:	2300      	movs	r3, #0
 8006696:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006698:	e16b      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800669a:	4b89      	ldr	r3, [pc, #548]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066a6:	d107      	bne.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066a8:	f107 030c 	add.w	r3, r7, #12
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 fad3 	bl	8006c58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066b6:	e15c      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066b8:	2300      	movs	r3, #0
 80066ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066bc:	e159      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80066be:	4b80      	ldr	r3, [pc, #512]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80066c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066c6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066c8:	4b7d      	ldr	r3, [pc, #500]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b04      	cmp	r3, #4
 80066d2:	d10c      	bne.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80066d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d109      	bne.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066da:	4b79      	ldr	r3, [pc, #484]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	08db      	lsrs	r3, r3, #3
 80066e0:	f003 0303 	and.w	r3, r3, #3
 80066e4:	4a77      	ldr	r2, [pc, #476]	; (80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80066e6:	fa22 f303 	lsr.w	r3, r2, r3
 80066ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066ec:	e01e      	b.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066ee:	4b74      	ldr	r3, [pc, #464]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066fa:	d106      	bne.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80066fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006702:	d102      	bne.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006704:	4b70      	ldr	r3, [pc, #448]	; (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006708:	e010      	b.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800670a:	4b6d      	ldr	r3, [pc, #436]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006712:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006716:	d106      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800671e:	d102      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006720:	4b6a      	ldr	r3, [pc, #424]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006724:	e002      	b.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006726:	2300      	movs	r3, #0
 8006728:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800672a:	e122      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800672c:	e121      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800672e:	2300      	movs	r3, #0
 8006730:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006732:	e11e      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006734:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006738:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800673c:	430b      	orrs	r3, r1
 800673e:	d133      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006740:	4b5f      	ldr	r3, [pc, #380]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006748:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800674a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674c:	2b00      	cmp	r3, #0
 800674e:	d004      	beq.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006756:	d012      	beq.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006758:	e023      	b.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800675a:	4b59      	ldr	r3, [pc, #356]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006762:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006766:	d107      	bne.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800676c:	4618      	mov	r0, r3
 800676e:	f000 fbc7 	bl	8006f00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006774:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006776:	e0fc      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006778:	2300      	movs	r3, #0
 800677a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800677c:	e0f9      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800677e:	4b50      	ldr	r3, [pc, #320]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800678a:	d107      	bne.n	800679c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800678c:	f107 0318 	add.w	r3, r7, #24
 8006790:	4618      	mov	r0, r3
 8006792:	f000 f90d 	bl	80069b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006796:	6a3b      	ldr	r3, [r7, #32]
 8006798:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800679a:	e0ea      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800679c:	2300      	movs	r3, #0
 800679e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067a0:	e0e7      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80067a2:	2300      	movs	r3, #0
 80067a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067a6:	e0e4      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80067a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067ac:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80067b0:	430b      	orrs	r3, r1
 80067b2:	f040 808d 	bne.w	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80067b6:	4b42      	ldr	r3, [pc, #264]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80067b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ba:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80067be:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80067c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067c6:	d06b      	beq.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80067c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067ce:	d874      	bhi.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80067d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d6:	d056      	beq.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80067d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067de:	d86c      	bhi.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80067e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067e6:	d03b      	beq.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80067e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067ee:	d864      	bhi.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80067f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067f6:	d021      	beq.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80067f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067fe:	d85c      	bhi.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006802:	2b00      	cmp	r3, #0
 8006804:	d004      	beq.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006808:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800680c:	d004      	beq.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800680e:	e054      	b.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006810:	f000 f8b8 	bl	8006984 <HAL_RCCEx_GetD3PCLK1Freq>
 8006814:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006816:	e0ac      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006818:	4b29      	ldr	r3, [pc, #164]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006820:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006824:	d107      	bne.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006826:	f107 0318 	add.w	r3, r7, #24
 800682a:	4618      	mov	r0, r3
 800682c:	f000 f8c0 	bl	80069b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006834:	e09d      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006836:	2300      	movs	r3, #0
 8006838:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800683a:	e09a      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800683c:	4b20      	ldr	r3, [pc, #128]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006848:	d107      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800684a:	f107 030c 	add.w	r3, r7, #12
 800684e:	4618      	mov	r0, r3
 8006850:	f000 fa02 	bl	8006c58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006858:	e08b      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800685a:	2300      	movs	r3, #0
 800685c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800685e:	e088      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006860:	4b17      	ldr	r3, [pc, #92]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0304 	and.w	r3, r3, #4
 8006868:	2b04      	cmp	r3, #4
 800686a:	d109      	bne.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800686c:	4b14      	ldr	r3, [pc, #80]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	08db      	lsrs	r3, r3, #3
 8006872:	f003 0303 	and.w	r3, r3, #3
 8006876:	4a13      	ldr	r2, [pc, #76]	; (80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006878:	fa22 f303 	lsr.w	r3, r2, r3
 800687c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800687e:	e078      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006880:	2300      	movs	r3, #0
 8006882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006884:	e075      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006886:	4b0e      	ldr	r3, [pc, #56]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800688e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006892:	d102      	bne.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006894:	4b0c      	ldr	r3, [pc, #48]	; (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006896:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006898:	e06b      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800689a:	2300      	movs	r3, #0
 800689c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800689e:	e068      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80068a0:	4b07      	ldr	r3, [pc, #28]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068ac:	d102      	bne.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80068ae:	4b07      	ldr	r3, [pc, #28]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80068b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068b2:	e05e      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068b8:	e05b      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80068ba:	2300      	movs	r3, #0
 80068bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068be:	e058      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80068c0:	58024400 	.word	0x58024400
 80068c4:	03d09000 	.word	0x03d09000
 80068c8:	003d0900 	.word	0x003d0900
 80068cc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80068d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068d4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80068d8:	430b      	orrs	r3, r1
 80068da:	d148      	bne.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80068dc:	4b27      	ldr	r3, [pc, #156]	; (800697c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80068de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068e4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80068e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068ec:	d02a      	beq.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80068ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068f4:	d838      	bhi.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80068f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d004      	beq.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80068fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006902:	d00d      	beq.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006904:	e030      	b.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006906:	4b1d      	ldr	r3, [pc, #116]	; (800697c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800690e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006912:	d102      	bne.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006914:	4b1a      	ldr	r3, [pc, #104]	; (8006980 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006916:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006918:	e02b      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800691a:	2300      	movs	r3, #0
 800691c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800691e:	e028      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006920:	4b16      	ldr	r3, [pc, #88]	; (800697c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006928:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800692c:	d107      	bne.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800692e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006932:	4618      	mov	r0, r3
 8006934:	f000 fae4 	bl	8006f00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800693c:	e019      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800693e:	2300      	movs	r3, #0
 8006940:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006942:	e016      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006944:	4b0d      	ldr	r3, [pc, #52]	; (800697c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800694c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006950:	d107      	bne.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006952:	f107 0318 	add.w	r3, r7, #24
 8006956:	4618      	mov	r0, r3
 8006958:	f000 f82a 	bl	80069b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006960:	e007      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006962:	2300      	movs	r3, #0
 8006964:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006966:	e004      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006968:	2300      	movs	r3, #0
 800696a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800696c:	e001      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800696e:	2300      	movs	r3, #0
 8006970:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8006972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006974:	4618      	mov	r0, r3
 8006976:	3740      	adds	r7, #64	; 0x40
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	58024400 	.word	0x58024400
 8006980:	017d7840 	.word	0x017d7840

08006984 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006988:	f7fe f816 	bl	80049b8 <HAL_RCC_GetHCLKFreq>
 800698c:	4602      	mov	r2, r0
 800698e:	4b06      	ldr	r3, [pc, #24]	; (80069a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	091b      	lsrs	r3, r3, #4
 8006994:	f003 0307 	and.w	r3, r3, #7
 8006998:	4904      	ldr	r1, [pc, #16]	; (80069ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800699a:	5ccb      	ldrb	r3, [r1, r3]
 800699c:	f003 031f 	and.w	r3, r3, #31
 80069a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	58024400 	.word	0x58024400
 80069ac:	0800b420 	.word	0x0800b420

080069b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b089      	sub	sp, #36	; 0x24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069b8:	4ba1      	ldr	r3, [pc, #644]	; (8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069bc:	f003 0303 	and.w	r3, r3, #3
 80069c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80069c2:	4b9f      	ldr	r3, [pc, #636]	; (8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c6:	0b1b      	lsrs	r3, r3, #12
 80069c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80069ce:	4b9c      	ldr	r3, [pc, #624]	; (8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d2:	091b      	lsrs	r3, r3, #4
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80069da:	4b99      	ldr	r3, [pc, #612]	; (8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069de:	08db      	lsrs	r3, r3, #3
 80069e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	fb02 f303 	mul.w	r3, r2, r3
 80069ea:	ee07 3a90 	vmov	s15, r3
 80069ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 8111 	beq.w	8006c20 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	f000 8083 	beq.w	8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	f200 80a1 	bhi.w	8006b50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d003      	beq.n	8006a1c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d056      	beq.n	8006ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006a1a:	e099      	b.n	8006b50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a1c:	4b88      	ldr	r3, [pc, #544]	; (8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0320 	and.w	r3, r3, #32
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d02d      	beq.n	8006a84 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a28:	4b85      	ldr	r3, [pc, #532]	; (8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	08db      	lsrs	r3, r3, #3
 8006a2e:	f003 0303 	and.w	r3, r3, #3
 8006a32:	4a84      	ldr	r2, [pc, #528]	; (8006c44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006a34:	fa22 f303 	lsr.w	r3, r2, r3
 8006a38:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	ee07 3a90 	vmov	s15, r3
 8006a40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	ee07 3a90 	vmov	s15, r3
 8006a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a52:	4b7b      	ldr	r3, [pc, #492]	; (8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a5a:	ee07 3a90 	vmov	s15, r3
 8006a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a66:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006a82:	e087      	b.n	8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	ee07 3a90 	vmov	s15, r3
 8006a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006c4c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a96:	4b6a      	ldr	r3, [pc, #424]	; (8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a9e:	ee07 3a90 	vmov	s15, r3
 8006aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aaa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ac6:	e065      	b.n	8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	ee07 3a90 	vmov	s15, r3
 8006ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006c50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ada:	4b59      	ldr	r3, [pc, #356]	; (8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae2:	ee07 3a90 	vmov	s15, r3
 8006ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b0a:	e043      	b.n	8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	ee07 3a90 	vmov	s15, r3
 8006b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006c54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b1e:	4b48      	ldr	r3, [pc, #288]	; (8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b26:	ee07 3a90 	vmov	s15, r3
 8006b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b32:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b4e:	e021      	b.n	8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	ee07 3a90 	vmov	s15, r3
 8006b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006c50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b62:	4b37      	ldr	r3, [pc, #220]	; (8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b6a:	ee07 3a90 	vmov	s15, r3
 8006b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b76:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006b94:	4b2a      	ldr	r3, [pc, #168]	; (8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b98:	0a5b      	lsrs	r3, r3, #9
 8006b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b9e:	ee07 3a90 	vmov	s15, r3
 8006ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006baa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bae:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bba:	ee17 2a90 	vmov	r2, s15
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006bc2:	4b1f      	ldr	r3, [pc, #124]	; (8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc6:	0c1b      	lsrs	r3, r3, #16
 8006bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bcc:	ee07 3a90 	vmov	s15, r3
 8006bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006be8:	ee17 2a90 	vmov	r2, s15
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006bf0:	4b13      	ldr	r3, [pc, #76]	; (8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf4:	0e1b      	lsrs	r3, r3, #24
 8006bf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bfa:	ee07 3a90 	vmov	s15, r3
 8006bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c16:	ee17 2a90 	vmov	r2, s15
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c1e:	e008      	b.n	8006c32 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	609a      	str	r2, [r3, #8]
}
 8006c32:	bf00      	nop
 8006c34:	3724      	adds	r7, #36	; 0x24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	58024400 	.word	0x58024400
 8006c44:	03d09000 	.word	0x03d09000
 8006c48:	46000000 	.word	0x46000000
 8006c4c:	4c742400 	.word	0x4c742400
 8006c50:	4a742400 	.word	0x4a742400
 8006c54:	4bbebc20 	.word	0x4bbebc20

08006c58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b089      	sub	sp, #36	; 0x24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c60:	4ba1      	ldr	r3, [pc, #644]	; (8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c64:	f003 0303 	and.w	r3, r3, #3
 8006c68:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006c6a:	4b9f      	ldr	r3, [pc, #636]	; (8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6e:	0d1b      	lsrs	r3, r3, #20
 8006c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c74:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006c76:	4b9c      	ldr	r3, [pc, #624]	; (8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7a:	0a1b      	lsrs	r3, r3, #8
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006c82:	4b99      	ldr	r3, [pc, #612]	; (8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c86:	08db      	lsrs	r3, r3, #3
 8006c88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	fb02 f303 	mul.w	r3, r2, r3
 8006c92:	ee07 3a90 	vmov	s15, r3
 8006c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 8111 	beq.w	8006ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	f000 8083 	beq.w	8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	f200 80a1 	bhi.w	8006df8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d003      	beq.n	8006cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d056      	beq.n	8006d70 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006cc2:	e099      	b.n	8006df8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cc4:	4b88      	ldr	r3, [pc, #544]	; (8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0320 	and.w	r3, r3, #32
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d02d      	beq.n	8006d2c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cd0:	4b85      	ldr	r3, [pc, #532]	; (8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	08db      	lsrs	r3, r3, #3
 8006cd6:	f003 0303 	and.w	r3, r3, #3
 8006cda:	4a84      	ldr	r2, [pc, #528]	; (8006eec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	ee07 3a90 	vmov	s15, r3
 8006ce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	ee07 3a90 	vmov	s15, r3
 8006cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cfa:	4b7b      	ldr	r3, [pc, #492]	; (8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d02:	ee07 3a90 	vmov	s15, r3
 8006d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d2a:	e087      	b.n	8006e3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	ee07 3a90 	vmov	s15, r3
 8006d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d3e:	4b6a      	ldr	r3, [pc, #424]	; (8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d46:	ee07 3a90 	vmov	s15, r3
 8006d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d52:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d6e:	e065      	b.n	8006e3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	ee07 3a90 	vmov	s15, r3
 8006d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d82:	4b59      	ldr	r3, [pc, #356]	; (8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d96:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006db2:	e043      	b.n	8006e3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	ee07 3a90 	vmov	s15, r3
 8006dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006efc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dc6:	4b48      	ldr	r3, [pc, #288]	; (8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dce:	ee07 3a90 	vmov	s15, r3
 8006dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dda:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006df6:	e021      	b.n	8006e3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	ee07 3a90 	vmov	s15, r3
 8006dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e0a:	4b37      	ldr	r3, [pc, #220]	; (8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e12:	ee07 3a90 	vmov	s15, r3
 8006e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e3a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006e3c:	4b2a      	ldr	r3, [pc, #168]	; (8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e40:	0a5b      	lsrs	r3, r3, #9
 8006e42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e46:	ee07 3a90 	vmov	s15, r3
 8006e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e56:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e62:	ee17 2a90 	vmov	r2, s15
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006e6a:	4b1f      	ldr	r3, [pc, #124]	; (8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6e:	0c1b      	lsrs	r3, r3, #16
 8006e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e74:	ee07 3a90 	vmov	s15, r3
 8006e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e84:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e90:	ee17 2a90 	vmov	r2, s15
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006e98:	4b13      	ldr	r3, [pc, #76]	; (8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9c:	0e1b      	lsrs	r3, r3, #24
 8006e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ea2:	ee07 3a90 	vmov	s15, r3
 8006ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006eae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ebe:	ee17 2a90 	vmov	r2, s15
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006ec6:	e008      	b.n	8006eda <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	609a      	str	r2, [r3, #8]
}
 8006eda:	bf00      	nop
 8006edc:	3724      	adds	r7, #36	; 0x24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	58024400 	.word	0x58024400
 8006eec:	03d09000 	.word	0x03d09000
 8006ef0:	46000000 	.word	0x46000000
 8006ef4:	4c742400 	.word	0x4c742400
 8006ef8:	4a742400 	.word	0x4a742400
 8006efc:	4bbebc20 	.word	0x4bbebc20

08006f00 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b089      	sub	sp, #36	; 0x24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f08:	4ba0      	ldr	r3, [pc, #640]	; (800718c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0c:	f003 0303 	and.w	r3, r3, #3
 8006f10:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006f12:	4b9e      	ldr	r3, [pc, #632]	; (800718c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f16:	091b      	lsrs	r3, r3, #4
 8006f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f1c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006f1e:	4b9b      	ldr	r3, [pc, #620]	; (800718c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006f28:	4b98      	ldr	r3, [pc, #608]	; (800718c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f2c:	08db      	lsrs	r3, r3, #3
 8006f2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	fb02 f303 	mul.w	r3, r2, r3
 8006f38:	ee07 3a90 	vmov	s15, r3
 8006f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f40:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f000 8111 	beq.w	800716e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	f000 8083 	beq.w	800705a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	f200 80a1 	bhi.w	800709e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d003      	beq.n	8006f6a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d056      	beq.n	8007016 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006f68:	e099      	b.n	800709e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f6a:	4b88      	ldr	r3, [pc, #544]	; (800718c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0320 	and.w	r3, r3, #32
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d02d      	beq.n	8006fd2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f76:	4b85      	ldr	r3, [pc, #532]	; (800718c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	08db      	lsrs	r3, r3, #3
 8006f7c:	f003 0303 	and.w	r3, r3, #3
 8006f80:	4a83      	ldr	r2, [pc, #524]	; (8007190 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006f82:	fa22 f303 	lsr.w	r3, r2, r3
 8006f86:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	ee07 3a90 	vmov	s15, r3
 8006f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fa0:	4b7a      	ldr	r3, [pc, #488]	; (800718c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa8:	ee07 3a90 	vmov	s15, r3
 8006fac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fb4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007194 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006fb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fcc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006fd0:	e087      	b.n	80070e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	ee07 3a90 	vmov	s15, r3
 8006fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fdc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007198 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006fe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fe4:	4b69      	ldr	r3, [pc, #420]	; (800718c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fec:	ee07 3a90 	vmov	s15, r3
 8006ff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ff4:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ff8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007194 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006ffc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007000:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007004:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007008:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800700c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007010:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007014:	e065      	b.n	80070e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	ee07 3a90 	vmov	s15, r3
 800701c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007020:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800719c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007024:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007028:	4b58      	ldr	r3, [pc, #352]	; (800718c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800702a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007030:	ee07 3a90 	vmov	s15, r3
 8007034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007038:	ed97 6a03 	vldr	s12, [r7, #12]
 800703c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007194 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007040:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007044:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007048:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800704c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007054:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007058:	e043      	b.n	80070e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	ee07 3a90 	vmov	s15, r3
 8007060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007064:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80071a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007068:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800706c:	4b47      	ldr	r3, [pc, #284]	; (800718c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800706e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007074:	ee07 3a90 	vmov	s15, r3
 8007078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800707c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007080:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007194 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007084:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007088:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800708c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007090:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007098:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800709c:	e021      	b.n	80070e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	ee07 3a90 	vmov	s15, r3
 80070a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007198 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80070ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070b0:	4b36      	ldr	r3, [pc, #216]	; (800718c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070b8:	ee07 3a90 	vmov	s15, r3
 80070bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80070c4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007194 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80070c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070e0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80070e2:	4b2a      	ldr	r3, [pc, #168]	; (800718c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e6:	0a5b      	lsrs	r3, r3, #9
 80070e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070ec:	ee07 3a90 	vmov	s15, r3
 80070f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007108:	ee17 2a90 	vmov	r2, s15
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007110:	4b1e      	ldr	r3, [pc, #120]	; (800718c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007114:	0c1b      	lsrs	r3, r3, #16
 8007116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007126:	ee37 7a87 	vadd.f32	s14, s15, s14
 800712a:	edd7 6a07 	vldr	s13, [r7, #28]
 800712e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007136:	ee17 2a90 	vmov	r2, s15
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800713e:	4b13      	ldr	r3, [pc, #76]	; (800718c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007142:	0e1b      	lsrs	r3, r3, #24
 8007144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007148:	ee07 3a90 	vmov	s15, r3
 800714c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007150:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007154:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007158:	edd7 6a07 	vldr	s13, [r7, #28]
 800715c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007164:	ee17 2a90 	vmov	r2, s15
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800716c:	e008      	b.n	8007180 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	609a      	str	r2, [r3, #8]
}
 8007180:	bf00      	nop
 8007182:	3724      	adds	r7, #36	; 0x24
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	58024400 	.word	0x58024400
 8007190:	03d09000 	.word	0x03d09000
 8007194:	46000000 	.word	0x46000000
 8007198:	4c742400 	.word	0x4c742400
 800719c:	4a742400 	.word	0x4a742400
 80071a0:	4bbebc20 	.word	0x4bbebc20

080071a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80071b2:	4b53      	ldr	r3, [pc, #332]	; (8007300 <RCCEx_PLL2_Config+0x15c>)
 80071b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b6:	f003 0303 	and.w	r3, r3, #3
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d101      	bne.n	80071c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e099      	b.n	80072f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80071c2:	4b4f      	ldr	r3, [pc, #316]	; (8007300 <RCCEx_PLL2_Config+0x15c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a4e      	ldr	r2, [pc, #312]	; (8007300 <RCCEx_PLL2_Config+0x15c>)
 80071c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80071cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071ce:	f7fa fdf7 	bl	8001dc0 <HAL_GetTick>
 80071d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80071d4:	e008      	b.n	80071e8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80071d6:	f7fa fdf3 	bl	8001dc0 <HAL_GetTick>
 80071da:	4602      	mov	r2, r0
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d901      	bls.n	80071e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e086      	b.n	80072f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80071e8:	4b45      	ldr	r3, [pc, #276]	; (8007300 <RCCEx_PLL2_Config+0x15c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1f0      	bne.n	80071d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80071f4:	4b42      	ldr	r3, [pc, #264]	; (8007300 <RCCEx_PLL2_Config+0x15c>)
 80071f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	031b      	lsls	r3, r3, #12
 8007202:	493f      	ldr	r1, [pc, #252]	; (8007300 <RCCEx_PLL2_Config+0x15c>)
 8007204:	4313      	orrs	r3, r2
 8007206:	628b      	str	r3, [r1, #40]	; 0x28
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	3b01      	subs	r3, #1
 800720e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	3b01      	subs	r3, #1
 8007218:	025b      	lsls	r3, r3, #9
 800721a:	b29b      	uxth	r3, r3
 800721c:	431a      	orrs	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	3b01      	subs	r3, #1
 8007224:	041b      	lsls	r3, r3, #16
 8007226:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800722a:	431a      	orrs	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	3b01      	subs	r3, #1
 8007232:	061b      	lsls	r3, r3, #24
 8007234:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007238:	4931      	ldr	r1, [pc, #196]	; (8007300 <RCCEx_PLL2_Config+0x15c>)
 800723a:	4313      	orrs	r3, r2
 800723c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800723e:	4b30      	ldr	r3, [pc, #192]	; (8007300 <RCCEx_PLL2_Config+0x15c>)
 8007240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007242:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	492d      	ldr	r1, [pc, #180]	; (8007300 <RCCEx_PLL2_Config+0x15c>)
 800724c:	4313      	orrs	r3, r2
 800724e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007250:	4b2b      	ldr	r3, [pc, #172]	; (8007300 <RCCEx_PLL2_Config+0x15c>)
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	f023 0220 	bic.w	r2, r3, #32
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	4928      	ldr	r1, [pc, #160]	; (8007300 <RCCEx_PLL2_Config+0x15c>)
 800725e:	4313      	orrs	r3, r2
 8007260:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007262:	4b27      	ldr	r3, [pc, #156]	; (8007300 <RCCEx_PLL2_Config+0x15c>)
 8007264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007266:	4a26      	ldr	r2, [pc, #152]	; (8007300 <RCCEx_PLL2_Config+0x15c>)
 8007268:	f023 0310 	bic.w	r3, r3, #16
 800726c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800726e:	4b24      	ldr	r3, [pc, #144]	; (8007300 <RCCEx_PLL2_Config+0x15c>)
 8007270:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007272:	4b24      	ldr	r3, [pc, #144]	; (8007304 <RCCEx_PLL2_Config+0x160>)
 8007274:	4013      	ands	r3, r2
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	69d2      	ldr	r2, [r2, #28]
 800727a:	00d2      	lsls	r2, r2, #3
 800727c:	4920      	ldr	r1, [pc, #128]	; (8007300 <RCCEx_PLL2_Config+0x15c>)
 800727e:	4313      	orrs	r3, r2
 8007280:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007282:	4b1f      	ldr	r3, [pc, #124]	; (8007300 <RCCEx_PLL2_Config+0x15c>)
 8007284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007286:	4a1e      	ldr	r2, [pc, #120]	; (8007300 <RCCEx_PLL2_Config+0x15c>)
 8007288:	f043 0310 	orr.w	r3, r3, #16
 800728c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d106      	bne.n	80072a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007294:	4b1a      	ldr	r3, [pc, #104]	; (8007300 <RCCEx_PLL2_Config+0x15c>)
 8007296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007298:	4a19      	ldr	r2, [pc, #100]	; (8007300 <RCCEx_PLL2_Config+0x15c>)
 800729a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800729e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80072a0:	e00f      	b.n	80072c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d106      	bne.n	80072b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80072a8:	4b15      	ldr	r3, [pc, #84]	; (8007300 <RCCEx_PLL2_Config+0x15c>)
 80072aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ac:	4a14      	ldr	r2, [pc, #80]	; (8007300 <RCCEx_PLL2_Config+0x15c>)
 80072ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80072b4:	e005      	b.n	80072c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80072b6:	4b12      	ldr	r3, [pc, #72]	; (8007300 <RCCEx_PLL2_Config+0x15c>)
 80072b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ba:	4a11      	ldr	r2, [pc, #68]	; (8007300 <RCCEx_PLL2_Config+0x15c>)
 80072bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80072c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80072c2:	4b0f      	ldr	r3, [pc, #60]	; (8007300 <RCCEx_PLL2_Config+0x15c>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a0e      	ldr	r2, [pc, #56]	; (8007300 <RCCEx_PLL2_Config+0x15c>)
 80072c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80072cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072ce:	f7fa fd77 	bl	8001dc0 <HAL_GetTick>
 80072d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80072d4:	e008      	b.n	80072e8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80072d6:	f7fa fd73 	bl	8001dc0 <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d901      	bls.n	80072e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e006      	b.n	80072f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80072e8:	4b05      	ldr	r3, [pc, #20]	; (8007300 <RCCEx_PLL2_Config+0x15c>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0f0      	beq.n	80072d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80072f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	58024400 	.word	0x58024400
 8007304:	ffff0007 	.word	0xffff0007

08007308 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007316:	4b53      	ldr	r3, [pc, #332]	; (8007464 <RCCEx_PLL3_Config+0x15c>)
 8007318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731a:	f003 0303 	and.w	r3, r3, #3
 800731e:	2b03      	cmp	r3, #3
 8007320:	d101      	bne.n	8007326 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e099      	b.n	800745a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007326:	4b4f      	ldr	r3, [pc, #316]	; (8007464 <RCCEx_PLL3_Config+0x15c>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a4e      	ldr	r2, [pc, #312]	; (8007464 <RCCEx_PLL3_Config+0x15c>)
 800732c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007330:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007332:	f7fa fd45 	bl	8001dc0 <HAL_GetTick>
 8007336:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007338:	e008      	b.n	800734c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800733a:	f7fa fd41 	bl	8001dc0 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	2b02      	cmp	r3, #2
 8007346:	d901      	bls.n	800734c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e086      	b.n	800745a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800734c:	4b45      	ldr	r3, [pc, #276]	; (8007464 <RCCEx_PLL3_Config+0x15c>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1f0      	bne.n	800733a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007358:	4b42      	ldr	r3, [pc, #264]	; (8007464 <RCCEx_PLL3_Config+0x15c>)
 800735a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	051b      	lsls	r3, r3, #20
 8007366:	493f      	ldr	r1, [pc, #252]	; (8007464 <RCCEx_PLL3_Config+0x15c>)
 8007368:	4313      	orrs	r3, r2
 800736a:	628b      	str	r3, [r1, #40]	; 0x28
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	3b01      	subs	r3, #1
 8007372:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	3b01      	subs	r3, #1
 800737c:	025b      	lsls	r3, r3, #9
 800737e:	b29b      	uxth	r3, r3
 8007380:	431a      	orrs	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	3b01      	subs	r3, #1
 8007388:	041b      	lsls	r3, r3, #16
 800738a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800738e:	431a      	orrs	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	3b01      	subs	r3, #1
 8007396:	061b      	lsls	r3, r3, #24
 8007398:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800739c:	4931      	ldr	r1, [pc, #196]	; (8007464 <RCCEx_PLL3_Config+0x15c>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80073a2:	4b30      	ldr	r3, [pc, #192]	; (8007464 <RCCEx_PLL3_Config+0x15c>)
 80073a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	492d      	ldr	r1, [pc, #180]	; (8007464 <RCCEx_PLL3_Config+0x15c>)
 80073b0:	4313      	orrs	r3, r2
 80073b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80073b4:	4b2b      	ldr	r3, [pc, #172]	; (8007464 <RCCEx_PLL3_Config+0x15c>)
 80073b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	4928      	ldr	r1, [pc, #160]	; (8007464 <RCCEx_PLL3_Config+0x15c>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80073c6:	4b27      	ldr	r3, [pc, #156]	; (8007464 <RCCEx_PLL3_Config+0x15c>)
 80073c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ca:	4a26      	ldr	r2, [pc, #152]	; (8007464 <RCCEx_PLL3_Config+0x15c>)
 80073cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80073d2:	4b24      	ldr	r3, [pc, #144]	; (8007464 <RCCEx_PLL3_Config+0x15c>)
 80073d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073d6:	4b24      	ldr	r3, [pc, #144]	; (8007468 <RCCEx_PLL3_Config+0x160>)
 80073d8:	4013      	ands	r3, r2
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	69d2      	ldr	r2, [r2, #28]
 80073de:	00d2      	lsls	r2, r2, #3
 80073e0:	4920      	ldr	r1, [pc, #128]	; (8007464 <RCCEx_PLL3_Config+0x15c>)
 80073e2:	4313      	orrs	r3, r2
 80073e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80073e6:	4b1f      	ldr	r3, [pc, #124]	; (8007464 <RCCEx_PLL3_Config+0x15c>)
 80073e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ea:	4a1e      	ldr	r2, [pc, #120]	; (8007464 <RCCEx_PLL3_Config+0x15c>)
 80073ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d106      	bne.n	8007406 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80073f8:	4b1a      	ldr	r3, [pc, #104]	; (8007464 <RCCEx_PLL3_Config+0x15c>)
 80073fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fc:	4a19      	ldr	r2, [pc, #100]	; (8007464 <RCCEx_PLL3_Config+0x15c>)
 80073fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007402:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007404:	e00f      	b.n	8007426 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d106      	bne.n	800741a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800740c:	4b15      	ldr	r3, [pc, #84]	; (8007464 <RCCEx_PLL3_Config+0x15c>)
 800740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007410:	4a14      	ldr	r2, [pc, #80]	; (8007464 <RCCEx_PLL3_Config+0x15c>)
 8007412:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007416:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007418:	e005      	b.n	8007426 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800741a:	4b12      	ldr	r3, [pc, #72]	; (8007464 <RCCEx_PLL3_Config+0x15c>)
 800741c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741e:	4a11      	ldr	r2, [pc, #68]	; (8007464 <RCCEx_PLL3_Config+0x15c>)
 8007420:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007424:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007426:	4b0f      	ldr	r3, [pc, #60]	; (8007464 <RCCEx_PLL3_Config+0x15c>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a0e      	ldr	r2, [pc, #56]	; (8007464 <RCCEx_PLL3_Config+0x15c>)
 800742c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007432:	f7fa fcc5 	bl	8001dc0 <HAL_GetTick>
 8007436:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007438:	e008      	b.n	800744c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800743a:	f7fa fcc1 	bl	8001dc0 <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	2b02      	cmp	r3, #2
 8007446:	d901      	bls.n	800744c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e006      	b.n	800745a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800744c:	4b05      	ldr	r3, [pc, #20]	; (8007464 <RCCEx_PLL3_Config+0x15c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d0f0      	beq.n	800743a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007458:	7bfb      	ldrb	r3, [r7, #15]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	58024400 	.word	0x58024400
 8007468:	ffff0007 	.word	0xffff0007

0800746c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e049      	b.n	8007512 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d106      	bne.n	8007498 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7fa f984 	bl	80017a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2202      	movs	r2, #2
 800749c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	3304      	adds	r3, #4
 80074a8:	4619      	mov	r1, r3
 80074aa:	4610      	mov	r0, r2
 80074ac:	f000 fdc6 	bl	800803c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
	...

0800751c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d109      	bne.n	8007540 <HAL_TIM_PWM_Start+0x24>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2b01      	cmp	r3, #1
 8007536:	bf14      	ite	ne
 8007538:	2301      	movne	r3, #1
 800753a:	2300      	moveq	r3, #0
 800753c:	b2db      	uxtb	r3, r3
 800753e:	e03c      	b.n	80075ba <HAL_TIM_PWM_Start+0x9e>
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	2b04      	cmp	r3, #4
 8007544:	d109      	bne.n	800755a <HAL_TIM_PWM_Start+0x3e>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b01      	cmp	r3, #1
 8007550:	bf14      	ite	ne
 8007552:	2301      	movne	r3, #1
 8007554:	2300      	moveq	r3, #0
 8007556:	b2db      	uxtb	r3, r3
 8007558:	e02f      	b.n	80075ba <HAL_TIM_PWM_Start+0x9e>
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	2b08      	cmp	r3, #8
 800755e:	d109      	bne.n	8007574 <HAL_TIM_PWM_Start+0x58>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b01      	cmp	r3, #1
 800756a:	bf14      	ite	ne
 800756c:	2301      	movne	r3, #1
 800756e:	2300      	moveq	r3, #0
 8007570:	b2db      	uxtb	r3, r3
 8007572:	e022      	b.n	80075ba <HAL_TIM_PWM_Start+0x9e>
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2b0c      	cmp	r3, #12
 8007578:	d109      	bne.n	800758e <HAL_TIM_PWM_Start+0x72>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b01      	cmp	r3, #1
 8007584:	bf14      	ite	ne
 8007586:	2301      	movne	r3, #1
 8007588:	2300      	moveq	r3, #0
 800758a:	b2db      	uxtb	r3, r3
 800758c:	e015      	b.n	80075ba <HAL_TIM_PWM_Start+0x9e>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b10      	cmp	r3, #16
 8007592:	d109      	bne.n	80075a8 <HAL_TIM_PWM_Start+0x8c>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b01      	cmp	r3, #1
 800759e:	bf14      	ite	ne
 80075a0:	2301      	movne	r3, #1
 80075a2:	2300      	moveq	r3, #0
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	e008      	b.n	80075ba <HAL_TIM_PWM_Start+0x9e>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	bf14      	ite	ne
 80075b4:	2301      	movne	r3, #1
 80075b6:	2300      	moveq	r3, #0
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e0a1      	b.n	8007706 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d104      	bne.n	80075d2 <HAL_TIM_PWM_Start+0xb6>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2202      	movs	r2, #2
 80075cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075d0:	e023      	b.n	800761a <HAL_TIM_PWM_Start+0xfe>
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b04      	cmp	r3, #4
 80075d6:	d104      	bne.n	80075e2 <HAL_TIM_PWM_Start+0xc6>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2202      	movs	r2, #2
 80075dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075e0:	e01b      	b.n	800761a <HAL_TIM_PWM_Start+0xfe>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d104      	bne.n	80075f2 <HAL_TIM_PWM_Start+0xd6>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2202      	movs	r2, #2
 80075ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075f0:	e013      	b.n	800761a <HAL_TIM_PWM_Start+0xfe>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b0c      	cmp	r3, #12
 80075f6:	d104      	bne.n	8007602 <HAL_TIM_PWM_Start+0xe6>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2202      	movs	r2, #2
 80075fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007600:	e00b      	b.n	800761a <HAL_TIM_PWM_Start+0xfe>
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b10      	cmp	r3, #16
 8007606:	d104      	bne.n	8007612 <HAL_TIM_PWM_Start+0xf6>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2202      	movs	r2, #2
 800760c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007610:	e003      	b.n	800761a <HAL_TIM_PWM_Start+0xfe>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2202      	movs	r2, #2
 8007616:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2201      	movs	r2, #1
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	4618      	mov	r0, r3
 8007624:	f001 f886 	bl	8008734 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a38      	ldr	r2, [pc, #224]	; (8007710 <HAL_TIM_PWM_Start+0x1f4>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d013      	beq.n	800765a <HAL_TIM_PWM_Start+0x13e>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a37      	ldr	r2, [pc, #220]	; (8007714 <HAL_TIM_PWM_Start+0x1f8>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d00e      	beq.n	800765a <HAL_TIM_PWM_Start+0x13e>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a35      	ldr	r2, [pc, #212]	; (8007718 <HAL_TIM_PWM_Start+0x1fc>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d009      	beq.n	800765a <HAL_TIM_PWM_Start+0x13e>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a34      	ldr	r2, [pc, #208]	; (800771c <HAL_TIM_PWM_Start+0x200>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d004      	beq.n	800765a <HAL_TIM_PWM_Start+0x13e>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a32      	ldr	r2, [pc, #200]	; (8007720 <HAL_TIM_PWM_Start+0x204>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d101      	bne.n	800765e <HAL_TIM_PWM_Start+0x142>
 800765a:	2301      	movs	r3, #1
 800765c:	e000      	b.n	8007660 <HAL_TIM_PWM_Start+0x144>
 800765e:	2300      	movs	r3, #0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d007      	beq.n	8007674 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007672:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a25      	ldr	r2, [pc, #148]	; (8007710 <HAL_TIM_PWM_Start+0x1f4>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d022      	beq.n	80076c4 <HAL_TIM_PWM_Start+0x1a8>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007686:	d01d      	beq.n	80076c4 <HAL_TIM_PWM_Start+0x1a8>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a25      	ldr	r2, [pc, #148]	; (8007724 <HAL_TIM_PWM_Start+0x208>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d018      	beq.n	80076c4 <HAL_TIM_PWM_Start+0x1a8>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a24      	ldr	r2, [pc, #144]	; (8007728 <HAL_TIM_PWM_Start+0x20c>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d013      	beq.n	80076c4 <HAL_TIM_PWM_Start+0x1a8>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a22      	ldr	r2, [pc, #136]	; (800772c <HAL_TIM_PWM_Start+0x210>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d00e      	beq.n	80076c4 <HAL_TIM_PWM_Start+0x1a8>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a1a      	ldr	r2, [pc, #104]	; (8007714 <HAL_TIM_PWM_Start+0x1f8>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d009      	beq.n	80076c4 <HAL_TIM_PWM_Start+0x1a8>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a1e      	ldr	r2, [pc, #120]	; (8007730 <HAL_TIM_PWM_Start+0x214>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d004      	beq.n	80076c4 <HAL_TIM_PWM_Start+0x1a8>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a16      	ldr	r2, [pc, #88]	; (8007718 <HAL_TIM_PWM_Start+0x1fc>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d115      	bne.n	80076f0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689a      	ldr	r2, [r3, #8]
 80076ca:	4b1a      	ldr	r3, [pc, #104]	; (8007734 <HAL_TIM_PWM_Start+0x218>)
 80076cc:	4013      	ands	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2b06      	cmp	r3, #6
 80076d4:	d015      	beq.n	8007702 <HAL_TIM_PWM_Start+0x1e6>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076dc:	d011      	beq.n	8007702 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f042 0201 	orr.w	r2, r2, #1
 80076ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ee:	e008      	b.n	8007702 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f042 0201 	orr.w	r2, r2, #1
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	e000      	b.n	8007704 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007702:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	40010000 	.word	0x40010000
 8007714:	40010400 	.word	0x40010400
 8007718:	40014000 	.word	0x40014000
 800771c:	40014400 	.word	0x40014400
 8007720:	40014800 	.word	0x40014800
 8007724:	40000400 	.word	0x40000400
 8007728:	40000800 	.word	0x40000800
 800772c:	40000c00 	.word	0x40000c00
 8007730:	40001800 	.word	0x40001800
 8007734:	00010007 	.word	0x00010007

08007738 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d109      	bne.n	8007760 <HAL_TIM_PWM_Start_IT+0x28>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b01      	cmp	r3, #1
 8007756:	bf14      	ite	ne
 8007758:	2301      	movne	r3, #1
 800775a:	2300      	moveq	r3, #0
 800775c:	b2db      	uxtb	r3, r3
 800775e:	e03c      	b.n	80077da <HAL_TIM_PWM_Start_IT+0xa2>
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	2b04      	cmp	r3, #4
 8007764:	d109      	bne.n	800777a <HAL_TIM_PWM_Start_IT+0x42>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b01      	cmp	r3, #1
 8007770:	bf14      	ite	ne
 8007772:	2301      	movne	r3, #1
 8007774:	2300      	moveq	r3, #0
 8007776:	b2db      	uxtb	r3, r3
 8007778:	e02f      	b.n	80077da <HAL_TIM_PWM_Start_IT+0xa2>
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b08      	cmp	r3, #8
 800777e:	d109      	bne.n	8007794 <HAL_TIM_PWM_Start_IT+0x5c>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007786:	b2db      	uxtb	r3, r3
 8007788:	2b01      	cmp	r3, #1
 800778a:	bf14      	ite	ne
 800778c:	2301      	movne	r3, #1
 800778e:	2300      	moveq	r3, #0
 8007790:	b2db      	uxtb	r3, r3
 8007792:	e022      	b.n	80077da <HAL_TIM_PWM_Start_IT+0xa2>
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2b0c      	cmp	r3, #12
 8007798:	d109      	bne.n	80077ae <HAL_TIM_PWM_Start_IT+0x76>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	bf14      	ite	ne
 80077a6:	2301      	movne	r3, #1
 80077a8:	2300      	moveq	r3, #0
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	e015      	b.n	80077da <HAL_TIM_PWM_Start_IT+0xa2>
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	2b10      	cmp	r3, #16
 80077b2:	d109      	bne.n	80077c8 <HAL_TIM_PWM_Start_IT+0x90>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b01      	cmp	r3, #1
 80077be:	bf14      	ite	ne
 80077c0:	2301      	movne	r3, #1
 80077c2:	2300      	moveq	r3, #0
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	e008      	b.n	80077da <HAL_TIM_PWM_Start_IT+0xa2>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	bf14      	ite	ne
 80077d4:	2301      	movne	r3, #1
 80077d6:	2300      	moveq	r3, #0
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d001      	beq.n	80077e2 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e0ec      	b.n	80079bc <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d104      	bne.n	80077f2 <HAL_TIM_PWM_Start_IT+0xba>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077f0:	e023      	b.n	800783a <HAL_TIM_PWM_Start_IT+0x102>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b04      	cmp	r3, #4
 80077f6:	d104      	bne.n	8007802 <HAL_TIM_PWM_Start_IT+0xca>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2202      	movs	r2, #2
 80077fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007800:	e01b      	b.n	800783a <HAL_TIM_PWM_Start_IT+0x102>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b08      	cmp	r3, #8
 8007806:	d104      	bne.n	8007812 <HAL_TIM_PWM_Start_IT+0xda>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2202      	movs	r2, #2
 800780c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007810:	e013      	b.n	800783a <HAL_TIM_PWM_Start_IT+0x102>
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	2b0c      	cmp	r3, #12
 8007816:	d104      	bne.n	8007822 <HAL_TIM_PWM_Start_IT+0xea>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2202      	movs	r2, #2
 800781c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007820:	e00b      	b.n	800783a <HAL_TIM_PWM_Start_IT+0x102>
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2b10      	cmp	r3, #16
 8007826:	d104      	bne.n	8007832 <HAL_TIM_PWM_Start_IT+0xfa>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2202      	movs	r2, #2
 800782c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007830:	e003      	b.n	800783a <HAL_TIM_PWM_Start_IT+0x102>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2202      	movs	r2, #2
 8007836:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	2b0c      	cmp	r3, #12
 800783e:	d841      	bhi.n	80078c4 <HAL_TIM_PWM_Start_IT+0x18c>
 8007840:	a201      	add	r2, pc, #4	; (adr r2, 8007848 <HAL_TIM_PWM_Start_IT+0x110>)
 8007842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007846:	bf00      	nop
 8007848:	0800787d 	.word	0x0800787d
 800784c:	080078c5 	.word	0x080078c5
 8007850:	080078c5 	.word	0x080078c5
 8007854:	080078c5 	.word	0x080078c5
 8007858:	0800788f 	.word	0x0800788f
 800785c:	080078c5 	.word	0x080078c5
 8007860:	080078c5 	.word	0x080078c5
 8007864:	080078c5 	.word	0x080078c5
 8007868:	080078a1 	.word	0x080078a1
 800786c:	080078c5 	.word	0x080078c5
 8007870:	080078c5 	.word	0x080078c5
 8007874:	080078c5 	.word	0x080078c5
 8007878:	080078b3 	.word	0x080078b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68da      	ldr	r2, [r3, #12]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f042 0202 	orr.w	r2, r2, #2
 800788a:	60da      	str	r2, [r3, #12]
      break;
 800788c:	e01d      	b.n	80078ca <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68da      	ldr	r2, [r3, #12]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f042 0204 	orr.w	r2, r2, #4
 800789c:	60da      	str	r2, [r3, #12]
      break;
 800789e:	e014      	b.n	80078ca <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68da      	ldr	r2, [r3, #12]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f042 0208 	orr.w	r2, r2, #8
 80078ae:	60da      	str	r2, [r3, #12]
      break;
 80078b0:	e00b      	b.n	80078ca <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68da      	ldr	r2, [r3, #12]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f042 0210 	orr.w	r2, r2, #16
 80078c0:	60da      	str	r2, [r3, #12]
      break;
 80078c2:	e002      	b.n	80078ca <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	73fb      	strb	r3, [r7, #15]
      break;
 80078c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d174      	bne.n	80079ba <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2201      	movs	r2, #1
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	4618      	mov	r0, r3
 80078da:	f000 ff2b 	bl	8008734 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a38      	ldr	r2, [pc, #224]	; (80079c4 <HAL_TIM_PWM_Start_IT+0x28c>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d013      	beq.n	8007910 <HAL_TIM_PWM_Start_IT+0x1d8>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a36      	ldr	r2, [pc, #216]	; (80079c8 <HAL_TIM_PWM_Start_IT+0x290>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00e      	beq.n	8007910 <HAL_TIM_PWM_Start_IT+0x1d8>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a35      	ldr	r2, [pc, #212]	; (80079cc <HAL_TIM_PWM_Start_IT+0x294>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d009      	beq.n	8007910 <HAL_TIM_PWM_Start_IT+0x1d8>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a33      	ldr	r2, [pc, #204]	; (80079d0 <HAL_TIM_PWM_Start_IT+0x298>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d004      	beq.n	8007910 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a32      	ldr	r2, [pc, #200]	; (80079d4 <HAL_TIM_PWM_Start_IT+0x29c>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d101      	bne.n	8007914 <HAL_TIM_PWM_Start_IT+0x1dc>
 8007910:	2301      	movs	r3, #1
 8007912:	e000      	b.n	8007916 <HAL_TIM_PWM_Start_IT+0x1de>
 8007914:	2300      	movs	r3, #0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d007      	beq.n	800792a <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007928:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a25      	ldr	r2, [pc, #148]	; (80079c4 <HAL_TIM_PWM_Start_IT+0x28c>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d022      	beq.n	800797a <HAL_TIM_PWM_Start_IT+0x242>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800793c:	d01d      	beq.n	800797a <HAL_TIM_PWM_Start_IT+0x242>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a25      	ldr	r2, [pc, #148]	; (80079d8 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d018      	beq.n	800797a <HAL_TIM_PWM_Start_IT+0x242>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a23      	ldr	r2, [pc, #140]	; (80079dc <HAL_TIM_PWM_Start_IT+0x2a4>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d013      	beq.n	800797a <HAL_TIM_PWM_Start_IT+0x242>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a22      	ldr	r2, [pc, #136]	; (80079e0 <HAL_TIM_PWM_Start_IT+0x2a8>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d00e      	beq.n	800797a <HAL_TIM_PWM_Start_IT+0x242>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a19      	ldr	r2, [pc, #100]	; (80079c8 <HAL_TIM_PWM_Start_IT+0x290>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d009      	beq.n	800797a <HAL_TIM_PWM_Start_IT+0x242>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a1e      	ldr	r2, [pc, #120]	; (80079e4 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d004      	beq.n	800797a <HAL_TIM_PWM_Start_IT+0x242>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a15      	ldr	r2, [pc, #84]	; (80079cc <HAL_TIM_PWM_Start_IT+0x294>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d115      	bne.n	80079a6 <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	4b19      	ldr	r3, [pc, #100]	; (80079e8 <HAL_TIM_PWM_Start_IT+0x2b0>)
 8007982:	4013      	ands	r3, r2
 8007984:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2b06      	cmp	r3, #6
 800798a:	d015      	beq.n	80079b8 <HAL_TIM_PWM_Start_IT+0x280>
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007992:	d011      	beq.n	80079b8 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f042 0201 	orr.w	r2, r2, #1
 80079a2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079a4:	e008      	b.n	80079b8 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f042 0201 	orr.w	r2, r2, #1
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	e000      	b.n	80079ba <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	40010000 	.word	0x40010000
 80079c8:	40010400 	.word	0x40010400
 80079cc:	40014000 	.word	0x40014000
 80079d0:	40014400 	.word	0x40014400
 80079d4:	40014800 	.word	0x40014800
 80079d8:	40000400 	.word	0x40000400
 80079dc:	40000800 	.word	0x40000800
 80079e0:	40000c00 	.word	0x40000c00
 80079e4:	40001800 	.word	0x40001800
 80079e8:	00010007 	.word	0x00010007

080079ec <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079f6:	2300      	movs	r3, #0
 80079f8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b0c      	cmp	r3, #12
 80079fe:	d841      	bhi.n	8007a84 <HAL_TIM_PWM_Stop_IT+0x98>
 8007a00:	a201      	add	r2, pc, #4	; (adr r2, 8007a08 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8007a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a06:	bf00      	nop
 8007a08:	08007a3d 	.word	0x08007a3d
 8007a0c:	08007a85 	.word	0x08007a85
 8007a10:	08007a85 	.word	0x08007a85
 8007a14:	08007a85 	.word	0x08007a85
 8007a18:	08007a4f 	.word	0x08007a4f
 8007a1c:	08007a85 	.word	0x08007a85
 8007a20:	08007a85 	.word	0x08007a85
 8007a24:	08007a85 	.word	0x08007a85
 8007a28:	08007a61 	.word	0x08007a61
 8007a2c:	08007a85 	.word	0x08007a85
 8007a30:	08007a85 	.word	0x08007a85
 8007a34:	08007a85 	.word	0x08007a85
 8007a38:	08007a73 	.word	0x08007a73
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68da      	ldr	r2, [r3, #12]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f022 0202 	bic.w	r2, r2, #2
 8007a4a:	60da      	str	r2, [r3, #12]
      break;
 8007a4c:	e01d      	b.n	8007a8a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68da      	ldr	r2, [r3, #12]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f022 0204 	bic.w	r2, r2, #4
 8007a5c:	60da      	str	r2, [r3, #12]
      break;
 8007a5e:	e014      	b.n	8007a8a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68da      	ldr	r2, [r3, #12]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f022 0208 	bic.w	r2, r2, #8
 8007a6e:	60da      	str	r2, [r3, #12]
      break;
 8007a70:	e00b      	b.n	8007a8a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68da      	ldr	r2, [r3, #12]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f022 0210 	bic.w	r2, r2, #16
 8007a80:	60da      	str	r2, [r3, #12]
      break;
 8007a82:	e002      	b.n	8007a8a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	73fb      	strb	r3, [r7, #15]
      break;
 8007a88:	bf00      	nop
  }

  if (status == HAL_OK)
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f040 8081 	bne.w	8007b94 <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2200      	movs	r2, #0
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 fe4a 	bl	8008734 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a3e      	ldr	r2, [pc, #248]	; (8007ba0 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d013      	beq.n	8007ad2 <HAL_TIM_PWM_Stop_IT+0xe6>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a3d      	ldr	r2, [pc, #244]	; (8007ba4 <HAL_TIM_PWM_Stop_IT+0x1b8>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d00e      	beq.n	8007ad2 <HAL_TIM_PWM_Stop_IT+0xe6>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a3b      	ldr	r2, [pc, #236]	; (8007ba8 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d009      	beq.n	8007ad2 <HAL_TIM_PWM_Stop_IT+0xe6>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a3a      	ldr	r2, [pc, #232]	; (8007bac <HAL_TIM_PWM_Stop_IT+0x1c0>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d004      	beq.n	8007ad2 <HAL_TIM_PWM_Stop_IT+0xe6>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a38      	ldr	r2, [pc, #224]	; (8007bb0 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d101      	bne.n	8007ad6 <HAL_TIM_PWM_Stop_IT+0xea>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e000      	b.n	8007ad8 <HAL_TIM_PWM_Stop_IT+0xec>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d017      	beq.n	8007b0c <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6a1a      	ldr	r2, [r3, #32]
 8007ae2:	f241 1311 	movw	r3, #4369	; 0x1111
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10f      	bne.n	8007b0c <HAL_TIM_PWM_Stop_IT+0x120>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6a1a      	ldr	r2, [r3, #32]
 8007af2:	f240 4344 	movw	r3, #1092	; 0x444
 8007af6:	4013      	ands	r3, r2
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d107      	bne.n	8007b0c <HAL_TIM_PWM_Stop_IT+0x120>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b0a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6a1a      	ldr	r2, [r3, #32]
 8007b12:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b16:	4013      	ands	r3, r2
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10f      	bne.n	8007b3c <HAL_TIM_PWM_Stop_IT+0x150>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	6a1a      	ldr	r2, [r3, #32]
 8007b22:	f240 4344 	movw	r3, #1092	; 0x444
 8007b26:	4013      	ands	r3, r2
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d107      	bne.n	8007b3c <HAL_TIM_PWM_Stop_IT+0x150>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f022 0201 	bic.w	r2, r2, #1
 8007b3a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d104      	bne.n	8007b4c <HAL_TIM_PWM_Stop_IT+0x160>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b4a:	e023      	b.n	8007b94 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	2b04      	cmp	r3, #4
 8007b50:	d104      	bne.n	8007b5c <HAL_TIM_PWM_Stop_IT+0x170>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b5a:	e01b      	b.n	8007b94 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2b08      	cmp	r3, #8
 8007b60:	d104      	bne.n	8007b6c <HAL_TIM_PWM_Stop_IT+0x180>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2201      	movs	r2, #1
 8007b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b6a:	e013      	b.n	8007b94 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	2b0c      	cmp	r3, #12
 8007b70:	d104      	bne.n	8007b7c <HAL_TIM_PWM_Stop_IT+0x190>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b7a:	e00b      	b.n	8007b94 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	2b10      	cmp	r3, #16
 8007b80:	d104      	bne.n	8007b8c <HAL_TIM_PWM_Stop_IT+0x1a0>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b8a:	e003      	b.n	8007b94 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8007b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	40010000 	.word	0x40010000
 8007ba4:	40010400 	.word	0x40010400
 8007ba8:	40014000 	.word	0x40014000
 8007bac:	40014400 	.word	0x40014400
 8007bb0:	40014800 	.word	0x40014800

08007bb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	f003 0302 	and.w	r3, r3, #2
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d020      	beq.n	8007c18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f003 0302 	and.w	r3, r3, #2
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d01b      	beq.n	8007c18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f06f 0202 	mvn.w	r2, #2
 8007be8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	f003 0303 	and.w	r3, r3, #3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d003      	beq.n	8007c06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fa08 	bl	8008014 <HAL_TIM_IC_CaptureCallback>
 8007c04:	e005      	b.n	8007c12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f9fa 	bl	8008000 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f7f8 fde5 	bl	80007dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f003 0304 	and.w	r3, r3, #4
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d020      	beq.n	8007c64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f003 0304 	and.w	r3, r3, #4
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d01b      	beq.n	8007c64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f06f 0204 	mvn.w	r2, #4
 8007c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2202      	movs	r2, #2
 8007c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d003      	beq.n	8007c52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f9e2 	bl	8008014 <HAL_TIM_IC_CaptureCallback>
 8007c50:	e005      	b.n	8007c5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f9d4 	bl	8008000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f7f8 fdbf 	bl	80007dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	f003 0308 	and.w	r3, r3, #8
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d020      	beq.n	8007cb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f003 0308 	and.w	r3, r3, #8
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d01b      	beq.n	8007cb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f06f 0208 	mvn.w	r2, #8
 8007c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2204      	movs	r2, #4
 8007c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	f003 0303 	and.w	r3, r3, #3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d003      	beq.n	8007c9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f9bc 	bl	8008014 <HAL_TIM_IC_CaptureCallback>
 8007c9c:	e005      	b.n	8007caa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f9ae 	bl	8008000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f7f8 fd99 	bl	80007dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	f003 0310 	and.w	r3, r3, #16
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d020      	beq.n	8007cfc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f003 0310 	and.w	r3, r3, #16
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d01b      	beq.n	8007cfc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f06f 0210 	mvn.w	r2, #16
 8007ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2208      	movs	r2, #8
 8007cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d003      	beq.n	8007cea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f996 	bl	8008014 <HAL_TIM_IC_CaptureCallback>
 8007ce8:	e005      	b.n	8007cf6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f988 	bl	8008000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7f8 fd73 	bl	80007dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00c      	beq.n	8007d20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f003 0301 	and.w	r3, r3, #1
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d007      	beq.n	8007d20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f06f 0201 	mvn.w	r2, #1
 8007d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f966 	bl	8007fec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d104      	bne.n	8007d34 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00c      	beq.n	8007d4e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d007      	beq.n	8007d4e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8007d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 fdb1 	bl	80088b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00c      	beq.n	8007d72 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d007      	beq.n	8007d72 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fda9 	bl	80088c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00c      	beq.n	8007d96 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d007      	beq.n	8007d96 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f949 	bl	8008028 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	f003 0320 	and.w	r3, r3, #32
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00c      	beq.n	8007dba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f003 0320 	and.w	r3, r3, #32
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d007      	beq.n	8007dba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f06f 0220 	mvn.w	r2, #32
 8007db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fd71 	bl	800889c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dba:	bf00      	nop
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
	...

08007dc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d101      	bne.n	8007de2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007dde:	2302      	movs	r3, #2
 8007de0:	e0ff      	b.n	8007fe2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2b14      	cmp	r3, #20
 8007dee:	f200 80f0 	bhi.w	8007fd2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007df2:	a201      	add	r2, pc, #4	; (adr r2, 8007df8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df8:	08007e4d 	.word	0x08007e4d
 8007dfc:	08007fd3 	.word	0x08007fd3
 8007e00:	08007fd3 	.word	0x08007fd3
 8007e04:	08007fd3 	.word	0x08007fd3
 8007e08:	08007e8d 	.word	0x08007e8d
 8007e0c:	08007fd3 	.word	0x08007fd3
 8007e10:	08007fd3 	.word	0x08007fd3
 8007e14:	08007fd3 	.word	0x08007fd3
 8007e18:	08007ecf 	.word	0x08007ecf
 8007e1c:	08007fd3 	.word	0x08007fd3
 8007e20:	08007fd3 	.word	0x08007fd3
 8007e24:	08007fd3 	.word	0x08007fd3
 8007e28:	08007f0f 	.word	0x08007f0f
 8007e2c:	08007fd3 	.word	0x08007fd3
 8007e30:	08007fd3 	.word	0x08007fd3
 8007e34:	08007fd3 	.word	0x08007fd3
 8007e38:	08007f51 	.word	0x08007f51
 8007e3c:	08007fd3 	.word	0x08007fd3
 8007e40:	08007fd3 	.word	0x08007fd3
 8007e44:	08007fd3 	.word	0x08007fd3
 8007e48:	08007f91 	.word	0x08007f91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68b9      	ldr	r1, [r7, #8]
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 f998 	bl	8008188 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	699a      	ldr	r2, [r3, #24]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f042 0208 	orr.w	r2, r2, #8
 8007e66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	699a      	ldr	r2, [r3, #24]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f022 0204 	bic.w	r2, r2, #4
 8007e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6999      	ldr	r1, [r3, #24]
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	691a      	ldr	r2, [r3, #16]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	619a      	str	r2, [r3, #24]
      break;
 8007e8a:	e0a5      	b.n	8007fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68b9      	ldr	r1, [r7, #8]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 fa08 	bl	80082a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	699a      	ldr	r2, [r3, #24]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	699a      	ldr	r2, [r3, #24]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6999      	ldr	r1, [r3, #24]
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	021a      	lsls	r2, r3, #8
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	619a      	str	r2, [r3, #24]
      break;
 8007ecc:	e084      	b.n	8007fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68b9      	ldr	r1, [r7, #8]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f000 fa71 	bl	80083bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	69da      	ldr	r2, [r3, #28]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f042 0208 	orr.w	r2, r2, #8
 8007ee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	69da      	ldr	r2, [r3, #28]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f022 0204 	bic.w	r2, r2, #4
 8007ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	69d9      	ldr	r1, [r3, #28]
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	691a      	ldr	r2, [r3, #16]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	430a      	orrs	r2, r1
 8007f0a:	61da      	str	r2, [r3, #28]
      break;
 8007f0c:	e064      	b.n	8007fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68b9      	ldr	r1, [r7, #8]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 fad9 	bl	80084cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69da      	ldr	r2, [r3, #28]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	69da      	ldr	r2, [r3, #28]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	69d9      	ldr	r1, [r3, #28]
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	021a      	lsls	r2, r3, #8
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	61da      	str	r2, [r3, #28]
      break;
 8007f4e:	e043      	b.n	8007fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68b9      	ldr	r1, [r7, #8]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 fb22 	bl	80085a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f042 0208 	orr.w	r2, r2, #8
 8007f6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f022 0204 	bic.w	r2, r2, #4
 8007f7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	691a      	ldr	r2, [r3, #16]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	430a      	orrs	r2, r1
 8007f8c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007f8e:	e023      	b.n	8007fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68b9      	ldr	r1, [r7, #8]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 fb66 	bl	8008668 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007faa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	021a      	lsls	r2, r3, #8
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	430a      	orrs	r2, r1
 8007fce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007fd0:	e002      	b.n	8007fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	75fb      	strb	r3, [r7, #23]
      break;
 8007fd6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3718      	adds	r7, #24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop

08007fec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a46      	ldr	r2, [pc, #280]	; (8008168 <TIM_Base_SetConfig+0x12c>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d013      	beq.n	800807c <TIM_Base_SetConfig+0x40>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800805a:	d00f      	beq.n	800807c <TIM_Base_SetConfig+0x40>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a43      	ldr	r2, [pc, #268]	; (800816c <TIM_Base_SetConfig+0x130>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d00b      	beq.n	800807c <TIM_Base_SetConfig+0x40>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a42      	ldr	r2, [pc, #264]	; (8008170 <TIM_Base_SetConfig+0x134>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d007      	beq.n	800807c <TIM_Base_SetConfig+0x40>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a41      	ldr	r2, [pc, #260]	; (8008174 <TIM_Base_SetConfig+0x138>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d003      	beq.n	800807c <TIM_Base_SetConfig+0x40>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a40      	ldr	r2, [pc, #256]	; (8008178 <TIM_Base_SetConfig+0x13c>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d108      	bne.n	800808e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	4313      	orrs	r3, r2
 800808c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a35      	ldr	r2, [pc, #212]	; (8008168 <TIM_Base_SetConfig+0x12c>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d01f      	beq.n	80080d6 <TIM_Base_SetConfig+0x9a>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800809c:	d01b      	beq.n	80080d6 <TIM_Base_SetConfig+0x9a>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a32      	ldr	r2, [pc, #200]	; (800816c <TIM_Base_SetConfig+0x130>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d017      	beq.n	80080d6 <TIM_Base_SetConfig+0x9a>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a31      	ldr	r2, [pc, #196]	; (8008170 <TIM_Base_SetConfig+0x134>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d013      	beq.n	80080d6 <TIM_Base_SetConfig+0x9a>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a30      	ldr	r2, [pc, #192]	; (8008174 <TIM_Base_SetConfig+0x138>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d00f      	beq.n	80080d6 <TIM_Base_SetConfig+0x9a>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a2f      	ldr	r2, [pc, #188]	; (8008178 <TIM_Base_SetConfig+0x13c>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d00b      	beq.n	80080d6 <TIM_Base_SetConfig+0x9a>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a2e      	ldr	r2, [pc, #184]	; (800817c <TIM_Base_SetConfig+0x140>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d007      	beq.n	80080d6 <TIM_Base_SetConfig+0x9a>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a2d      	ldr	r2, [pc, #180]	; (8008180 <TIM_Base_SetConfig+0x144>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d003      	beq.n	80080d6 <TIM_Base_SetConfig+0x9a>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a2c      	ldr	r2, [pc, #176]	; (8008184 <TIM_Base_SetConfig+0x148>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d108      	bne.n	80080e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	695b      	ldr	r3, [r3, #20]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	689a      	ldr	r2, [r3, #8]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a16      	ldr	r2, [pc, #88]	; (8008168 <TIM_Base_SetConfig+0x12c>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d00f      	beq.n	8008134 <TIM_Base_SetConfig+0xf8>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a18      	ldr	r2, [pc, #96]	; (8008178 <TIM_Base_SetConfig+0x13c>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d00b      	beq.n	8008134 <TIM_Base_SetConfig+0xf8>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a17      	ldr	r2, [pc, #92]	; (800817c <TIM_Base_SetConfig+0x140>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d007      	beq.n	8008134 <TIM_Base_SetConfig+0xf8>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a16      	ldr	r2, [pc, #88]	; (8008180 <TIM_Base_SetConfig+0x144>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d003      	beq.n	8008134 <TIM_Base_SetConfig+0xf8>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a15      	ldr	r2, [pc, #84]	; (8008184 <TIM_Base_SetConfig+0x148>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d103      	bne.n	800813c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	691a      	ldr	r2, [r3, #16]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b01      	cmp	r3, #1
 800814c:	d105      	bne.n	800815a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	f023 0201 	bic.w	r2, r3, #1
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	611a      	str	r2, [r3, #16]
  }
}
 800815a:	bf00      	nop
 800815c:	3714      	adds	r7, #20
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	40010000 	.word	0x40010000
 800816c:	40000400 	.word	0x40000400
 8008170:	40000800 	.word	0x40000800
 8008174:	40000c00 	.word	0x40000c00
 8008178:	40010400 	.word	0x40010400
 800817c:	40014000 	.word	0x40014000
 8008180:	40014400 	.word	0x40014400
 8008184:	40014800 	.word	0x40014800

08008188 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008188:	b480      	push	{r7}
 800818a:	b087      	sub	sp, #28
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a1b      	ldr	r3, [r3, #32]
 8008196:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a1b      	ldr	r3, [r3, #32]
 800819c:	f023 0201 	bic.w	r2, r3, #1
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	4b37      	ldr	r3, [pc, #220]	; (8008290 <TIM_OC1_SetConfig+0x108>)
 80081b4:	4013      	ands	r3, r2
 80081b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f023 0303 	bic.w	r3, r3, #3
 80081be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	f023 0302 	bic.w	r3, r3, #2
 80081d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	697a      	ldr	r2, [r7, #20]
 80081d8:	4313      	orrs	r3, r2
 80081da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a2d      	ldr	r2, [pc, #180]	; (8008294 <TIM_OC1_SetConfig+0x10c>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d00f      	beq.n	8008204 <TIM_OC1_SetConfig+0x7c>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a2c      	ldr	r2, [pc, #176]	; (8008298 <TIM_OC1_SetConfig+0x110>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d00b      	beq.n	8008204 <TIM_OC1_SetConfig+0x7c>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a2b      	ldr	r2, [pc, #172]	; (800829c <TIM_OC1_SetConfig+0x114>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d007      	beq.n	8008204 <TIM_OC1_SetConfig+0x7c>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a2a      	ldr	r2, [pc, #168]	; (80082a0 <TIM_OC1_SetConfig+0x118>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d003      	beq.n	8008204 <TIM_OC1_SetConfig+0x7c>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a29      	ldr	r2, [pc, #164]	; (80082a4 <TIM_OC1_SetConfig+0x11c>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d10c      	bne.n	800821e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	f023 0308 	bic.w	r3, r3, #8
 800820a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	697a      	ldr	r2, [r7, #20]
 8008212:	4313      	orrs	r3, r2
 8008214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	f023 0304 	bic.w	r3, r3, #4
 800821c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a1c      	ldr	r2, [pc, #112]	; (8008294 <TIM_OC1_SetConfig+0x10c>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d00f      	beq.n	8008246 <TIM_OC1_SetConfig+0xbe>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a1b      	ldr	r2, [pc, #108]	; (8008298 <TIM_OC1_SetConfig+0x110>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d00b      	beq.n	8008246 <TIM_OC1_SetConfig+0xbe>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a1a      	ldr	r2, [pc, #104]	; (800829c <TIM_OC1_SetConfig+0x114>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d007      	beq.n	8008246 <TIM_OC1_SetConfig+0xbe>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a19      	ldr	r2, [pc, #100]	; (80082a0 <TIM_OC1_SetConfig+0x118>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d003      	beq.n	8008246 <TIM_OC1_SetConfig+0xbe>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a18      	ldr	r2, [pc, #96]	; (80082a4 <TIM_OC1_SetConfig+0x11c>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d111      	bne.n	800826a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800824c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	695b      	ldr	r3, [r3, #20]
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	4313      	orrs	r3, r2
 800825e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	4313      	orrs	r3, r2
 8008268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	685a      	ldr	r2, [r3, #4]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	697a      	ldr	r2, [r7, #20]
 8008282:	621a      	str	r2, [r3, #32]
}
 8008284:	bf00      	nop
 8008286:	371c      	adds	r7, #28
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	fffeff8f 	.word	0xfffeff8f
 8008294:	40010000 	.word	0x40010000
 8008298:	40010400 	.word	0x40010400
 800829c:	40014000 	.word	0x40014000
 80082a0:	40014400 	.word	0x40014400
 80082a4:	40014800 	.word	0x40014800

080082a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b087      	sub	sp, #28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a1b      	ldr	r3, [r3, #32]
 80082b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a1b      	ldr	r3, [r3, #32]
 80082bc:	f023 0210 	bic.w	r2, r3, #16
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	4b34      	ldr	r3, [pc, #208]	; (80083a4 <TIM_OC2_SetConfig+0xfc>)
 80082d4:	4013      	ands	r3, r2
 80082d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	021b      	lsls	r3, r3, #8
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	f023 0320 	bic.w	r3, r3, #32
 80082f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	011b      	lsls	r3, r3, #4
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a29      	ldr	r2, [pc, #164]	; (80083a8 <TIM_OC2_SetConfig+0x100>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d003      	beq.n	8008310 <TIM_OC2_SetConfig+0x68>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a28      	ldr	r2, [pc, #160]	; (80083ac <TIM_OC2_SetConfig+0x104>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d10d      	bne.n	800832c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	011b      	lsls	r3, r3, #4
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	4313      	orrs	r3, r2
 8008322:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800832a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a1e      	ldr	r2, [pc, #120]	; (80083a8 <TIM_OC2_SetConfig+0x100>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d00f      	beq.n	8008354 <TIM_OC2_SetConfig+0xac>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a1d      	ldr	r2, [pc, #116]	; (80083ac <TIM_OC2_SetConfig+0x104>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d00b      	beq.n	8008354 <TIM_OC2_SetConfig+0xac>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a1c      	ldr	r2, [pc, #112]	; (80083b0 <TIM_OC2_SetConfig+0x108>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d007      	beq.n	8008354 <TIM_OC2_SetConfig+0xac>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a1b      	ldr	r2, [pc, #108]	; (80083b4 <TIM_OC2_SetConfig+0x10c>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d003      	beq.n	8008354 <TIM_OC2_SetConfig+0xac>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a1a      	ldr	r2, [pc, #104]	; (80083b8 <TIM_OC2_SetConfig+0x110>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d113      	bne.n	800837c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800835a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008362:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	695b      	ldr	r3, [r3, #20]
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	4313      	orrs	r3, r2
 800836e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	4313      	orrs	r3, r2
 800837a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	685a      	ldr	r2, [r3, #4]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	697a      	ldr	r2, [r7, #20]
 8008394:	621a      	str	r2, [r3, #32]
}
 8008396:	bf00      	nop
 8008398:	371c      	adds	r7, #28
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	feff8fff 	.word	0xfeff8fff
 80083a8:	40010000 	.word	0x40010000
 80083ac:	40010400 	.word	0x40010400
 80083b0:	40014000 	.word	0x40014000
 80083b4:	40014400 	.word	0x40014400
 80083b8:	40014800 	.word	0x40014800

080083bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083bc:	b480      	push	{r7}
 80083be:	b087      	sub	sp, #28
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a1b      	ldr	r3, [r3, #32]
 80083d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	69db      	ldr	r3, [r3, #28]
 80083e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	4b33      	ldr	r3, [pc, #204]	; (80084b4 <TIM_OC3_SetConfig+0xf8>)
 80083e8:	4013      	ands	r3, r2
 80083ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f023 0303 	bic.w	r3, r3, #3
 80083f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	021b      	lsls	r3, r3, #8
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	4313      	orrs	r3, r2
 8008410:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a28      	ldr	r2, [pc, #160]	; (80084b8 <TIM_OC3_SetConfig+0xfc>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d003      	beq.n	8008422 <TIM_OC3_SetConfig+0x66>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a27      	ldr	r2, [pc, #156]	; (80084bc <TIM_OC3_SetConfig+0x100>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d10d      	bne.n	800843e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008428:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	021b      	lsls	r3, r3, #8
 8008430:	697a      	ldr	r2, [r7, #20]
 8008432:	4313      	orrs	r3, r2
 8008434:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800843c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a1d      	ldr	r2, [pc, #116]	; (80084b8 <TIM_OC3_SetConfig+0xfc>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d00f      	beq.n	8008466 <TIM_OC3_SetConfig+0xaa>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a1c      	ldr	r2, [pc, #112]	; (80084bc <TIM_OC3_SetConfig+0x100>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d00b      	beq.n	8008466 <TIM_OC3_SetConfig+0xaa>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a1b      	ldr	r2, [pc, #108]	; (80084c0 <TIM_OC3_SetConfig+0x104>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d007      	beq.n	8008466 <TIM_OC3_SetConfig+0xaa>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a1a      	ldr	r2, [pc, #104]	; (80084c4 <TIM_OC3_SetConfig+0x108>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d003      	beq.n	8008466 <TIM_OC3_SetConfig+0xaa>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a19      	ldr	r2, [pc, #100]	; (80084c8 <TIM_OC3_SetConfig+0x10c>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d113      	bne.n	800848e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800846c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	011b      	lsls	r3, r3, #4
 800847c:	693a      	ldr	r2, [r7, #16]
 800847e:	4313      	orrs	r3, r2
 8008480:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	011b      	lsls	r3, r3, #4
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	4313      	orrs	r3, r2
 800848c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	693a      	ldr	r2, [r7, #16]
 8008492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	685a      	ldr	r2, [r3, #4]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	621a      	str	r2, [r3, #32]
}
 80084a8:	bf00      	nop
 80084aa:	371c      	adds	r7, #28
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr
 80084b4:	fffeff8f 	.word	0xfffeff8f
 80084b8:	40010000 	.word	0x40010000
 80084bc:	40010400 	.word	0x40010400
 80084c0:	40014000 	.word	0x40014000
 80084c4:	40014400 	.word	0x40014400
 80084c8:	40014800 	.word	0x40014800

080084cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b087      	sub	sp, #28
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a1b      	ldr	r3, [r3, #32]
 80084da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a1b      	ldr	r3, [r3, #32]
 80084e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	69db      	ldr	r3, [r3, #28]
 80084f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	4b24      	ldr	r3, [pc, #144]	; (8008588 <TIM_OC4_SetConfig+0xbc>)
 80084f8:	4013      	ands	r3, r2
 80084fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	021b      	lsls	r3, r3, #8
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	4313      	orrs	r3, r2
 800850e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008516:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	031b      	lsls	r3, r3, #12
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	4313      	orrs	r3, r2
 8008522:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a19      	ldr	r2, [pc, #100]	; (800858c <TIM_OC4_SetConfig+0xc0>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d00f      	beq.n	800854c <TIM_OC4_SetConfig+0x80>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a18      	ldr	r2, [pc, #96]	; (8008590 <TIM_OC4_SetConfig+0xc4>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d00b      	beq.n	800854c <TIM_OC4_SetConfig+0x80>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a17      	ldr	r2, [pc, #92]	; (8008594 <TIM_OC4_SetConfig+0xc8>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d007      	beq.n	800854c <TIM_OC4_SetConfig+0x80>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a16      	ldr	r2, [pc, #88]	; (8008598 <TIM_OC4_SetConfig+0xcc>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d003      	beq.n	800854c <TIM_OC4_SetConfig+0x80>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a15      	ldr	r2, [pc, #84]	; (800859c <TIM_OC4_SetConfig+0xd0>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d109      	bne.n	8008560 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008552:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	695b      	ldr	r3, [r3, #20]
 8008558:	019b      	lsls	r3, r3, #6
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	4313      	orrs	r3, r2
 800855e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	697a      	ldr	r2, [r7, #20]
 8008564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	685a      	ldr	r2, [r3, #4]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	621a      	str	r2, [r3, #32]
}
 800857a:	bf00      	nop
 800857c:	371c      	adds	r7, #28
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	feff8fff 	.word	0xfeff8fff
 800858c:	40010000 	.word	0x40010000
 8008590:	40010400 	.word	0x40010400
 8008594:	40014000 	.word	0x40014000
 8008598:	40014400 	.word	0x40014400
 800859c:	40014800 	.word	0x40014800

080085a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b087      	sub	sp, #28
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6a1b      	ldr	r3, [r3, #32]
 80085b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	4b21      	ldr	r3, [pc, #132]	; (8008650 <TIM_OC5_SetConfig+0xb0>)
 80085cc:	4013      	ands	r3, r2
 80085ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80085e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	041b      	lsls	r3, r3, #16
 80085e8:	693a      	ldr	r2, [r7, #16]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a18      	ldr	r2, [pc, #96]	; (8008654 <TIM_OC5_SetConfig+0xb4>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d00f      	beq.n	8008616 <TIM_OC5_SetConfig+0x76>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a17      	ldr	r2, [pc, #92]	; (8008658 <TIM_OC5_SetConfig+0xb8>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d00b      	beq.n	8008616 <TIM_OC5_SetConfig+0x76>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4a16      	ldr	r2, [pc, #88]	; (800865c <TIM_OC5_SetConfig+0xbc>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d007      	beq.n	8008616 <TIM_OC5_SetConfig+0x76>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a15      	ldr	r2, [pc, #84]	; (8008660 <TIM_OC5_SetConfig+0xc0>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d003      	beq.n	8008616 <TIM_OC5_SetConfig+0x76>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a14      	ldr	r2, [pc, #80]	; (8008664 <TIM_OC5_SetConfig+0xc4>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d109      	bne.n	800862a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800861c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	695b      	ldr	r3, [r3, #20]
 8008622:	021b      	lsls	r3, r3, #8
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	4313      	orrs	r3, r2
 8008628:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	697a      	ldr	r2, [r7, #20]
 800862e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	685a      	ldr	r2, [r3, #4]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	693a      	ldr	r2, [r7, #16]
 8008642:	621a      	str	r2, [r3, #32]
}
 8008644:	bf00      	nop
 8008646:	371c      	adds	r7, #28
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	fffeff8f 	.word	0xfffeff8f
 8008654:	40010000 	.word	0x40010000
 8008658:	40010400 	.word	0x40010400
 800865c:	40014000 	.word	0x40014000
 8008660:	40014400 	.word	0x40014400
 8008664:	40014800 	.word	0x40014800

08008668 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008668:	b480      	push	{r7}
 800866a:	b087      	sub	sp, #28
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a1b      	ldr	r3, [r3, #32]
 800867c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800868e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	4b22      	ldr	r3, [pc, #136]	; (800871c <TIM_OC6_SetConfig+0xb4>)
 8008694:	4013      	ands	r3, r2
 8008696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	021b      	lsls	r3, r3, #8
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80086aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	051b      	lsls	r3, r3, #20
 80086b2:	693a      	ldr	r2, [r7, #16]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a19      	ldr	r2, [pc, #100]	; (8008720 <TIM_OC6_SetConfig+0xb8>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d00f      	beq.n	80086e0 <TIM_OC6_SetConfig+0x78>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a18      	ldr	r2, [pc, #96]	; (8008724 <TIM_OC6_SetConfig+0xbc>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d00b      	beq.n	80086e0 <TIM_OC6_SetConfig+0x78>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a17      	ldr	r2, [pc, #92]	; (8008728 <TIM_OC6_SetConfig+0xc0>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d007      	beq.n	80086e0 <TIM_OC6_SetConfig+0x78>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a16      	ldr	r2, [pc, #88]	; (800872c <TIM_OC6_SetConfig+0xc4>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d003      	beq.n	80086e0 <TIM_OC6_SetConfig+0x78>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a15      	ldr	r2, [pc, #84]	; (8008730 <TIM_OC6_SetConfig+0xc8>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d109      	bne.n	80086f4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	695b      	ldr	r3, [r3, #20]
 80086ec:	029b      	lsls	r3, r3, #10
 80086ee:	697a      	ldr	r2, [r7, #20]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	685a      	ldr	r2, [r3, #4]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	693a      	ldr	r2, [r7, #16]
 800870c:	621a      	str	r2, [r3, #32]
}
 800870e:	bf00      	nop
 8008710:	371c      	adds	r7, #28
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	feff8fff 	.word	0xfeff8fff
 8008720:	40010000 	.word	0x40010000
 8008724:	40010400 	.word	0x40010400
 8008728:	40014000 	.word	0x40014000
 800872c:	40014400 	.word	0x40014400
 8008730:	40014800 	.word	0x40014800

08008734 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008734:	b480      	push	{r7}
 8008736:	b087      	sub	sp, #28
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	f003 031f 	and.w	r3, r3, #31
 8008746:	2201      	movs	r2, #1
 8008748:	fa02 f303 	lsl.w	r3, r2, r3
 800874c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6a1a      	ldr	r2, [r3, #32]
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	43db      	mvns	r3, r3
 8008756:	401a      	ands	r2, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6a1a      	ldr	r2, [r3, #32]
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	f003 031f 	and.w	r3, r3, #31
 8008766:	6879      	ldr	r1, [r7, #4]
 8008768:	fa01 f303 	lsl.w	r3, r1, r3
 800876c:	431a      	orrs	r2, r3
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	621a      	str	r2, [r3, #32]
}
 8008772:	bf00      	nop
 8008774:	371c      	adds	r7, #28
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr
	...

08008780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008790:	2b01      	cmp	r3, #1
 8008792:	d101      	bne.n	8008798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008794:	2302      	movs	r3, #2
 8008796:	e06d      	b.n	8008874 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2202      	movs	r2, #2
 80087a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a30      	ldr	r2, [pc, #192]	; (8008880 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d004      	beq.n	80087cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a2f      	ldr	r2, [pc, #188]	; (8008884 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d108      	bne.n	80087de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80087d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	4313      	orrs	r3, r2
 80087dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a20      	ldr	r2, [pc, #128]	; (8008880 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d022      	beq.n	8008848 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800880a:	d01d      	beq.n	8008848 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a1d      	ldr	r2, [pc, #116]	; (8008888 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d018      	beq.n	8008848 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a1c      	ldr	r2, [pc, #112]	; (800888c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d013      	beq.n	8008848 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a1a      	ldr	r2, [pc, #104]	; (8008890 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d00e      	beq.n	8008848 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a15      	ldr	r2, [pc, #84]	; (8008884 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d009      	beq.n	8008848 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a16      	ldr	r2, [pc, #88]	; (8008894 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d004      	beq.n	8008848 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a15      	ldr	r2, [pc, #84]	; (8008898 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d10c      	bne.n	8008862 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800884e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	4313      	orrs	r3, r2
 8008858:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3714      	adds	r7, #20
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	40010000 	.word	0x40010000
 8008884:	40010400 	.word	0x40010400
 8008888:	40000400 	.word	0x40000400
 800888c:	40000800 	.word	0x40000800
 8008890:	40000c00 	.word	0x40000c00
 8008894:	40001800 	.word	0x40001800
 8008898:	40014000 	.word	0x40014000

0800889c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088a4:	bf00      	nop
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088b8:	bf00      	nop
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80088cc:	bf00      	nop
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d101      	bne.n	80088ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e042      	b.n	8008970 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d106      	bne.n	8008902 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f7f9 f83f 	bl	8001980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2224      	movs	r2, #36	; 0x24
 8008906:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f022 0201 	bic.w	r2, r2, #1
 8008918:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891e:	2b00      	cmp	r3, #0
 8008920:	d002      	beq.n	8008928 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fee6 	bl	80096f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f97b 	bl	8008c24 <UART_SetConfig>
 800892e:	4603      	mov	r3, r0
 8008930:	2b01      	cmp	r3, #1
 8008932:	d101      	bne.n	8008938 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e01b      	b.n	8008970 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	685a      	ldr	r2, [r3, #4]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008946:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	689a      	ldr	r2, [r3, #8]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008956:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f042 0201 	orr.w	r2, r2, #1
 8008966:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 ff65 	bl	8009838 <UART_CheckIdleState>
 800896e:	4603      	mov	r3, r0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b08a      	sub	sp, #40	; 0x28
 800897c:	af02      	add	r7, sp, #8
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	603b      	str	r3, [r7, #0]
 8008984:	4613      	mov	r3, r2
 8008986:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800898e:	2b20      	cmp	r3, #32
 8008990:	d17b      	bne.n	8008a8a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d002      	beq.n	800899e <HAL_UART_Transmit+0x26>
 8008998:	88fb      	ldrh	r3, [r7, #6]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d101      	bne.n	80089a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	e074      	b.n	8008a8c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2221      	movs	r2, #33	; 0x21
 80089ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089b2:	f7f9 fa05 	bl	8001dc0 <HAL_GetTick>
 80089b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	88fa      	ldrh	r2, [r7, #6]
 80089bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	88fa      	ldrh	r2, [r7, #6]
 80089c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d0:	d108      	bne.n	80089e4 <HAL_UART_Transmit+0x6c>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d104      	bne.n	80089e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80089da:	2300      	movs	r3, #0
 80089dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	61bb      	str	r3, [r7, #24]
 80089e2:	e003      	b.n	80089ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089e8:	2300      	movs	r3, #0
 80089ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80089ec:	e030      	b.n	8008a50 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	9300      	str	r3, [sp, #0]
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	2200      	movs	r2, #0
 80089f6:	2180      	movs	r1, #128	; 0x80
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f000 ffc7 	bl	800998c <UART_WaitOnFlagUntilTimeout>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d005      	beq.n	8008a10 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2220      	movs	r2, #32
 8008a08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	e03d      	b.n	8008a8c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d10b      	bne.n	8008a2e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	881b      	ldrh	r3, [r3, #0]
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	3302      	adds	r3, #2
 8008a2a:	61bb      	str	r3, [r7, #24]
 8008a2c:	e007      	b.n	8008a3e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	781a      	ldrb	r2, [r3, #0]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	3b01      	subs	r3, #1
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1c8      	bne.n	80089ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	2200      	movs	r2, #0
 8008a64:	2140      	movs	r1, #64	; 0x40
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f000 ff90 	bl	800998c <UART_WaitOnFlagUntilTimeout>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d005      	beq.n	8008a7e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2220      	movs	r2, #32
 8008a76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e006      	b.n	8008a8c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2220      	movs	r2, #32
 8008a82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	e000      	b.n	8008a8c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008a8a:	2302      	movs	r3, #2
  }
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3720      	adds	r7, #32
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b08a      	sub	sp, #40	; 0x28
 8008a98:	af02      	add	r7, sp, #8
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	603b      	str	r3, [r7, #0]
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008aaa:	2b20      	cmp	r3, #32
 8008aac:	f040 80b5 	bne.w	8008c1a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d002      	beq.n	8008abc <HAL_UART_Receive+0x28>
 8008ab6:	88fb      	ldrh	r3, [r7, #6]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d101      	bne.n	8008ac0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	e0ad      	b.n	8008c1c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2222      	movs	r2, #34	; 0x22
 8008acc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ad6:	f7f9 f973 	bl	8001dc0 <HAL_GetTick>
 8008ada:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	88fa      	ldrh	r2, [r7, #6]
 8008ae0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	88fa      	ldrh	r2, [r7, #6]
 8008ae8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008af4:	d10e      	bne.n	8008b14 <HAL_UART_Receive+0x80>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d105      	bne.n	8008b0a <HAL_UART_Receive+0x76>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008b04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b08:	e02d      	b.n	8008b66 <HAL_UART_Receive+0xd2>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	22ff      	movs	r2, #255	; 0xff
 8008b0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b12:	e028      	b.n	8008b66 <HAL_UART_Receive+0xd2>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d10d      	bne.n	8008b38 <HAL_UART_Receive+0xa4>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	691b      	ldr	r3, [r3, #16]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d104      	bne.n	8008b2e <HAL_UART_Receive+0x9a>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	22ff      	movs	r2, #255	; 0xff
 8008b28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b2c:	e01b      	b.n	8008b66 <HAL_UART_Receive+0xd2>
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	227f      	movs	r2, #127	; 0x7f
 8008b32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b36:	e016      	b.n	8008b66 <HAL_UART_Receive+0xd2>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b40:	d10d      	bne.n	8008b5e <HAL_UART_Receive+0xca>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d104      	bne.n	8008b54 <HAL_UART_Receive+0xc0>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	227f      	movs	r2, #127	; 0x7f
 8008b4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b52:	e008      	b.n	8008b66 <HAL_UART_Receive+0xd2>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	223f      	movs	r2, #63	; 0x3f
 8008b58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b5c:	e003      	b.n	8008b66 <HAL_UART_Receive+0xd2>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b6c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b76:	d108      	bne.n	8008b8a <HAL_UART_Receive+0xf6>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d104      	bne.n	8008b8a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008b80:	2300      	movs	r3, #0
 8008b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	61bb      	str	r3, [r7, #24]
 8008b88:	e003      	b.n	8008b92 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008b92:	e036      	b.n	8008c02 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	2120      	movs	r1, #32
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f000 fef4 	bl	800998c <UART_WaitOnFlagUntilTimeout>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d005      	beq.n	8008bb6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2220      	movs	r2, #32
 8008bae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	e032      	b.n	8008c1c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d10c      	bne.n	8008bd6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	8a7b      	ldrh	r3, [r7, #18]
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	3302      	adds	r3, #2
 8008bd2:	61bb      	str	r3, [r7, #24]
 8008bd4:	e00c      	b.n	8008bf0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	8a7b      	ldrh	r3, [r7, #18]
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	4013      	ands	r3, r2
 8008be4:	b2da      	uxtb	r2, r3
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	3301      	adds	r3, #1
 8008bee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1c2      	bne.n	8008b94 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2220      	movs	r2, #32
 8008c12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8008c16:	2300      	movs	r3, #0
 8008c18:	e000      	b.n	8008c1c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8008c1a:	2302      	movs	r3, #2
  }
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3720      	adds	r7, #32
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c28:	b092      	sub	sp, #72	; 0x48
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	689a      	ldr	r2, [r3, #8]
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	431a      	orrs	r2, r3
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	695b      	ldr	r3, [r3, #20]
 8008c42:	431a      	orrs	r2, r3
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	69db      	ldr	r3, [r3, #28]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	4bbe      	ldr	r3, [pc, #760]	; (8008f4c <UART_SetConfig+0x328>)
 8008c54:	4013      	ands	r3, r2
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	6812      	ldr	r2, [r2, #0]
 8008c5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008c5c:	430b      	orrs	r3, r1
 8008c5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	68da      	ldr	r2, [r3, #12]
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	430a      	orrs	r2, r1
 8008c74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4ab3      	ldr	r2, [pc, #716]	; (8008f50 <UART_SetConfig+0x32c>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d004      	beq.n	8008c90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	6a1b      	ldr	r3, [r3, #32]
 8008c8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	689a      	ldr	r2, [r3, #8]
 8008c96:	4baf      	ldr	r3, [pc, #700]	; (8008f54 <UART_SetConfig+0x330>)
 8008c98:	4013      	ands	r3, r2
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	6812      	ldr	r2, [r2, #0]
 8008c9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ca0:	430b      	orrs	r3, r1
 8008ca2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008caa:	f023 010f 	bic.w	r1, r3, #15
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	430a      	orrs	r2, r1
 8008cb8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4aa6      	ldr	r2, [pc, #664]	; (8008f58 <UART_SetConfig+0x334>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d177      	bne.n	8008db4 <UART_SetConfig+0x190>
 8008cc4:	4ba5      	ldr	r3, [pc, #660]	; (8008f5c <UART_SetConfig+0x338>)
 8008cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ccc:	2b28      	cmp	r3, #40	; 0x28
 8008cce:	d86d      	bhi.n	8008dac <UART_SetConfig+0x188>
 8008cd0:	a201      	add	r2, pc, #4	; (adr r2, 8008cd8 <UART_SetConfig+0xb4>)
 8008cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd6:	bf00      	nop
 8008cd8:	08008d7d 	.word	0x08008d7d
 8008cdc:	08008dad 	.word	0x08008dad
 8008ce0:	08008dad 	.word	0x08008dad
 8008ce4:	08008dad 	.word	0x08008dad
 8008ce8:	08008dad 	.word	0x08008dad
 8008cec:	08008dad 	.word	0x08008dad
 8008cf0:	08008dad 	.word	0x08008dad
 8008cf4:	08008dad 	.word	0x08008dad
 8008cf8:	08008d85 	.word	0x08008d85
 8008cfc:	08008dad 	.word	0x08008dad
 8008d00:	08008dad 	.word	0x08008dad
 8008d04:	08008dad 	.word	0x08008dad
 8008d08:	08008dad 	.word	0x08008dad
 8008d0c:	08008dad 	.word	0x08008dad
 8008d10:	08008dad 	.word	0x08008dad
 8008d14:	08008dad 	.word	0x08008dad
 8008d18:	08008d8d 	.word	0x08008d8d
 8008d1c:	08008dad 	.word	0x08008dad
 8008d20:	08008dad 	.word	0x08008dad
 8008d24:	08008dad 	.word	0x08008dad
 8008d28:	08008dad 	.word	0x08008dad
 8008d2c:	08008dad 	.word	0x08008dad
 8008d30:	08008dad 	.word	0x08008dad
 8008d34:	08008dad 	.word	0x08008dad
 8008d38:	08008d95 	.word	0x08008d95
 8008d3c:	08008dad 	.word	0x08008dad
 8008d40:	08008dad 	.word	0x08008dad
 8008d44:	08008dad 	.word	0x08008dad
 8008d48:	08008dad 	.word	0x08008dad
 8008d4c:	08008dad 	.word	0x08008dad
 8008d50:	08008dad 	.word	0x08008dad
 8008d54:	08008dad 	.word	0x08008dad
 8008d58:	08008d9d 	.word	0x08008d9d
 8008d5c:	08008dad 	.word	0x08008dad
 8008d60:	08008dad 	.word	0x08008dad
 8008d64:	08008dad 	.word	0x08008dad
 8008d68:	08008dad 	.word	0x08008dad
 8008d6c:	08008dad 	.word	0x08008dad
 8008d70:	08008dad 	.word	0x08008dad
 8008d74:	08008dad 	.word	0x08008dad
 8008d78:	08008da5 	.word	0x08008da5
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d82:	e222      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008d84:	2304      	movs	r3, #4
 8008d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d8a:	e21e      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008d8c:	2308      	movs	r3, #8
 8008d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d92:	e21a      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008d94:	2310      	movs	r3, #16
 8008d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d9a:	e216      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008d9c:	2320      	movs	r3, #32
 8008d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008da2:	e212      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008da4:	2340      	movs	r3, #64	; 0x40
 8008da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008daa:	e20e      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008dac:	2380      	movs	r3, #128	; 0x80
 8008dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008db2:	e20a      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a69      	ldr	r2, [pc, #420]	; (8008f60 <UART_SetConfig+0x33c>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d130      	bne.n	8008e20 <UART_SetConfig+0x1fc>
 8008dbe:	4b67      	ldr	r3, [pc, #412]	; (8008f5c <UART_SetConfig+0x338>)
 8008dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dc2:	f003 0307 	and.w	r3, r3, #7
 8008dc6:	2b05      	cmp	r3, #5
 8008dc8:	d826      	bhi.n	8008e18 <UART_SetConfig+0x1f4>
 8008dca:	a201      	add	r2, pc, #4	; (adr r2, 8008dd0 <UART_SetConfig+0x1ac>)
 8008dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd0:	08008de9 	.word	0x08008de9
 8008dd4:	08008df1 	.word	0x08008df1
 8008dd8:	08008df9 	.word	0x08008df9
 8008ddc:	08008e01 	.word	0x08008e01
 8008de0:	08008e09 	.word	0x08008e09
 8008de4:	08008e11 	.word	0x08008e11
 8008de8:	2300      	movs	r3, #0
 8008dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dee:	e1ec      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008df0:	2304      	movs	r3, #4
 8008df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008df6:	e1e8      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008df8:	2308      	movs	r3, #8
 8008dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dfe:	e1e4      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008e00:	2310      	movs	r3, #16
 8008e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e06:	e1e0      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008e08:	2320      	movs	r3, #32
 8008e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e0e:	e1dc      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008e10:	2340      	movs	r3, #64	; 0x40
 8008e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e16:	e1d8      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008e18:	2380      	movs	r3, #128	; 0x80
 8008e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e1e:	e1d4      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a4f      	ldr	r2, [pc, #316]	; (8008f64 <UART_SetConfig+0x340>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d130      	bne.n	8008e8c <UART_SetConfig+0x268>
 8008e2a:	4b4c      	ldr	r3, [pc, #304]	; (8008f5c <UART_SetConfig+0x338>)
 8008e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e2e:	f003 0307 	and.w	r3, r3, #7
 8008e32:	2b05      	cmp	r3, #5
 8008e34:	d826      	bhi.n	8008e84 <UART_SetConfig+0x260>
 8008e36:	a201      	add	r2, pc, #4	; (adr r2, 8008e3c <UART_SetConfig+0x218>)
 8008e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3c:	08008e55 	.word	0x08008e55
 8008e40:	08008e5d 	.word	0x08008e5d
 8008e44:	08008e65 	.word	0x08008e65
 8008e48:	08008e6d 	.word	0x08008e6d
 8008e4c:	08008e75 	.word	0x08008e75
 8008e50:	08008e7d 	.word	0x08008e7d
 8008e54:	2300      	movs	r3, #0
 8008e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e5a:	e1b6      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008e5c:	2304      	movs	r3, #4
 8008e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e62:	e1b2      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008e64:	2308      	movs	r3, #8
 8008e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e6a:	e1ae      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008e6c:	2310      	movs	r3, #16
 8008e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e72:	e1aa      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008e74:	2320      	movs	r3, #32
 8008e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e7a:	e1a6      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008e7c:	2340      	movs	r3, #64	; 0x40
 8008e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e82:	e1a2      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008e84:	2380      	movs	r3, #128	; 0x80
 8008e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e8a:	e19e      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a35      	ldr	r2, [pc, #212]	; (8008f68 <UART_SetConfig+0x344>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d130      	bne.n	8008ef8 <UART_SetConfig+0x2d4>
 8008e96:	4b31      	ldr	r3, [pc, #196]	; (8008f5c <UART_SetConfig+0x338>)
 8008e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e9a:	f003 0307 	and.w	r3, r3, #7
 8008e9e:	2b05      	cmp	r3, #5
 8008ea0:	d826      	bhi.n	8008ef0 <UART_SetConfig+0x2cc>
 8008ea2:	a201      	add	r2, pc, #4	; (adr r2, 8008ea8 <UART_SetConfig+0x284>)
 8008ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea8:	08008ec1 	.word	0x08008ec1
 8008eac:	08008ec9 	.word	0x08008ec9
 8008eb0:	08008ed1 	.word	0x08008ed1
 8008eb4:	08008ed9 	.word	0x08008ed9
 8008eb8:	08008ee1 	.word	0x08008ee1
 8008ebc:	08008ee9 	.word	0x08008ee9
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ec6:	e180      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008ec8:	2304      	movs	r3, #4
 8008eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ece:	e17c      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008ed0:	2308      	movs	r3, #8
 8008ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ed6:	e178      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008ed8:	2310      	movs	r3, #16
 8008eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ede:	e174      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008ee0:	2320      	movs	r3, #32
 8008ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ee6:	e170      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008ee8:	2340      	movs	r3, #64	; 0x40
 8008eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eee:	e16c      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008ef0:	2380      	movs	r3, #128	; 0x80
 8008ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ef6:	e168      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a1b      	ldr	r2, [pc, #108]	; (8008f6c <UART_SetConfig+0x348>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d142      	bne.n	8008f88 <UART_SetConfig+0x364>
 8008f02:	4b16      	ldr	r3, [pc, #88]	; (8008f5c <UART_SetConfig+0x338>)
 8008f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f06:	f003 0307 	and.w	r3, r3, #7
 8008f0a:	2b05      	cmp	r3, #5
 8008f0c:	d838      	bhi.n	8008f80 <UART_SetConfig+0x35c>
 8008f0e:	a201      	add	r2, pc, #4	; (adr r2, 8008f14 <UART_SetConfig+0x2f0>)
 8008f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f14:	08008f2d 	.word	0x08008f2d
 8008f18:	08008f35 	.word	0x08008f35
 8008f1c:	08008f3d 	.word	0x08008f3d
 8008f20:	08008f45 	.word	0x08008f45
 8008f24:	08008f71 	.word	0x08008f71
 8008f28:	08008f79 	.word	0x08008f79
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f32:	e14a      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008f34:	2304      	movs	r3, #4
 8008f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f3a:	e146      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008f3c:	2308      	movs	r3, #8
 8008f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f42:	e142      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008f44:	2310      	movs	r3, #16
 8008f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f4a:	e13e      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008f4c:	cfff69f3 	.word	0xcfff69f3
 8008f50:	58000c00 	.word	0x58000c00
 8008f54:	11fff4ff 	.word	0x11fff4ff
 8008f58:	40011000 	.word	0x40011000
 8008f5c:	58024400 	.word	0x58024400
 8008f60:	40004400 	.word	0x40004400
 8008f64:	40004800 	.word	0x40004800
 8008f68:	40004c00 	.word	0x40004c00
 8008f6c:	40005000 	.word	0x40005000
 8008f70:	2320      	movs	r3, #32
 8008f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f76:	e128      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008f78:	2340      	movs	r3, #64	; 0x40
 8008f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f7e:	e124      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008f80:	2380      	movs	r3, #128	; 0x80
 8008f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f86:	e120      	b.n	80091ca <UART_SetConfig+0x5a6>
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4acb      	ldr	r2, [pc, #812]	; (80092bc <UART_SetConfig+0x698>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d176      	bne.n	8009080 <UART_SetConfig+0x45c>
 8008f92:	4bcb      	ldr	r3, [pc, #812]	; (80092c0 <UART_SetConfig+0x69c>)
 8008f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f9a:	2b28      	cmp	r3, #40	; 0x28
 8008f9c:	d86c      	bhi.n	8009078 <UART_SetConfig+0x454>
 8008f9e:	a201      	add	r2, pc, #4	; (adr r2, 8008fa4 <UART_SetConfig+0x380>)
 8008fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa4:	08009049 	.word	0x08009049
 8008fa8:	08009079 	.word	0x08009079
 8008fac:	08009079 	.word	0x08009079
 8008fb0:	08009079 	.word	0x08009079
 8008fb4:	08009079 	.word	0x08009079
 8008fb8:	08009079 	.word	0x08009079
 8008fbc:	08009079 	.word	0x08009079
 8008fc0:	08009079 	.word	0x08009079
 8008fc4:	08009051 	.word	0x08009051
 8008fc8:	08009079 	.word	0x08009079
 8008fcc:	08009079 	.word	0x08009079
 8008fd0:	08009079 	.word	0x08009079
 8008fd4:	08009079 	.word	0x08009079
 8008fd8:	08009079 	.word	0x08009079
 8008fdc:	08009079 	.word	0x08009079
 8008fe0:	08009079 	.word	0x08009079
 8008fe4:	08009059 	.word	0x08009059
 8008fe8:	08009079 	.word	0x08009079
 8008fec:	08009079 	.word	0x08009079
 8008ff0:	08009079 	.word	0x08009079
 8008ff4:	08009079 	.word	0x08009079
 8008ff8:	08009079 	.word	0x08009079
 8008ffc:	08009079 	.word	0x08009079
 8009000:	08009079 	.word	0x08009079
 8009004:	08009061 	.word	0x08009061
 8009008:	08009079 	.word	0x08009079
 800900c:	08009079 	.word	0x08009079
 8009010:	08009079 	.word	0x08009079
 8009014:	08009079 	.word	0x08009079
 8009018:	08009079 	.word	0x08009079
 800901c:	08009079 	.word	0x08009079
 8009020:	08009079 	.word	0x08009079
 8009024:	08009069 	.word	0x08009069
 8009028:	08009079 	.word	0x08009079
 800902c:	08009079 	.word	0x08009079
 8009030:	08009079 	.word	0x08009079
 8009034:	08009079 	.word	0x08009079
 8009038:	08009079 	.word	0x08009079
 800903c:	08009079 	.word	0x08009079
 8009040:	08009079 	.word	0x08009079
 8009044:	08009071 	.word	0x08009071
 8009048:	2301      	movs	r3, #1
 800904a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800904e:	e0bc      	b.n	80091ca <UART_SetConfig+0x5a6>
 8009050:	2304      	movs	r3, #4
 8009052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009056:	e0b8      	b.n	80091ca <UART_SetConfig+0x5a6>
 8009058:	2308      	movs	r3, #8
 800905a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800905e:	e0b4      	b.n	80091ca <UART_SetConfig+0x5a6>
 8009060:	2310      	movs	r3, #16
 8009062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009066:	e0b0      	b.n	80091ca <UART_SetConfig+0x5a6>
 8009068:	2320      	movs	r3, #32
 800906a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800906e:	e0ac      	b.n	80091ca <UART_SetConfig+0x5a6>
 8009070:	2340      	movs	r3, #64	; 0x40
 8009072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009076:	e0a8      	b.n	80091ca <UART_SetConfig+0x5a6>
 8009078:	2380      	movs	r3, #128	; 0x80
 800907a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800907e:	e0a4      	b.n	80091ca <UART_SetConfig+0x5a6>
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a8f      	ldr	r2, [pc, #572]	; (80092c4 <UART_SetConfig+0x6a0>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d130      	bne.n	80090ec <UART_SetConfig+0x4c8>
 800908a:	4b8d      	ldr	r3, [pc, #564]	; (80092c0 <UART_SetConfig+0x69c>)
 800908c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800908e:	f003 0307 	and.w	r3, r3, #7
 8009092:	2b05      	cmp	r3, #5
 8009094:	d826      	bhi.n	80090e4 <UART_SetConfig+0x4c0>
 8009096:	a201      	add	r2, pc, #4	; (adr r2, 800909c <UART_SetConfig+0x478>)
 8009098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800909c:	080090b5 	.word	0x080090b5
 80090a0:	080090bd 	.word	0x080090bd
 80090a4:	080090c5 	.word	0x080090c5
 80090a8:	080090cd 	.word	0x080090cd
 80090ac:	080090d5 	.word	0x080090d5
 80090b0:	080090dd 	.word	0x080090dd
 80090b4:	2300      	movs	r3, #0
 80090b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ba:	e086      	b.n	80091ca <UART_SetConfig+0x5a6>
 80090bc:	2304      	movs	r3, #4
 80090be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090c2:	e082      	b.n	80091ca <UART_SetConfig+0x5a6>
 80090c4:	2308      	movs	r3, #8
 80090c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ca:	e07e      	b.n	80091ca <UART_SetConfig+0x5a6>
 80090cc:	2310      	movs	r3, #16
 80090ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090d2:	e07a      	b.n	80091ca <UART_SetConfig+0x5a6>
 80090d4:	2320      	movs	r3, #32
 80090d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090da:	e076      	b.n	80091ca <UART_SetConfig+0x5a6>
 80090dc:	2340      	movs	r3, #64	; 0x40
 80090de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090e2:	e072      	b.n	80091ca <UART_SetConfig+0x5a6>
 80090e4:	2380      	movs	r3, #128	; 0x80
 80090e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ea:	e06e      	b.n	80091ca <UART_SetConfig+0x5a6>
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a75      	ldr	r2, [pc, #468]	; (80092c8 <UART_SetConfig+0x6a4>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d130      	bne.n	8009158 <UART_SetConfig+0x534>
 80090f6:	4b72      	ldr	r3, [pc, #456]	; (80092c0 <UART_SetConfig+0x69c>)
 80090f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090fa:	f003 0307 	and.w	r3, r3, #7
 80090fe:	2b05      	cmp	r3, #5
 8009100:	d826      	bhi.n	8009150 <UART_SetConfig+0x52c>
 8009102:	a201      	add	r2, pc, #4	; (adr r2, 8009108 <UART_SetConfig+0x4e4>)
 8009104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009108:	08009121 	.word	0x08009121
 800910c:	08009129 	.word	0x08009129
 8009110:	08009131 	.word	0x08009131
 8009114:	08009139 	.word	0x08009139
 8009118:	08009141 	.word	0x08009141
 800911c:	08009149 	.word	0x08009149
 8009120:	2300      	movs	r3, #0
 8009122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009126:	e050      	b.n	80091ca <UART_SetConfig+0x5a6>
 8009128:	2304      	movs	r3, #4
 800912a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800912e:	e04c      	b.n	80091ca <UART_SetConfig+0x5a6>
 8009130:	2308      	movs	r3, #8
 8009132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009136:	e048      	b.n	80091ca <UART_SetConfig+0x5a6>
 8009138:	2310      	movs	r3, #16
 800913a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800913e:	e044      	b.n	80091ca <UART_SetConfig+0x5a6>
 8009140:	2320      	movs	r3, #32
 8009142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009146:	e040      	b.n	80091ca <UART_SetConfig+0x5a6>
 8009148:	2340      	movs	r3, #64	; 0x40
 800914a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800914e:	e03c      	b.n	80091ca <UART_SetConfig+0x5a6>
 8009150:	2380      	movs	r3, #128	; 0x80
 8009152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009156:	e038      	b.n	80091ca <UART_SetConfig+0x5a6>
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a5b      	ldr	r2, [pc, #364]	; (80092cc <UART_SetConfig+0x6a8>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d130      	bne.n	80091c4 <UART_SetConfig+0x5a0>
 8009162:	4b57      	ldr	r3, [pc, #348]	; (80092c0 <UART_SetConfig+0x69c>)
 8009164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009166:	f003 0307 	and.w	r3, r3, #7
 800916a:	2b05      	cmp	r3, #5
 800916c:	d826      	bhi.n	80091bc <UART_SetConfig+0x598>
 800916e:	a201      	add	r2, pc, #4	; (adr r2, 8009174 <UART_SetConfig+0x550>)
 8009170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009174:	0800918d 	.word	0x0800918d
 8009178:	08009195 	.word	0x08009195
 800917c:	0800919d 	.word	0x0800919d
 8009180:	080091a5 	.word	0x080091a5
 8009184:	080091ad 	.word	0x080091ad
 8009188:	080091b5 	.word	0x080091b5
 800918c:	2302      	movs	r3, #2
 800918e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009192:	e01a      	b.n	80091ca <UART_SetConfig+0x5a6>
 8009194:	2304      	movs	r3, #4
 8009196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800919a:	e016      	b.n	80091ca <UART_SetConfig+0x5a6>
 800919c:	2308      	movs	r3, #8
 800919e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091a2:	e012      	b.n	80091ca <UART_SetConfig+0x5a6>
 80091a4:	2310      	movs	r3, #16
 80091a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091aa:	e00e      	b.n	80091ca <UART_SetConfig+0x5a6>
 80091ac:	2320      	movs	r3, #32
 80091ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091b2:	e00a      	b.n	80091ca <UART_SetConfig+0x5a6>
 80091b4:	2340      	movs	r3, #64	; 0x40
 80091b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ba:	e006      	b.n	80091ca <UART_SetConfig+0x5a6>
 80091bc:	2380      	movs	r3, #128	; 0x80
 80091be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091c2:	e002      	b.n	80091ca <UART_SetConfig+0x5a6>
 80091c4:	2380      	movs	r3, #128	; 0x80
 80091c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a3f      	ldr	r2, [pc, #252]	; (80092cc <UART_SetConfig+0x6a8>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	f040 80f8 	bne.w	80093c6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80091d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80091da:	2b20      	cmp	r3, #32
 80091dc:	dc46      	bgt.n	800926c <UART_SetConfig+0x648>
 80091de:	2b02      	cmp	r3, #2
 80091e0:	f2c0 8082 	blt.w	80092e8 <UART_SetConfig+0x6c4>
 80091e4:	3b02      	subs	r3, #2
 80091e6:	2b1e      	cmp	r3, #30
 80091e8:	d87e      	bhi.n	80092e8 <UART_SetConfig+0x6c4>
 80091ea:	a201      	add	r2, pc, #4	; (adr r2, 80091f0 <UART_SetConfig+0x5cc>)
 80091ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f0:	08009273 	.word	0x08009273
 80091f4:	080092e9 	.word	0x080092e9
 80091f8:	0800927b 	.word	0x0800927b
 80091fc:	080092e9 	.word	0x080092e9
 8009200:	080092e9 	.word	0x080092e9
 8009204:	080092e9 	.word	0x080092e9
 8009208:	0800928b 	.word	0x0800928b
 800920c:	080092e9 	.word	0x080092e9
 8009210:	080092e9 	.word	0x080092e9
 8009214:	080092e9 	.word	0x080092e9
 8009218:	080092e9 	.word	0x080092e9
 800921c:	080092e9 	.word	0x080092e9
 8009220:	080092e9 	.word	0x080092e9
 8009224:	080092e9 	.word	0x080092e9
 8009228:	0800929b 	.word	0x0800929b
 800922c:	080092e9 	.word	0x080092e9
 8009230:	080092e9 	.word	0x080092e9
 8009234:	080092e9 	.word	0x080092e9
 8009238:	080092e9 	.word	0x080092e9
 800923c:	080092e9 	.word	0x080092e9
 8009240:	080092e9 	.word	0x080092e9
 8009244:	080092e9 	.word	0x080092e9
 8009248:	080092e9 	.word	0x080092e9
 800924c:	080092e9 	.word	0x080092e9
 8009250:	080092e9 	.word	0x080092e9
 8009254:	080092e9 	.word	0x080092e9
 8009258:	080092e9 	.word	0x080092e9
 800925c:	080092e9 	.word	0x080092e9
 8009260:	080092e9 	.word	0x080092e9
 8009264:	080092e9 	.word	0x080092e9
 8009268:	080092db 	.word	0x080092db
 800926c:	2b40      	cmp	r3, #64	; 0x40
 800926e:	d037      	beq.n	80092e0 <UART_SetConfig+0x6bc>
 8009270:	e03a      	b.n	80092e8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009272:	f7fd fb87 	bl	8006984 <HAL_RCCEx_GetD3PCLK1Freq>
 8009276:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009278:	e03c      	b.n	80092f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800927a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800927e:	4618      	mov	r0, r3
 8009280:	f7fd fb96 	bl	80069b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009286:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009288:	e034      	b.n	80092f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800928a:	f107 0318 	add.w	r3, r7, #24
 800928e:	4618      	mov	r0, r3
 8009290:	f7fd fce2 	bl	8006c58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009298:	e02c      	b.n	80092f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800929a:	4b09      	ldr	r3, [pc, #36]	; (80092c0 <UART_SetConfig+0x69c>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f003 0320 	and.w	r3, r3, #32
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d016      	beq.n	80092d4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80092a6:	4b06      	ldr	r3, [pc, #24]	; (80092c0 <UART_SetConfig+0x69c>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	08db      	lsrs	r3, r3, #3
 80092ac:	f003 0303 	and.w	r3, r3, #3
 80092b0:	4a07      	ldr	r2, [pc, #28]	; (80092d0 <UART_SetConfig+0x6ac>)
 80092b2:	fa22 f303 	lsr.w	r3, r2, r3
 80092b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80092b8:	e01c      	b.n	80092f4 <UART_SetConfig+0x6d0>
 80092ba:	bf00      	nop
 80092bc:	40011400 	.word	0x40011400
 80092c0:	58024400 	.word	0x58024400
 80092c4:	40007800 	.word	0x40007800
 80092c8:	40007c00 	.word	0x40007c00
 80092cc:	58000c00 	.word	0x58000c00
 80092d0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80092d4:	4b9d      	ldr	r3, [pc, #628]	; (800954c <UART_SetConfig+0x928>)
 80092d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092d8:	e00c      	b.n	80092f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80092da:	4b9d      	ldr	r3, [pc, #628]	; (8009550 <UART_SetConfig+0x92c>)
 80092dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092de:	e009      	b.n	80092f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092e6:	e005      	b.n	80092f4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80092e8:	2300      	movs	r3, #0
 80092ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80092f2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80092f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f000 81de 	beq.w	80096b8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009300:	4a94      	ldr	r2, [pc, #592]	; (8009554 <UART_SetConfig+0x930>)
 8009302:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009306:	461a      	mov	r2, r3
 8009308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800930a:	fbb3 f3f2 	udiv	r3, r3, r2
 800930e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	685a      	ldr	r2, [r3, #4]
 8009314:	4613      	mov	r3, r2
 8009316:	005b      	lsls	r3, r3, #1
 8009318:	4413      	add	r3, r2
 800931a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800931c:	429a      	cmp	r2, r3
 800931e:	d305      	bcc.n	800932c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009328:	429a      	cmp	r2, r3
 800932a:	d903      	bls.n	8009334 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800932c:	2301      	movs	r3, #1
 800932e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009332:	e1c1      	b.n	80096b8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009336:	2200      	movs	r2, #0
 8009338:	60bb      	str	r3, [r7, #8]
 800933a:	60fa      	str	r2, [r7, #12]
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009340:	4a84      	ldr	r2, [pc, #528]	; (8009554 <UART_SetConfig+0x930>)
 8009342:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009346:	b29b      	uxth	r3, r3
 8009348:	2200      	movs	r2, #0
 800934a:	603b      	str	r3, [r7, #0]
 800934c:	607a      	str	r2, [r7, #4]
 800934e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009352:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009356:	f7f7 f813 	bl	8000380 <__aeabi_uldivmod>
 800935a:	4602      	mov	r2, r0
 800935c:	460b      	mov	r3, r1
 800935e:	4610      	mov	r0, r2
 8009360:	4619      	mov	r1, r3
 8009362:	f04f 0200 	mov.w	r2, #0
 8009366:	f04f 0300 	mov.w	r3, #0
 800936a:	020b      	lsls	r3, r1, #8
 800936c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009370:	0202      	lsls	r2, r0, #8
 8009372:	6979      	ldr	r1, [r7, #20]
 8009374:	6849      	ldr	r1, [r1, #4]
 8009376:	0849      	lsrs	r1, r1, #1
 8009378:	2000      	movs	r0, #0
 800937a:	460c      	mov	r4, r1
 800937c:	4605      	mov	r5, r0
 800937e:	eb12 0804 	adds.w	r8, r2, r4
 8009382:	eb43 0905 	adc.w	r9, r3, r5
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	469a      	mov	sl, r3
 800938e:	4693      	mov	fp, r2
 8009390:	4652      	mov	r2, sl
 8009392:	465b      	mov	r3, fp
 8009394:	4640      	mov	r0, r8
 8009396:	4649      	mov	r1, r9
 8009398:	f7f6 fff2 	bl	8000380 <__aeabi_uldivmod>
 800939c:	4602      	mov	r2, r0
 800939e:	460b      	mov	r3, r1
 80093a0:	4613      	mov	r3, r2
 80093a2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80093a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093aa:	d308      	bcc.n	80093be <UART_SetConfig+0x79a>
 80093ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093b2:	d204      	bcs.n	80093be <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093ba:	60da      	str	r2, [r3, #12]
 80093bc:	e17c      	b.n	80096b8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80093c4:	e178      	b.n	80096b8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	69db      	ldr	r3, [r3, #28]
 80093ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093ce:	f040 80c5 	bne.w	800955c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80093d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80093d6:	2b20      	cmp	r3, #32
 80093d8:	dc48      	bgt.n	800946c <UART_SetConfig+0x848>
 80093da:	2b00      	cmp	r3, #0
 80093dc:	db7b      	blt.n	80094d6 <UART_SetConfig+0x8b2>
 80093de:	2b20      	cmp	r3, #32
 80093e0:	d879      	bhi.n	80094d6 <UART_SetConfig+0x8b2>
 80093e2:	a201      	add	r2, pc, #4	; (adr r2, 80093e8 <UART_SetConfig+0x7c4>)
 80093e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e8:	08009473 	.word	0x08009473
 80093ec:	0800947b 	.word	0x0800947b
 80093f0:	080094d7 	.word	0x080094d7
 80093f4:	080094d7 	.word	0x080094d7
 80093f8:	08009483 	.word	0x08009483
 80093fc:	080094d7 	.word	0x080094d7
 8009400:	080094d7 	.word	0x080094d7
 8009404:	080094d7 	.word	0x080094d7
 8009408:	08009493 	.word	0x08009493
 800940c:	080094d7 	.word	0x080094d7
 8009410:	080094d7 	.word	0x080094d7
 8009414:	080094d7 	.word	0x080094d7
 8009418:	080094d7 	.word	0x080094d7
 800941c:	080094d7 	.word	0x080094d7
 8009420:	080094d7 	.word	0x080094d7
 8009424:	080094d7 	.word	0x080094d7
 8009428:	080094a3 	.word	0x080094a3
 800942c:	080094d7 	.word	0x080094d7
 8009430:	080094d7 	.word	0x080094d7
 8009434:	080094d7 	.word	0x080094d7
 8009438:	080094d7 	.word	0x080094d7
 800943c:	080094d7 	.word	0x080094d7
 8009440:	080094d7 	.word	0x080094d7
 8009444:	080094d7 	.word	0x080094d7
 8009448:	080094d7 	.word	0x080094d7
 800944c:	080094d7 	.word	0x080094d7
 8009450:	080094d7 	.word	0x080094d7
 8009454:	080094d7 	.word	0x080094d7
 8009458:	080094d7 	.word	0x080094d7
 800945c:	080094d7 	.word	0x080094d7
 8009460:	080094d7 	.word	0x080094d7
 8009464:	080094d7 	.word	0x080094d7
 8009468:	080094c9 	.word	0x080094c9
 800946c:	2b40      	cmp	r3, #64	; 0x40
 800946e:	d02e      	beq.n	80094ce <UART_SetConfig+0x8aa>
 8009470:	e031      	b.n	80094d6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009472:	f7fb fad1 	bl	8004a18 <HAL_RCC_GetPCLK1Freq>
 8009476:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009478:	e033      	b.n	80094e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800947a:	f7fb fae3 	bl	8004a44 <HAL_RCC_GetPCLK2Freq>
 800947e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009480:	e02f      	b.n	80094e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009486:	4618      	mov	r0, r3
 8009488:	f7fd fa92 	bl	80069b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800948c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009490:	e027      	b.n	80094e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009492:	f107 0318 	add.w	r3, r7, #24
 8009496:	4618      	mov	r0, r3
 8009498:	f7fd fbde 	bl	8006c58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094a0:	e01f      	b.n	80094e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094a2:	4b2d      	ldr	r3, [pc, #180]	; (8009558 <UART_SetConfig+0x934>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f003 0320 	and.w	r3, r3, #32
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d009      	beq.n	80094c2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80094ae:	4b2a      	ldr	r3, [pc, #168]	; (8009558 <UART_SetConfig+0x934>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	08db      	lsrs	r3, r3, #3
 80094b4:	f003 0303 	and.w	r3, r3, #3
 80094b8:	4a24      	ldr	r2, [pc, #144]	; (800954c <UART_SetConfig+0x928>)
 80094ba:	fa22 f303 	lsr.w	r3, r2, r3
 80094be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80094c0:	e00f      	b.n	80094e2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80094c2:	4b22      	ldr	r3, [pc, #136]	; (800954c <UART_SetConfig+0x928>)
 80094c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094c6:	e00c      	b.n	80094e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80094c8:	4b21      	ldr	r3, [pc, #132]	; (8009550 <UART_SetConfig+0x92c>)
 80094ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094cc:	e009      	b.n	80094e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094d4:	e005      	b.n	80094e2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80094d6:	2300      	movs	r3, #0
 80094d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80094e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80094e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f000 80e7 	beq.w	80096b8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ee:	4a19      	ldr	r2, [pc, #100]	; (8009554 <UART_SetConfig+0x930>)
 80094f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094f4:	461a      	mov	r2, r3
 80094f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80094fc:	005a      	lsls	r2, r3, #1
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	085b      	lsrs	r3, r3, #1
 8009504:	441a      	add	r2, r3
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	fbb2 f3f3 	udiv	r3, r2, r3
 800950e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009512:	2b0f      	cmp	r3, #15
 8009514:	d916      	bls.n	8009544 <UART_SetConfig+0x920>
 8009516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800951c:	d212      	bcs.n	8009544 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800951e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009520:	b29b      	uxth	r3, r3
 8009522:	f023 030f 	bic.w	r3, r3, #15
 8009526:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952a:	085b      	lsrs	r3, r3, #1
 800952c:	b29b      	uxth	r3, r3
 800952e:	f003 0307 	and.w	r3, r3, #7
 8009532:	b29a      	uxth	r2, r3
 8009534:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009536:	4313      	orrs	r3, r2
 8009538:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009540:	60da      	str	r2, [r3, #12]
 8009542:	e0b9      	b.n	80096b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800954a:	e0b5      	b.n	80096b8 <UART_SetConfig+0xa94>
 800954c:	03d09000 	.word	0x03d09000
 8009550:	003d0900 	.word	0x003d0900
 8009554:	0800b430 	.word	0x0800b430
 8009558:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800955c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009560:	2b20      	cmp	r3, #32
 8009562:	dc49      	bgt.n	80095f8 <UART_SetConfig+0x9d4>
 8009564:	2b00      	cmp	r3, #0
 8009566:	db7c      	blt.n	8009662 <UART_SetConfig+0xa3e>
 8009568:	2b20      	cmp	r3, #32
 800956a:	d87a      	bhi.n	8009662 <UART_SetConfig+0xa3e>
 800956c:	a201      	add	r2, pc, #4	; (adr r2, 8009574 <UART_SetConfig+0x950>)
 800956e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009572:	bf00      	nop
 8009574:	080095ff 	.word	0x080095ff
 8009578:	08009607 	.word	0x08009607
 800957c:	08009663 	.word	0x08009663
 8009580:	08009663 	.word	0x08009663
 8009584:	0800960f 	.word	0x0800960f
 8009588:	08009663 	.word	0x08009663
 800958c:	08009663 	.word	0x08009663
 8009590:	08009663 	.word	0x08009663
 8009594:	0800961f 	.word	0x0800961f
 8009598:	08009663 	.word	0x08009663
 800959c:	08009663 	.word	0x08009663
 80095a0:	08009663 	.word	0x08009663
 80095a4:	08009663 	.word	0x08009663
 80095a8:	08009663 	.word	0x08009663
 80095ac:	08009663 	.word	0x08009663
 80095b0:	08009663 	.word	0x08009663
 80095b4:	0800962f 	.word	0x0800962f
 80095b8:	08009663 	.word	0x08009663
 80095bc:	08009663 	.word	0x08009663
 80095c0:	08009663 	.word	0x08009663
 80095c4:	08009663 	.word	0x08009663
 80095c8:	08009663 	.word	0x08009663
 80095cc:	08009663 	.word	0x08009663
 80095d0:	08009663 	.word	0x08009663
 80095d4:	08009663 	.word	0x08009663
 80095d8:	08009663 	.word	0x08009663
 80095dc:	08009663 	.word	0x08009663
 80095e0:	08009663 	.word	0x08009663
 80095e4:	08009663 	.word	0x08009663
 80095e8:	08009663 	.word	0x08009663
 80095ec:	08009663 	.word	0x08009663
 80095f0:	08009663 	.word	0x08009663
 80095f4:	08009655 	.word	0x08009655
 80095f8:	2b40      	cmp	r3, #64	; 0x40
 80095fa:	d02e      	beq.n	800965a <UART_SetConfig+0xa36>
 80095fc:	e031      	b.n	8009662 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095fe:	f7fb fa0b 	bl	8004a18 <HAL_RCC_GetPCLK1Freq>
 8009602:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009604:	e033      	b.n	800966e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009606:	f7fb fa1d 	bl	8004a44 <HAL_RCC_GetPCLK2Freq>
 800960a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800960c:	e02f      	b.n	800966e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800960e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009612:	4618      	mov	r0, r3
 8009614:	f7fd f9cc 	bl	80069b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800961c:	e027      	b.n	800966e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800961e:	f107 0318 	add.w	r3, r7, #24
 8009622:	4618      	mov	r0, r3
 8009624:	f7fd fb18 	bl	8006c58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800962c:	e01f      	b.n	800966e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800962e:	4b2d      	ldr	r3, [pc, #180]	; (80096e4 <UART_SetConfig+0xac0>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 0320 	and.w	r3, r3, #32
 8009636:	2b00      	cmp	r3, #0
 8009638:	d009      	beq.n	800964e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800963a:	4b2a      	ldr	r3, [pc, #168]	; (80096e4 <UART_SetConfig+0xac0>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	08db      	lsrs	r3, r3, #3
 8009640:	f003 0303 	and.w	r3, r3, #3
 8009644:	4a28      	ldr	r2, [pc, #160]	; (80096e8 <UART_SetConfig+0xac4>)
 8009646:	fa22 f303 	lsr.w	r3, r2, r3
 800964a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800964c:	e00f      	b.n	800966e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800964e:	4b26      	ldr	r3, [pc, #152]	; (80096e8 <UART_SetConfig+0xac4>)
 8009650:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009652:	e00c      	b.n	800966e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009654:	4b25      	ldr	r3, [pc, #148]	; (80096ec <UART_SetConfig+0xac8>)
 8009656:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009658:	e009      	b.n	800966e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800965a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800965e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009660:	e005      	b.n	800966e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009662:	2300      	movs	r3, #0
 8009664:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800966c:	bf00      	nop
    }

    if (pclk != 0U)
 800966e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009670:	2b00      	cmp	r3, #0
 8009672:	d021      	beq.n	80096b8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009678:	4a1d      	ldr	r2, [pc, #116]	; (80096f0 <UART_SetConfig+0xacc>)
 800967a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800967e:	461a      	mov	r2, r3
 8009680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009682:	fbb3 f2f2 	udiv	r2, r3, r2
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	085b      	lsrs	r3, r3, #1
 800968c:	441a      	add	r2, r3
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	fbb2 f3f3 	udiv	r3, r2, r3
 8009696:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800969a:	2b0f      	cmp	r3, #15
 800969c:	d909      	bls.n	80096b2 <UART_SetConfig+0xa8e>
 800969e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096a4:	d205      	bcs.n	80096b2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80096a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	60da      	str	r2, [r3, #12]
 80096b0:	e002      	b.n	80096b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	2201      	movs	r2, #1
 80096c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	2200      	movs	r2, #0
 80096cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	2200      	movs	r2, #0
 80096d2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80096d4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3748      	adds	r7, #72	; 0x48
 80096dc:	46bd      	mov	sp, r7
 80096de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096e2:	bf00      	nop
 80096e4:	58024400 	.word	0x58024400
 80096e8:	03d09000 	.word	0x03d09000
 80096ec:	003d0900 	.word	0x003d0900
 80096f0:	0800b430 	.word	0x0800b430

080096f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009700:	f003 0308 	and.w	r3, r3, #8
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00a      	beq.n	800971e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	430a      	orrs	r2, r1
 800971c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00a      	beq.n	8009740 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	430a      	orrs	r2, r1
 800973e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009744:	f003 0302 	and.w	r3, r3, #2
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00a      	beq.n	8009762 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	430a      	orrs	r2, r1
 8009760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009766:	f003 0304 	and.w	r3, r3, #4
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00a      	beq.n	8009784 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	430a      	orrs	r2, r1
 8009782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009788:	f003 0310 	and.w	r3, r3, #16
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00a      	beq.n	80097a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	430a      	orrs	r2, r1
 80097a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097aa:	f003 0320 	and.w	r3, r3, #32
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d00a      	beq.n	80097c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	430a      	orrs	r2, r1
 80097c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d01a      	beq.n	800980a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	430a      	orrs	r2, r1
 80097e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097f2:	d10a      	bne.n	800980a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	430a      	orrs	r2, r1
 8009808:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800980e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00a      	beq.n	800982c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	430a      	orrs	r2, r1
 800982a:	605a      	str	r2, [r3, #4]
  }
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b098      	sub	sp, #96	; 0x60
 800983c:	af02      	add	r7, sp, #8
 800983e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009848:	f7f8 faba 	bl	8001dc0 <HAL_GetTick>
 800984c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f003 0308 	and.w	r3, r3, #8
 8009858:	2b08      	cmp	r3, #8
 800985a:	d12f      	bne.n	80098bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800985c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009864:	2200      	movs	r2, #0
 8009866:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f88e 	bl	800998c <UART_WaitOnFlagUntilTimeout>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d022      	beq.n	80098bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987e:	e853 3f00 	ldrex	r3, [r3]
 8009882:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009886:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800988a:	653b      	str	r3, [r7, #80]	; 0x50
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	461a      	mov	r2, r3
 8009892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009894:	647b      	str	r3, [r7, #68]	; 0x44
 8009896:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009898:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800989a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800989c:	e841 2300 	strex	r3, r2, [r1]
 80098a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1e6      	bne.n	8009876 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2220      	movs	r2, #32
 80098ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098b8:	2303      	movs	r3, #3
 80098ba:	e063      	b.n	8009984 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 0304 	and.w	r3, r3, #4
 80098c6:	2b04      	cmp	r3, #4
 80098c8:	d149      	bne.n	800995e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80098ce:	9300      	str	r3, [sp, #0]
 80098d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098d2:	2200      	movs	r2, #0
 80098d4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 f857 	bl	800998c <UART_WaitOnFlagUntilTimeout>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d03c      	beq.n	800995e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ec:	e853 3f00 	ldrex	r3, [r3]
 80098f0:	623b      	str	r3, [r7, #32]
   return(result);
 80098f2:	6a3b      	ldr	r3, [r7, #32]
 80098f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	461a      	mov	r2, r3
 8009900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009902:	633b      	str	r3, [r7, #48]	; 0x30
 8009904:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009906:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800990a:	e841 2300 	strex	r3, r2, [r1]
 800990e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1e6      	bne.n	80098e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	3308      	adds	r3, #8
 800991c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	e853 3f00 	ldrex	r3, [r3]
 8009924:	60fb      	str	r3, [r7, #12]
   return(result);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f023 0301 	bic.w	r3, r3, #1
 800992c:	64bb      	str	r3, [r7, #72]	; 0x48
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	3308      	adds	r3, #8
 8009934:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009936:	61fa      	str	r2, [r7, #28]
 8009938:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993a:	69b9      	ldr	r1, [r7, #24]
 800993c:	69fa      	ldr	r2, [r7, #28]
 800993e:	e841 2300 	strex	r3, r2, [r1]
 8009942:	617b      	str	r3, [r7, #20]
   return(result);
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d1e5      	bne.n	8009916 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2220      	movs	r2, #32
 800994e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800995a:	2303      	movs	r3, #3
 800995c:	e012      	b.n	8009984 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2220      	movs	r2, #32
 8009962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2220      	movs	r2, #32
 800996a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3758      	adds	r7, #88	; 0x58
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	603b      	str	r3, [r7, #0]
 8009998:	4613      	mov	r3, r2
 800999a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800999c:	e04f      	b.n	8009a3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099a4:	d04b      	beq.n	8009a3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099a6:	f7f8 fa0b 	bl	8001dc0 <HAL_GetTick>
 80099aa:	4602      	mov	r2, r0
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	1ad3      	subs	r3, r2, r3
 80099b0:	69ba      	ldr	r2, [r7, #24]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d302      	bcc.n	80099bc <UART_WaitOnFlagUntilTimeout+0x30>
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d101      	bne.n	80099c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80099bc:	2303      	movs	r3, #3
 80099be:	e04e      	b.n	8009a5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f003 0304 	and.w	r3, r3, #4
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d037      	beq.n	8009a3e <UART_WaitOnFlagUntilTimeout+0xb2>
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	2b80      	cmp	r3, #128	; 0x80
 80099d2:	d034      	beq.n	8009a3e <UART_WaitOnFlagUntilTimeout+0xb2>
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	2b40      	cmp	r3, #64	; 0x40
 80099d8:	d031      	beq.n	8009a3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	69db      	ldr	r3, [r3, #28]
 80099e0:	f003 0308 	and.w	r3, r3, #8
 80099e4:	2b08      	cmp	r3, #8
 80099e6:	d110      	bne.n	8009a0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2208      	movs	r2, #8
 80099ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f000 f839 	bl	8009a68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2208      	movs	r2, #8
 80099fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e029      	b.n	8009a5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	69db      	ldr	r3, [r3, #28]
 8009a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a18:	d111      	bne.n	8009a3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a24:	68f8      	ldr	r0, [r7, #12]
 8009a26:	f000 f81f 	bl	8009a68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2220      	movs	r2, #32
 8009a2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2200      	movs	r2, #0
 8009a36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	e00f      	b.n	8009a5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	69da      	ldr	r2, [r3, #28]
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	4013      	ands	r3, r2
 8009a48:	68ba      	ldr	r2, [r7, #8]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	bf0c      	ite	eq
 8009a4e:	2301      	moveq	r3, #1
 8009a50:	2300      	movne	r3, #0
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	461a      	mov	r2, r3
 8009a56:	79fb      	ldrb	r3, [r7, #7]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d0a0      	beq.n	800999e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
	...

08009a68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b095      	sub	sp, #84	; 0x54
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a78:	e853 3f00 	ldrex	r3, [r3]
 8009a7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a8e:	643b      	str	r3, [r7, #64]	; 0x40
 8009a90:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a96:	e841 2300 	strex	r3, r2, [r1]
 8009a9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1e6      	bne.n	8009a70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	3308      	adds	r3, #8
 8009aa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aaa:	6a3b      	ldr	r3, [r7, #32]
 8009aac:	e853 3f00 	ldrex	r3, [r3]
 8009ab0:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ab2:	69fa      	ldr	r2, [r7, #28]
 8009ab4:	4b1e      	ldr	r3, [pc, #120]	; (8009b30 <UART_EndRxTransfer+0xc8>)
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	64bb      	str	r3, [r7, #72]	; 0x48
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	3308      	adds	r3, #8
 8009ac0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ac4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009aca:	e841 2300 	strex	r3, r2, [r1]
 8009ace:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d1e5      	bne.n	8009aa2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d118      	bne.n	8009b10 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	e853 3f00 	ldrex	r3, [r3]
 8009aea:	60bb      	str	r3, [r7, #8]
   return(result);
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	f023 0310 	bic.w	r3, r3, #16
 8009af2:	647b      	str	r3, [r7, #68]	; 0x44
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	461a      	mov	r2, r3
 8009afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009afc:	61bb      	str	r3, [r7, #24]
 8009afe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b00:	6979      	ldr	r1, [r7, #20]
 8009b02:	69ba      	ldr	r2, [r7, #24]
 8009b04:	e841 2300 	strex	r3, r2, [r1]
 8009b08:	613b      	str	r3, [r7, #16]
   return(result);
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1e6      	bne.n	8009ade <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2220      	movs	r2, #32
 8009b14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009b24:	bf00      	nop
 8009b26:	3754      	adds	r7, #84	; 0x54
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr
 8009b30:	effffffe 	.word	0xeffffffe

08009b34 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d101      	bne.n	8009b4a <HAL_UARTEx_DisableFifoMode+0x16>
 8009b46:	2302      	movs	r3, #2
 8009b48:	e027      	b.n	8009b9a <HAL_UARTEx_DisableFifoMode+0x66>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2224      	movs	r2, #36	; 0x24
 8009b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f022 0201 	bic.w	r2, r2, #1
 8009b70:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b78:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2220      	movs	r2, #32
 8009b8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3714      	adds	r7, #20
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b084      	sub	sp, #16
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
 8009bae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d101      	bne.n	8009bbe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009bba:	2302      	movs	r3, #2
 8009bbc:	e02d      	b.n	8009c1a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2224      	movs	r2, #36	; 0x24
 8009bca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f022 0201 	bic.w	r2, r2, #1
 8009be4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	430a      	orrs	r2, r1
 8009bf8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 f850 	bl	8009ca0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2220      	movs	r2, #32
 8009c0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b084      	sub	sp, #16
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
 8009c2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d101      	bne.n	8009c3a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c36:	2302      	movs	r3, #2
 8009c38:	e02d      	b.n	8009c96 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2224      	movs	r2, #36	; 0x24
 8009c46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f022 0201 	bic.w	r2, r2, #1
 8009c60:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	683a      	ldr	r2, [r7, #0]
 8009c72:	430a      	orrs	r2, r1
 8009c74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 f812 	bl	8009ca0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	68fa      	ldr	r2, [r7, #12]
 8009c82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2220      	movs	r2, #32
 8009c88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3710      	adds	r7, #16
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
	...

08009ca0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b085      	sub	sp, #20
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d108      	bne.n	8009cc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009cc0:	e031      	b.n	8009d26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009cc2:	2310      	movs	r3, #16
 8009cc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009cc6:	2310      	movs	r3, #16
 8009cc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	0e5b      	lsrs	r3, r3, #25
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	f003 0307 	and.w	r3, r3, #7
 8009cd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	0f5b      	lsrs	r3, r3, #29
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	f003 0307 	and.w	r3, r3, #7
 8009ce8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cea:	7bbb      	ldrb	r3, [r7, #14]
 8009cec:	7b3a      	ldrb	r2, [r7, #12]
 8009cee:	4911      	ldr	r1, [pc, #68]	; (8009d34 <UARTEx_SetNbDataToProcess+0x94>)
 8009cf0:	5c8a      	ldrb	r2, [r1, r2]
 8009cf2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009cf6:	7b3a      	ldrb	r2, [r7, #12]
 8009cf8:	490f      	ldr	r1, [pc, #60]	; (8009d38 <UARTEx_SetNbDataToProcess+0x98>)
 8009cfa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d08:	7bfb      	ldrb	r3, [r7, #15]
 8009d0a:	7b7a      	ldrb	r2, [r7, #13]
 8009d0c:	4909      	ldr	r1, [pc, #36]	; (8009d34 <UARTEx_SetNbDataToProcess+0x94>)
 8009d0e:	5c8a      	ldrb	r2, [r1, r2]
 8009d10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d14:	7b7a      	ldrb	r2, [r7, #13]
 8009d16:	4908      	ldr	r1, [pc, #32]	; (8009d38 <UARTEx_SetNbDataToProcess+0x98>)
 8009d18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d1e:	b29a      	uxth	r2, r3
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009d26:	bf00      	nop
 8009d28:	3714      	adds	r7, #20
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	0800b448 	.word	0x0800b448
 8009d38:	0800b450 	.word	0x0800b450

08009d3c <_vsniprintf_r>:
 8009d3c:	b530      	push	{r4, r5, lr}
 8009d3e:	4614      	mov	r4, r2
 8009d40:	2c00      	cmp	r4, #0
 8009d42:	b09b      	sub	sp, #108	; 0x6c
 8009d44:	4605      	mov	r5, r0
 8009d46:	461a      	mov	r2, r3
 8009d48:	da05      	bge.n	8009d56 <_vsniprintf_r+0x1a>
 8009d4a:	238b      	movs	r3, #139	; 0x8b
 8009d4c:	6003      	str	r3, [r0, #0]
 8009d4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d52:	b01b      	add	sp, #108	; 0x6c
 8009d54:	bd30      	pop	{r4, r5, pc}
 8009d56:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009d5a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009d5e:	bf14      	ite	ne
 8009d60:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009d64:	4623      	moveq	r3, r4
 8009d66:	9302      	str	r3, [sp, #8]
 8009d68:	9305      	str	r3, [sp, #20]
 8009d6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009d6e:	9100      	str	r1, [sp, #0]
 8009d70:	9104      	str	r1, [sp, #16]
 8009d72:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009d76:	4669      	mov	r1, sp
 8009d78:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009d7a:	f000 f8a7 	bl	8009ecc <_svfiprintf_r>
 8009d7e:	1c43      	adds	r3, r0, #1
 8009d80:	bfbc      	itt	lt
 8009d82:	238b      	movlt	r3, #139	; 0x8b
 8009d84:	602b      	strlt	r3, [r5, #0]
 8009d86:	2c00      	cmp	r4, #0
 8009d88:	d0e3      	beq.n	8009d52 <_vsniprintf_r+0x16>
 8009d8a:	9b00      	ldr	r3, [sp, #0]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	701a      	strb	r2, [r3, #0]
 8009d90:	e7df      	b.n	8009d52 <_vsniprintf_r+0x16>
	...

08009d94 <vsniprintf>:
 8009d94:	b507      	push	{r0, r1, r2, lr}
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	4613      	mov	r3, r2
 8009d9a:	460a      	mov	r2, r1
 8009d9c:	4601      	mov	r1, r0
 8009d9e:	4803      	ldr	r0, [pc, #12]	; (8009dac <vsniprintf+0x18>)
 8009da0:	6800      	ldr	r0, [r0, #0]
 8009da2:	f7ff ffcb 	bl	8009d3c <_vsniprintf_r>
 8009da6:	b003      	add	sp, #12
 8009da8:	f85d fb04 	ldr.w	pc, [sp], #4
 8009dac:	2400005c 	.word	0x2400005c

08009db0 <memset>:
 8009db0:	4402      	add	r2, r0
 8009db2:	4603      	mov	r3, r0
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d100      	bne.n	8009dba <memset+0xa>
 8009db8:	4770      	bx	lr
 8009dba:	f803 1b01 	strb.w	r1, [r3], #1
 8009dbe:	e7f9      	b.n	8009db4 <memset+0x4>

08009dc0 <__errno>:
 8009dc0:	4b01      	ldr	r3, [pc, #4]	; (8009dc8 <__errno+0x8>)
 8009dc2:	6818      	ldr	r0, [r3, #0]
 8009dc4:	4770      	bx	lr
 8009dc6:	bf00      	nop
 8009dc8:	2400005c 	.word	0x2400005c

08009dcc <__libc_init_array>:
 8009dcc:	b570      	push	{r4, r5, r6, lr}
 8009dce:	4d0d      	ldr	r5, [pc, #52]	; (8009e04 <__libc_init_array+0x38>)
 8009dd0:	4c0d      	ldr	r4, [pc, #52]	; (8009e08 <__libc_init_array+0x3c>)
 8009dd2:	1b64      	subs	r4, r4, r5
 8009dd4:	10a4      	asrs	r4, r4, #2
 8009dd6:	2600      	movs	r6, #0
 8009dd8:	42a6      	cmp	r6, r4
 8009dda:	d109      	bne.n	8009df0 <__libc_init_array+0x24>
 8009ddc:	4d0b      	ldr	r5, [pc, #44]	; (8009e0c <__libc_init_array+0x40>)
 8009dde:	4c0c      	ldr	r4, [pc, #48]	; (8009e10 <__libc_init_array+0x44>)
 8009de0:	f001 faa2 	bl	800b328 <_init>
 8009de4:	1b64      	subs	r4, r4, r5
 8009de6:	10a4      	asrs	r4, r4, #2
 8009de8:	2600      	movs	r6, #0
 8009dea:	42a6      	cmp	r6, r4
 8009dec:	d105      	bne.n	8009dfa <__libc_init_array+0x2e>
 8009dee:	bd70      	pop	{r4, r5, r6, pc}
 8009df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009df4:	4798      	blx	r3
 8009df6:	3601      	adds	r6, #1
 8009df8:	e7ee      	b.n	8009dd8 <__libc_init_array+0xc>
 8009dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dfe:	4798      	blx	r3
 8009e00:	3601      	adds	r6, #1
 8009e02:	e7f2      	b.n	8009dea <__libc_init_array+0x1e>
 8009e04:	0800b670 	.word	0x0800b670
 8009e08:	0800b670 	.word	0x0800b670
 8009e0c:	0800b670 	.word	0x0800b670
 8009e10:	0800b674 	.word	0x0800b674

08009e14 <__retarget_lock_acquire_recursive>:
 8009e14:	4770      	bx	lr

08009e16 <__retarget_lock_release_recursive>:
 8009e16:	4770      	bx	lr

08009e18 <__ssputs_r>:
 8009e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e1c:	688e      	ldr	r6, [r1, #8]
 8009e1e:	461f      	mov	r7, r3
 8009e20:	42be      	cmp	r6, r7
 8009e22:	680b      	ldr	r3, [r1, #0]
 8009e24:	4682      	mov	sl, r0
 8009e26:	460c      	mov	r4, r1
 8009e28:	4690      	mov	r8, r2
 8009e2a:	d82c      	bhi.n	8009e86 <__ssputs_r+0x6e>
 8009e2c:	898a      	ldrh	r2, [r1, #12]
 8009e2e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e32:	d026      	beq.n	8009e82 <__ssputs_r+0x6a>
 8009e34:	6965      	ldr	r5, [r4, #20]
 8009e36:	6909      	ldr	r1, [r1, #16]
 8009e38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e3c:	eba3 0901 	sub.w	r9, r3, r1
 8009e40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e44:	1c7b      	adds	r3, r7, #1
 8009e46:	444b      	add	r3, r9
 8009e48:	106d      	asrs	r5, r5, #1
 8009e4a:	429d      	cmp	r5, r3
 8009e4c:	bf38      	it	cc
 8009e4e:	461d      	movcc	r5, r3
 8009e50:	0553      	lsls	r3, r2, #21
 8009e52:	d527      	bpl.n	8009ea4 <__ssputs_r+0x8c>
 8009e54:	4629      	mov	r1, r5
 8009e56:	f000 f957 	bl	800a108 <_malloc_r>
 8009e5a:	4606      	mov	r6, r0
 8009e5c:	b360      	cbz	r0, 8009eb8 <__ssputs_r+0xa0>
 8009e5e:	6921      	ldr	r1, [r4, #16]
 8009e60:	464a      	mov	r2, r9
 8009e62:	f000 fbc7 	bl	800a5f4 <memcpy>
 8009e66:	89a3      	ldrh	r3, [r4, #12]
 8009e68:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e70:	81a3      	strh	r3, [r4, #12]
 8009e72:	6126      	str	r6, [r4, #16]
 8009e74:	6165      	str	r5, [r4, #20]
 8009e76:	444e      	add	r6, r9
 8009e78:	eba5 0509 	sub.w	r5, r5, r9
 8009e7c:	6026      	str	r6, [r4, #0]
 8009e7e:	60a5      	str	r5, [r4, #8]
 8009e80:	463e      	mov	r6, r7
 8009e82:	42be      	cmp	r6, r7
 8009e84:	d900      	bls.n	8009e88 <__ssputs_r+0x70>
 8009e86:	463e      	mov	r6, r7
 8009e88:	6820      	ldr	r0, [r4, #0]
 8009e8a:	4632      	mov	r2, r6
 8009e8c:	4641      	mov	r1, r8
 8009e8e:	f000 fb86 	bl	800a59e <memmove>
 8009e92:	68a3      	ldr	r3, [r4, #8]
 8009e94:	1b9b      	subs	r3, r3, r6
 8009e96:	60a3      	str	r3, [r4, #8]
 8009e98:	6823      	ldr	r3, [r4, #0]
 8009e9a:	4433      	add	r3, r6
 8009e9c:	6023      	str	r3, [r4, #0]
 8009e9e:	2000      	movs	r0, #0
 8009ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ea4:	462a      	mov	r2, r5
 8009ea6:	f000 fb4b 	bl	800a540 <_realloc_r>
 8009eaa:	4606      	mov	r6, r0
 8009eac:	2800      	cmp	r0, #0
 8009eae:	d1e0      	bne.n	8009e72 <__ssputs_r+0x5a>
 8009eb0:	6921      	ldr	r1, [r4, #16]
 8009eb2:	4650      	mov	r0, sl
 8009eb4:	f000 fbac 	bl	800a610 <_free_r>
 8009eb8:	230c      	movs	r3, #12
 8009eba:	f8ca 3000 	str.w	r3, [sl]
 8009ebe:	89a3      	ldrh	r3, [r4, #12]
 8009ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ec4:	81a3      	strh	r3, [r4, #12]
 8009ec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009eca:	e7e9      	b.n	8009ea0 <__ssputs_r+0x88>

08009ecc <_svfiprintf_r>:
 8009ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed0:	4698      	mov	r8, r3
 8009ed2:	898b      	ldrh	r3, [r1, #12]
 8009ed4:	061b      	lsls	r3, r3, #24
 8009ed6:	b09d      	sub	sp, #116	; 0x74
 8009ed8:	4607      	mov	r7, r0
 8009eda:	460d      	mov	r5, r1
 8009edc:	4614      	mov	r4, r2
 8009ede:	d50e      	bpl.n	8009efe <_svfiprintf_r+0x32>
 8009ee0:	690b      	ldr	r3, [r1, #16]
 8009ee2:	b963      	cbnz	r3, 8009efe <_svfiprintf_r+0x32>
 8009ee4:	2140      	movs	r1, #64	; 0x40
 8009ee6:	f000 f90f 	bl	800a108 <_malloc_r>
 8009eea:	6028      	str	r0, [r5, #0]
 8009eec:	6128      	str	r0, [r5, #16]
 8009eee:	b920      	cbnz	r0, 8009efa <_svfiprintf_r+0x2e>
 8009ef0:	230c      	movs	r3, #12
 8009ef2:	603b      	str	r3, [r7, #0]
 8009ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ef8:	e0d0      	b.n	800a09c <_svfiprintf_r+0x1d0>
 8009efa:	2340      	movs	r3, #64	; 0x40
 8009efc:	616b      	str	r3, [r5, #20]
 8009efe:	2300      	movs	r3, #0
 8009f00:	9309      	str	r3, [sp, #36]	; 0x24
 8009f02:	2320      	movs	r3, #32
 8009f04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f08:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f0c:	2330      	movs	r3, #48	; 0x30
 8009f0e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a0b4 <_svfiprintf_r+0x1e8>
 8009f12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f16:	f04f 0901 	mov.w	r9, #1
 8009f1a:	4623      	mov	r3, r4
 8009f1c:	469a      	mov	sl, r3
 8009f1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f22:	b10a      	cbz	r2, 8009f28 <_svfiprintf_r+0x5c>
 8009f24:	2a25      	cmp	r2, #37	; 0x25
 8009f26:	d1f9      	bne.n	8009f1c <_svfiprintf_r+0x50>
 8009f28:	ebba 0b04 	subs.w	fp, sl, r4
 8009f2c:	d00b      	beq.n	8009f46 <_svfiprintf_r+0x7a>
 8009f2e:	465b      	mov	r3, fp
 8009f30:	4622      	mov	r2, r4
 8009f32:	4629      	mov	r1, r5
 8009f34:	4638      	mov	r0, r7
 8009f36:	f7ff ff6f 	bl	8009e18 <__ssputs_r>
 8009f3a:	3001      	adds	r0, #1
 8009f3c:	f000 80a9 	beq.w	800a092 <_svfiprintf_r+0x1c6>
 8009f40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f42:	445a      	add	r2, fp
 8009f44:	9209      	str	r2, [sp, #36]	; 0x24
 8009f46:	f89a 3000 	ldrb.w	r3, [sl]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f000 80a1 	beq.w	800a092 <_svfiprintf_r+0x1c6>
 8009f50:	2300      	movs	r3, #0
 8009f52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f5a:	f10a 0a01 	add.w	sl, sl, #1
 8009f5e:	9304      	str	r3, [sp, #16]
 8009f60:	9307      	str	r3, [sp, #28]
 8009f62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f66:	931a      	str	r3, [sp, #104]	; 0x68
 8009f68:	4654      	mov	r4, sl
 8009f6a:	2205      	movs	r2, #5
 8009f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f70:	4850      	ldr	r0, [pc, #320]	; (800a0b4 <_svfiprintf_r+0x1e8>)
 8009f72:	f7f6 f9b5 	bl	80002e0 <memchr>
 8009f76:	9a04      	ldr	r2, [sp, #16]
 8009f78:	b9d8      	cbnz	r0, 8009fb2 <_svfiprintf_r+0xe6>
 8009f7a:	06d0      	lsls	r0, r2, #27
 8009f7c:	bf44      	itt	mi
 8009f7e:	2320      	movmi	r3, #32
 8009f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f84:	0711      	lsls	r1, r2, #28
 8009f86:	bf44      	itt	mi
 8009f88:	232b      	movmi	r3, #43	; 0x2b
 8009f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8009f92:	2b2a      	cmp	r3, #42	; 0x2a
 8009f94:	d015      	beq.n	8009fc2 <_svfiprintf_r+0xf6>
 8009f96:	9a07      	ldr	r2, [sp, #28]
 8009f98:	4654      	mov	r4, sl
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	f04f 0c0a 	mov.w	ip, #10
 8009fa0:	4621      	mov	r1, r4
 8009fa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fa6:	3b30      	subs	r3, #48	; 0x30
 8009fa8:	2b09      	cmp	r3, #9
 8009faa:	d94d      	bls.n	800a048 <_svfiprintf_r+0x17c>
 8009fac:	b1b0      	cbz	r0, 8009fdc <_svfiprintf_r+0x110>
 8009fae:	9207      	str	r2, [sp, #28]
 8009fb0:	e014      	b.n	8009fdc <_svfiprintf_r+0x110>
 8009fb2:	eba0 0308 	sub.w	r3, r0, r8
 8009fb6:	fa09 f303 	lsl.w	r3, r9, r3
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	9304      	str	r3, [sp, #16]
 8009fbe:	46a2      	mov	sl, r4
 8009fc0:	e7d2      	b.n	8009f68 <_svfiprintf_r+0x9c>
 8009fc2:	9b03      	ldr	r3, [sp, #12]
 8009fc4:	1d19      	adds	r1, r3, #4
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	9103      	str	r1, [sp, #12]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	bfbb      	ittet	lt
 8009fce:	425b      	neglt	r3, r3
 8009fd0:	f042 0202 	orrlt.w	r2, r2, #2
 8009fd4:	9307      	strge	r3, [sp, #28]
 8009fd6:	9307      	strlt	r3, [sp, #28]
 8009fd8:	bfb8      	it	lt
 8009fda:	9204      	strlt	r2, [sp, #16]
 8009fdc:	7823      	ldrb	r3, [r4, #0]
 8009fde:	2b2e      	cmp	r3, #46	; 0x2e
 8009fe0:	d10c      	bne.n	8009ffc <_svfiprintf_r+0x130>
 8009fe2:	7863      	ldrb	r3, [r4, #1]
 8009fe4:	2b2a      	cmp	r3, #42	; 0x2a
 8009fe6:	d134      	bne.n	800a052 <_svfiprintf_r+0x186>
 8009fe8:	9b03      	ldr	r3, [sp, #12]
 8009fea:	1d1a      	adds	r2, r3, #4
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	9203      	str	r2, [sp, #12]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	bfb8      	it	lt
 8009ff4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009ff8:	3402      	adds	r4, #2
 8009ffa:	9305      	str	r3, [sp, #20]
 8009ffc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a0c4 <_svfiprintf_r+0x1f8>
 800a000:	7821      	ldrb	r1, [r4, #0]
 800a002:	2203      	movs	r2, #3
 800a004:	4650      	mov	r0, sl
 800a006:	f7f6 f96b 	bl	80002e0 <memchr>
 800a00a:	b138      	cbz	r0, 800a01c <_svfiprintf_r+0x150>
 800a00c:	9b04      	ldr	r3, [sp, #16]
 800a00e:	eba0 000a 	sub.w	r0, r0, sl
 800a012:	2240      	movs	r2, #64	; 0x40
 800a014:	4082      	lsls	r2, r0
 800a016:	4313      	orrs	r3, r2
 800a018:	3401      	adds	r4, #1
 800a01a:	9304      	str	r3, [sp, #16]
 800a01c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a020:	4825      	ldr	r0, [pc, #148]	; (800a0b8 <_svfiprintf_r+0x1ec>)
 800a022:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a026:	2206      	movs	r2, #6
 800a028:	f7f6 f95a 	bl	80002e0 <memchr>
 800a02c:	2800      	cmp	r0, #0
 800a02e:	d038      	beq.n	800a0a2 <_svfiprintf_r+0x1d6>
 800a030:	4b22      	ldr	r3, [pc, #136]	; (800a0bc <_svfiprintf_r+0x1f0>)
 800a032:	bb1b      	cbnz	r3, 800a07c <_svfiprintf_r+0x1b0>
 800a034:	9b03      	ldr	r3, [sp, #12]
 800a036:	3307      	adds	r3, #7
 800a038:	f023 0307 	bic.w	r3, r3, #7
 800a03c:	3308      	adds	r3, #8
 800a03e:	9303      	str	r3, [sp, #12]
 800a040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a042:	4433      	add	r3, r6
 800a044:	9309      	str	r3, [sp, #36]	; 0x24
 800a046:	e768      	b.n	8009f1a <_svfiprintf_r+0x4e>
 800a048:	fb0c 3202 	mla	r2, ip, r2, r3
 800a04c:	460c      	mov	r4, r1
 800a04e:	2001      	movs	r0, #1
 800a050:	e7a6      	b.n	8009fa0 <_svfiprintf_r+0xd4>
 800a052:	2300      	movs	r3, #0
 800a054:	3401      	adds	r4, #1
 800a056:	9305      	str	r3, [sp, #20]
 800a058:	4619      	mov	r1, r3
 800a05a:	f04f 0c0a 	mov.w	ip, #10
 800a05e:	4620      	mov	r0, r4
 800a060:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a064:	3a30      	subs	r2, #48	; 0x30
 800a066:	2a09      	cmp	r2, #9
 800a068:	d903      	bls.n	800a072 <_svfiprintf_r+0x1a6>
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d0c6      	beq.n	8009ffc <_svfiprintf_r+0x130>
 800a06e:	9105      	str	r1, [sp, #20]
 800a070:	e7c4      	b.n	8009ffc <_svfiprintf_r+0x130>
 800a072:	fb0c 2101 	mla	r1, ip, r1, r2
 800a076:	4604      	mov	r4, r0
 800a078:	2301      	movs	r3, #1
 800a07a:	e7f0      	b.n	800a05e <_svfiprintf_r+0x192>
 800a07c:	ab03      	add	r3, sp, #12
 800a07e:	9300      	str	r3, [sp, #0]
 800a080:	462a      	mov	r2, r5
 800a082:	4b0f      	ldr	r3, [pc, #60]	; (800a0c0 <_svfiprintf_r+0x1f4>)
 800a084:	a904      	add	r1, sp, #16
 800a086:	4638      	mov	r0, r7
 800a088:	f3af 8000 	nop.w
 800a08c:	1c42      	adds	r2, r0, #1
 800a08e:	4606      	mov	r6, r0
 800a090:	d1d6      	bne.n	800a040 <_svfiprintf_r+0x174>
 800a092:	89ab      	ldrh	r3, [r5, #12]
 800a094:	065b      	lsls	r3, r3, #25
 800a096:	f53f af2d 	bmi.w	8009ef4 <_svfiprintf_r+0x28>
 800a09a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a09c:	b01d      	add	sp, #116	; 0x74
 800a09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a2:	ab03      	add	r3, sp, #12
 800a0a4:	9300      	str	r3, [sp, #0]
 800a0a6:	462a      	mov	r2, r5
 800a0a8:	4b05      	ldr	r3, [pc, #20]	; (800a0c0 <_svfiprintf_r+0x1f4>)
 800a0aa:	a904      	add	r1, sp, #16
 800a0ac:	4638      	mov	r0, r7
 800a0ae:	f000 f919 	bl	800a2e4 <_printf_i>
 800a0b2:	e7eb      	b.n	800a08c <_svfiprintf_r+0x1c0>
 800a0b4:	0800b458 	.word	0x0800b458
 800a0b8:	0800b462 	.word	0x0800b462
 800a0bc:	00000000 	.word	0x00000000
 800a0c0:	08009e19 	.word	0x08009e19
 800a0c4:	0800b45e 	.word	0x0800b45e

0800a0c8 <sbrk_aligned>:
 800a0c8:	b570      	push	{r4, r5, r6, lr}
 800a0ca:	4e0e      	ldr	r6, [pc, #56]	; (800a104 <sbrk_aligned+0x3c>)
 800a0cc:	460c      	mov	r4, r1
 800a0ce:	6831      	ldr	r1, [r6, #0]
 800a0d0:	4605      	mov	r5, r0
 800a0d2:	b911      	cbnz	r1, 800a0da <sbrk_aligned+0x12>
 800a0d4:	f000 fa7e 	bl	800a5d4 <_sbrk_r>
 800a0d8:	6030      	str	r0, [r6, #0]
 800a0da:	4621      	mov	r1, r4
 800a0dc:	4628      	mov	r0, r5
 800a0de:	f000 fa79 	bl	800a5d4 <_sbrk_r>
 800a0e2:	1c43      	adds	r3, r0, #1
 800a0e4:	d00a      	beq.n	800a0fc <sbrk_aligned+0x34>
 800a0e6:	1cc4      	adds	r4, r0, #3
 800a0e8:	f024 0403 	bic.w	r4, r4, #3
 800a0ec:	42a0      	cmp	r0, r4
 800a0ee:	d007      	beq.n	800a100 <sbrk_aligned+0x38>
 800a0f0:	1a21      	subs	r1, r4, r0
 800a0f2:	4628      	mov	r0, r5
 800a0f4:	f000 fa6e 	bl	800a5d4 <_sbrk_r>
 800a0f8:	3001      	adds	r0, #1
 800a0fa:	d101      	bne.n	800a100 <sbrk_aligned+0x38>
 800a0fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a100:	4620      	mov	r0, r4
 800a102:	bd70      	pop	{r4, r5, r6, pc}
 800a104:	24001370 	.word	0x24001370

0800a108 <_malloc_r>:
 800a108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a10c:	1ccd      	adds	r5, r1, #3
 800a10e:	f025 0503 	bic.w	r5, r5, #3
 800a112:	3508      	adds	r5, #8
 800a114:	2d0c      	cmp	r5, #12
 800a116:	bf38      	it	cc
 800a118:	250c      	movcc	r5, #12
 800a11a:	2d00      	cmp	r5, #0
 800a11c:	4607      	mov	r7, r0
 800a11e:	db01      	blt.n	800a124 <_malloc_r+0x1c>
 800a120:	42a9      	cmp	r1, r5
 800a122:	d905      	bls.n	800a130 <_malloc_r+0x28>
 800a124:	230c      	movs	r3, #12
 800a126:	603b      	str	r3, [r7, #0]
 800a128:	2600      	movs	r6, #0
 800a12a:	4630      	mov	r0, r6
 800a12c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a130:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a204 <_malloc_r+0xfc>
 800a134:	f000 f9f8 	bl	800a528 <__malloc_lock>
 800a138:	f8d8 3000 	ldr.w	r3, [r8]
 800a13c:	461c      	mov	r4, r3
 800a13e:	bb5c      	cbnz	r4, 800a198 <_malloc_r+0x90>
 800a140:	4629      	mov	r1, r5
 800a142:	4638      	mov	r0, r7
 800a144:	f7ff ffc0 	bl	800a0c8 <sbrk_aligned>
 800a148:	1c43      	adds	r3, r0, #1
 800a14a:	4604      	mov	r4, r0
 800a14c:	d155      	bne.n	800a1fa <_malloc_r+0xf2>
 800a14e:	f8d8 4000 	ldr.w	r4, [r8]
 800a152:	4626      	mov	r6, r4
 800a154:	2e00      	cmp	r6, #0
 800a156:	d145      	bne.n	800a1e4 <_malloc_r+0xdc>
 800a158:	2c00      	cmp	r4, #0
 800a15a:	d048      	beq.n	800a1ee <_malloc_r+0xe6>
 800a15c:	6823      	ldr	r3, [r4, #0]
 800a15e:	4631      	mov	r1, r6
 800a160:	4638      	mov	r0, r7
 800a162:	eb04 0903 	add.w	r9, r4, r3
 800a166:	f000 fa35 	bl	800a5d4 <_sbrk_r>
 800a16a:	4581      	cmp	r9, r0
 800a16c:	d13f      	bne.n	800a1ee <_malloc_r+0xe6>
 800a16e:	6821      	ldr	r1, [r4, #0]
 800a170:	1a6d      	subs	r5, r5, r1
 800a172:	4629      	mov	r1, r5
 800a174:	4638      	mov	r0, r7
 800a176:	f7ff ffa7 	bl	800a0c8 <sbrk_aligned>
 800a17a:	3001      	adds	r0, #1
 800a17c:	d037      	beq.n	800a1ee <_malloc_r+0xe6>
 800a17e:	6823      	ldr	r3, [r4, #0]
 800a180:	442b      	add	r3, r5
 800a182:	6023      	str	r3, [r4, #0]
 800a184:	f8d8 3000 	ldr.w	r3, [r8]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d038      	beq.n	800a1fe <_malloc_r+0xf6>
 800a18c:	685a      	ldr	r2, [r3, #4]
 800a18e:	42a2      	cmp	r2, r4
 800a190:	d12b      	bne.n	800a1ea <_malloc_r+0xe2>
 800a192:	2200      	movs	r2, #0
 800a194:	605a      	str	r2, [r3, #4]
 800a196:	e00f      	b.n	800a1b8 <_malloc_r+0xb0>
 800a198:	6822      	ldr	r2, [r4, #0]
 800a19a:	1b52      	subs	r2, r2, r5
 800a19c:	d41f      	bmi.n	800a1de <_malloc_r+0xd6>
 800a19e:	2a0b      	cmp	r2, #11
 800a1a0:	d917      	bls.n	800a1d2 <_malloc_r+0xca>
 800a1a2:	1961      	adds	r1, r4, r5
 800a1a4:	42a3      	cmp	r3, r4
 800a1a6:	6025      	str	r5, [r4, #0]
 800a1a8:	bf18      	it	ne
 800a1aa:	6059      	strne	r1, [r3, #4]
 800a1ac:	6863      	ldr	r3, [r4, #4]
 800a1ae:	bf08      	it	eq
 800a1b0:	f8c8 1000 	streq.w	r1, [r8]
 800a1b4:	5162      	str	r2, [r4, r5]
 800a1b6:	604b      	str	r3, [r1, #4]
 800a1b8:	4638      	mov	r0, r7
 800a1ba:	f104 060b 	add.w	r6, r4, #11
 800a1be:	f000 f9b9 	bl	800a534 <__malloc_unlock>
 800a1c2:	f026 0607 	bic.w	r6, r6, #7
 800a1c6:	1d23      	adds	r3, r4, #4
 800a1c8:	1af2      	subs	r2, r6, r3
 800a1ca:	d0ae      	beq.n	800a12a <_malloc_r+0x22>
 800a1cc:	1b9b      	subs	r3, r3, r6
 800a1ce:	50a3      	str	r3, [r4, r2]
 800a1d0:	e7ab      	b.n	800a12a <_malloc_r+0x22>
 800a1d2:	42a3      	cmp	r3, r4
 800a1d4:	6862      	ldr	r2, [r4, #4]
 800a1d6:	d1dd      	bne.n	800a194 <_malloc_r+0x8c>
 800a1d8:	f8c8 2000 	str.w	r2, [r8]
 800a1dc:	e7ec      	b.n	800a1b8 <_malloc_r+0xb0>
 800a1de:	4623      	mov	r3, r4
 800a1e0:	6864      	ldr	r4, [r4, #4]
 800a1e2:	e7ac      	b.n	800a13e <_malloc_r+0x36>
 800a1e4:	4634      	mov	r4, r6
 800a1e6:	6876      	ldr	r6, [r6, #4]
 800a1e8:	e7b4      	b.n	800a154 <_malloc_r+0x4c>
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	e7cc      	b.n	800a188 <_malloc_r+0x80>
 800a1ee:	230c      	movs	r3, #12
 800a1f0:	603b      	str	r3, [r7, #0]
 800a1f2:	4638      	mov	r0, r7
 800a1f4:	f000 f99e 	bl	800a534 <__malloc_unlock>
 800a1f8:	e797      	b.n	800a12a <_malloc_r+0x22>
 800a1fa:	6025      	str	r5, [r4, #0]
 800a1fc:	e7dc      	b.n	800a1b8 <_malloc_r+0xb0>
 800a1fe:	605b      	str	r3, [r3, #4]
 800a200:	deff      	udf	#255	; 0xff
 800a202:	bf00      	nop
 800a204:	2400136c 	.word	0x2400136c

0800a208 <_printf_common>:
 800a208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a20c:	4616      	mov	r6, r2
 800a20e:	4699      	mov	r9, r3
 800a210:	688a      	ldr	r2, [r1, #8]
 800a212:	690b      	ldr	r3, [r1, #16]
 800a214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a218:	4293      	cmp	r3, r2
 800a21a:	bfb8      	it	lt
 800a21c:	4613      	movlt	r3, r2
 800a21e:	6033      	str	r3, [r6, #0]
 800a220:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a224:	4607      	mov	r7, r0
 800a226:	460c      	mov	r4, r1
 800a228:	b10a      	cbz	r2, 800a22e <_printf_common+0x26>
 800a22a:	3301      	adds	r3, #1
 800a22c:	6033      	str	r3, [r6, #0]
 800a22e:	6823      	ldr	r3, [r4, #0]
 800a230:	0699      	lsls	r1, r3, #26
 800a232:	bf42      	ittt	mi
 800a234:	6833      	ldrmi	r3, [r6, #0]
 800a236:	3302      	addmi	r3, #2
 800a238:	6033      	strmi	r3, [r6, #0]
 800a23a:	6825      	ldr	r5, [r4, #0]
 800a23c:	f015 0506 	ands.w	r5, r5, #6
 800a240:	d106      	bne.n	800a250 <_printf_common+0x48>
 800a242:	f104 0a19 	add.w	sl, r4, #25
 800a246:	68e3      	ldr	r3, [r4, #12]
 800a248:	6832      	ldr	r2, [r6, #0]
 800a24a:	1a9b      	subs	r3, r3, r2
 800a24c:	42ab      	cmp	r3, r5
 800a24e:	dc26      	bgt.n	800a29e <_printf_common+0x96>
 800a250:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a254:	1e13      	subs	r3, r2, #0
 800a256:	6822      	ldr	r2, [r4, #0]
 800a258:	bf18      	it	ne
 800a25a:	2301      	movne	r3, #1
 800a25c:	0692      	lsls	r2, r2, #26
 800a25e:	d42b      	bmi.n	800a2b8 <_printf_common+0xb0>
 800a260:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a264:	4649      	mov	r1, r9
 800a266:	4638      	mov	r0, r7
 800a268:	47c0      	blx	r8
 800a26a:	3001      	adds	r0, #1
 800a26c:	d01e      	beq.n	800a2ac <_printf_common+0xa4>
 800a26e:	6823      	ldr	r3, [r4, #0]
 800a270:	6922      	ldr	r2, [r4, #16]
 800a272:	f003 0306 	and.w	r3, r3, #6
 800a276:	2b04      	cmp	r3, #4
 800a278:	bf02      	ittt	eq
 800a27a:	68e5      	ldreq	r5, [r4, #12]
 800a27c:	6833      	ldreq	r3, [r6, #0]
 800a27e:	1aed      	subeq	r5, r5, r3
 800a280:	68a3      	ldr	r3, [r4, #8]
 800a282:	bf0c      	ite	eq
 800a284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a288:	2500      	movne	r5, #0
 800a28a:	4293      	cmp	r3, r2
 800a28c:	bfc4      	itt	gt
 800a28e:	1a9b      	subgt	r3, r3, r2
 800a290:	18ed      	addgt	r5, r5, r3
 800a292:	2600      	movs	r6, #0
 800a294:	341a      	adds	r4, #26
 800a296:	42b5      	cmp	r5, r6
 800a298:	d11a      	bne.n	800a2d0 <_printf_common+0xc8>
 800a29a:	2000      	movs	r0, #0
 800a29c:	e008      	b.n	800a2b0 <_printf_common+0xa8>
 800a29e:	2301      	movs	r3, #1
 800a2a0:	4652      	mov	r2, sl
 800a2a2:	4649      	mov	r1, r9
 800a2a4:	4638      	mov	r0, r7
 800a2a6:	47c0      	blx	r8
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	d103      	bne.n	800a2b4 <_printf_common+0xac>
 800a2ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2b4:	3501      	adds	r5, #1
 800a2b6:	e7c6      	b.n	800a246 <_printf_common+0x3e>
 800a2b8:	18e1      	adds	r1, r4, r3
 800a2ba:	1c5a      	adds	r2, r3, #1
 800a2bc:	2030      	movs	r0, #48	; 0x30
 800a2be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2c2:	4422      	add	r2, r4
 800a2c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2cc:	3302      	adds	r3, #2
 800a2ce:	e7c7      	b.n	800a260 <_printf_common+0x58>
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	4622      	mov	r2, r4
 800a2d4:	4649      	mov	r1, r9
 800a2d6:	4638      	mov	r0, r7
 800a2d8:	47c0      	blx	r8
 800a2da:	3001      	adds	r0, #1
 800a2dc:	d0e6      	beq.n	800a2ac <_printf_common+0xa4>
 800a2de:	3601      	adds	r6, #1
 800a2e0:	e7d9      	b.n	800a296 <_printf_common+0x8e>
	...

0800a2e4 <_printf_i>:
 800a2e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2e8:	7e0f      	ldrb	r7, [r1, #24]
 800a2ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a2ec:	2f78      	cmp	r7, #120	; 0x78
 800a2ee:	4691      	mov	r9, r2
 800a2f0:	4680      	mov	r8, r0
 800a2f2:	460c      	mov	r4, r1
 800a2f4:	469a      	mov	sl, r3
 800a2f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a2fa:	d807      	bhi.n	800a30c <_printf_i+0x28>
 800a2fc:	2f62      	cmp	r7, #98	; 0x62
 800a2fe:	d80a      	bhi.n	800a316 <_printf_i+0x32>
 800a300:	2f00      	cmp	r7, #0
 800a302:	f000 80d4 	beq.w	800a4ae <_printf_i+0x1ca>
 800a306:	2f58      	cmp	r7, #88	; 0x58
 800a308:	f000 80c0 	beq.w	800a48c <_printf_i+0x1a8>
 800a30c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a310:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a314:	e03a      	b.n	800a38c <_printf_i+0xa8>
 800a316:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a31a:	2b15      	cmp	r3, #21
 800a31c:	d8f6      	bhi.n	800a30c <_printf_i+0x28>
 800a31e:	a101      	add	r1, pc, #4	; (adr r1, 800a324 <_printf_i+0x40>)
 800a320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a324:	0800a37d 	.word	0x0800a37d
 800a328:	0800a391 	.word	0x0800a391
 800a32c:	0800a30d 	.word	0x0800a30d
 800a330:	0800a30d 	.word	0x0800a30d
 800a334:	0800a30d 	.word	0x0800a30d
 800a338:	0800a30d 	.word	0x0800a30d
 800a33c:	0800a391 	.word	0x0800a391
 800a340:	0800a30d 	.word	0x0800a30d
 800a344:	0800a30d 	.word	0x0800a30d
 800a348:	0800a30d 	.word	0x0800a30d
 800a34c:	0800a30d 	.word	0x0800a30d
 800a350:	0800a495 	.word	0x0800a495
 800a354:	0800a3bd 	.word	0x0800a3bd
 800a358:	0800a44f 	.word	0x0800a44f
 800a35c:	0800a30d 	.word	0x0800a30d
 800a360:	0800a30d 	.word	0x0800a30d
 800a364:	0800a4b7 	.word	0x0800a4b7
 800a368:	0800a30d 	.word	0x0800a30d
 800a36c:	0800a3bd 	.word	0x0800a3bd
 800a370:	0800a30d 	.word	0x0800a30d
 800a374:	0800a30d 	.word	0x0800a30d
 800a378:	0800a457 	.word	0x0800a457
 800a37c:	682b      	ldr	r3, [r5, #0]
 800a37e:	1d1a      	adds	r2, r3, #4
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	602a      	str	r2, [r5, #0]
 800a384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a38c:	2301      	movs	r3, #1
 800a38e:	e09f      	b.n	800a4d0 <_printf_i+0x1ec>
 800a390:	6820      	ldr	r0, [r4, #0]
 800a392:	682b      	ldr	r3, [r5, #0]
 800a394:	0607      	lsls	r7, r0, #24
 800a396:	f103 0104 	add.w	r1, r3, #4
 800a39a:	6029      	str	r1, [r5, #0]
 800a39c:	d501      	bpl.n	800a3a2 <_printf_i+0xbe>
 800a39e:	681e      	ldr	r6, [r3, #0]
 800a3a0:	e003      	b.n	800a3aa <_printf_i+0xc6>
 800a3a2:	0646      	lsls	r6, r0, #25
 800a3a4:	d5fb      	bpl.n	800a39e <_printf_i+0xba>
 800a3a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a3aa:	2e00      	cmp	r6, #0
 800a3ac:	da03      	bge.n	800a3b6 <_printf_i+0xd2>
 800a3ae:	232d      	movs	r3, #45	; 0x2d
 800a3b0:	4276      	negs	r6, r6
 800a3b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3b6:	485a      	ldr	r0, [pc, #360]	; (800a520 <_printf_i+0x23c>)
 800a3b8:	230a      	movs	r3, #10
 800a3ba:	e012      	b.n	800a3e2 <_printf_i+0xfe>
 800a3bc:	682b      	ldr	r3, [r5, #0]
 800a3be:	6820      	ldr	r0, [r4, #0]
 800a3c0:	1d19      	adds	r1, r3, #4
 800a3c2:	6029      	str	r1, [r5, #0]
 800a3c4:	0605      	lsls	r5, r0, #24
 800a3c6:	d501      	bpl.n	800a3cc <_printf_i+0xe8>
 800a3c8:	681e      	ldr	r6, [r3, #0]
 800a3ca:	e002      	b.n	800a3d2 <_printf_i+0xee>
 800a3cc:	0641      	lsls	r1, r0, #25
 800a3ce:	d5fb      	bpl.n	800a3c8 <_printf_i+0xe4>
 800a3d0:	881e      	ldrh	r6, [r3, #0]
 800a3d2:	4853      	ldr	r0, [pc, #332]	; (800a520 <_printf_i+0x23c>)
 800a3d4:	2f6f      	cmp	r7, #111	; 0x6f
 800a3d6:	bf0c      	ite	eq
 800a3d8:	2308      	moveq	r3, #8
 800a3da:	230a      	movne	r3, #10
 800a3dc:	2100      	movs	r1, #0
 800a3de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3e2:	6865      	ldr	r5, [r4, #4]
 800a3e4:	60a5      	str	r5, [r4, #8]
 800a3e6:	2d00      	cmp	r5, #0
 800a3e8:	bfa2      	ittt	ge
 800a3ea:	6821      	ldrge	r1, [r4, #0]
 800a3ec:	f021 0104 	bicge.w	r1, r1, #4
 800a3f0:	6021      	strge	r1, [r4, #0]
 800a3f2:	b90e      	cbnz	r6, 800a3f8 <_printf_i+0x114>
 800a3f4:	2d00      	cmp	r5, #0
 800a3f6:	d04b      	beq.n	800a490 <_printf_i+0x1ac>
 800a3f8:	4615      	mov	r5, r2
 800a3fa:	fbb6 f1f3 	udiv	r1, r6, r3
 800a3fe:	fb03 6711 	mls	r7, r3, r1, r6
 800a402:	5dc7      	ldrb	r7, [r0, r7]
 800a404:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a408:	4637      	mov	r7, r6
 800a40a:	42bb      	cmp	r3, r7
 800a40c:	460e      	mov	r6, r1
 800a40e:	d9f4      	bls.n	800a3fa <_printf_i+0x116>
 800a410:	2b08      	cmp	r3, #8
 800a412:	d10b      	bne.n	800a42c <_printf_i+0x148>
 800a414:	6823      	ldr	r3, [r4, #0]
 800a416:	07de      	lsls	r6, r3, #31
 800a418:	d508      	bpl.n	800a42c <_printf_i+0x148>
 800a41a:	6923      	ldr	r3, [r4, #16]
 800a41c:	6861      	ldr	r1, [r4, #4]
 800a41e:	4299      	cmp	r1, r3
 800a420:	bfde      	ittt	le
 800a422:	2330      	movle	r3, #48	; 0x30
 800a424:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a428:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a42c:	1b52      	subs	r2, r2, r5
 800a42e:	6122      	str	r2, [r4, #16]
 800a430:	f8cd a000 	str.w	sl, [sp]
 800a434:	464b      	mov	r3, r9
 800a436:	aa03      	add	r2, sp, #12
 800a438:	4621      	mov	r1, r4
 800a43a:	4640      	mov	r0, r8
 800a43c:	f7ff fee4 	bl	800a208 <_printf_common>
 800a440:	3001      	adds	r0, #1
 800a442:	d14a      	bne.n	800a4da <_printf_i+0x1f6>
 800a444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a448:	b004      	add	sp, #16
 800a44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a44e:	6823      	ldr	r3, [r4, #0]
 800a450:	f043 0320 	orr.w	r3, r3, #32
 800a454:	6023      	str	r3, [r4, #0]
 800a456:	4833      	ldr	r0, [pc, #204]	; (800a524 <_printf_i+0x240>)
 800a458:	2778      	movs	r7, #120	; 0x78
 800a45a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a45e:	6823      	ldr	r3, [r4, #0]
 800a460:	6829      	ldr	r1, [r5, #0]
 800a462:	061f      	lsls	r7, r3, #24
 800a464:	f851 6b04 	ldr.w	r6, [r1], #4
 800a468:	d402      	bmi.n	800a470 <_printf_i+0x18c>
 800a46a:	065f      	lsls	r7, r3, #25
 800a46c:	bf48      	it	mi
 800a46e:	b2b6      	uxthmi	r6, r6
 800a470:	07df      	lsls	r7, r3, #31
 800a472:	bf48      	it	mi
 800a474:	f043 0320 	orrmi.w	r3, r3, #32
 800a478:	6029      	str	r1, [r5, #0]
 800a47a:	bf48      	it	mi
 800a47c:	6023      	strmi	r3, [r4, #0]
 800a47e:	b91e      	cbnz	r6, 800a488 <_printf_i+0x1a4>
 800a480:	6823      	ldr	r3, [r4, #0]
 800a482:	f023 0320 	bic.w	r3, r3, #32
 800a486:	6023      	str	r3, [r4, #0]
 800a488:	2310      	movs	r3, #16
 800a48a:	e7a7      	b.n	800a3dc <_printf_i+0xf8>
 800a48c:	4824      	ldr	r0, [pc, #144]	; (800a520 <_printf_i+0x23c>)
 800a48e:	e7e4      	b.n	800a45a <_printf_i+0x176>
 800a490:	4615      	mov	r5, r2
 800a492:	e7bd      	b.n	800a410 <_printf_i+0x12c>
 800a494:	682b      	ldr	r3, [r5, #0]
 800a496:	6826      	ldr	r6, [r4, #0]
 800a498:	6961      	ldr	r1, [r4, #20]
 800a49a:	1d18      	adds	r0, r3, #4
 800a49c:	6028      	str	r0, [r5, #0]
 800a49e:	0635      	lsls	r5, r6, #24
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	d501      	bpl.n	800a4a8 <_printf_i+0x1c4>
 800a4a4:	6019      	str	r1, [r3, #0]
 800a4a6:	e002      	b.n	800a4ae <_printf_i+0x1ca>
 800a4a8:	0670      	lsls	r0, r6, #25
 800a4aa:	d5fb      	bpl.n	800a4a4 <_printf_i+0x1c0>
 800a4ac:	8019      	strh	r1, [r3, #0]
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	6123      	str	r3, [r4, #16]
 800a4b2:	4615      	mov	r5, r2
 800a4b4:	e7bc      	b.n	800a430 <_printf_i+0x14c>
 800a4b6:	682b      	ldr	r3, [r5, #0]
 800a4b8:	1d1a      	adds	r2, r3, #4
 800a4ba:	602a      	str	r2, [r5, #0]
 800a4bc:	681d      	ldr	r5, [r3, #0]
 800a4be:	6862      	ldr	r2, [r4, #4]
 800a4c0:	2100      	movs	r1, #0
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	f7f5 ff0c 	bl	80002e0 <memchr>
 800a4c8:	b108      	cbz	r0, 800a4ce <_printf_i+0x1ea>
 800a4ca:	1b40      	subs	r0, r0, r5
 800a4cc:	6060      	str	r0, [r4, #4]
 800a4ce:	6863      	ldr	r3, [r4, #4]
 800a4d0:	6123      	str	r3, [r4, #16]
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4d8:	e7aa      	b.n	800a430 <_printf_i+0x14c>
 800a4da:	6923      	ldr	r3, [r4, #16]
 800a4dc:	462a      	mov	r2, r5
 800a4de:	4649      	mov	r1, r9
 800a4e0:	4640      	mov	r0, r8
 800a4e2:	47d0      	blx	sl
 800a4e4:	3001      	adds	r0, #1
 800a4e6:	d0ad      	beq.n	800a444 <_printf_i+0x160>
 800a4e8:	6823      	ldr	r3, [r4, #0]
 800a4ea:	079b      	lsls	r3, r3, #30
 800a4ec:	d413      	bmi.n	800a516 <_printf_i+0x232>
 800a4ee:	68e0      	ldr	r0, [r4, #12]
 800a4f0:	9b03      	ldr	r3, [sp, #12]
 800a4f2:	4298      	cmp	r0, r3
 800a4f4:	bfb8      	it	lt
 800a4f6:	4618      	movlt	r0, r3
 800a4f8:	e7a6      	b.n	800a448 <_printf_i+0x164>
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	4632      	mov	r2, r6
 800a4fe:	4649      	mov	r1, r9
 800a500:	4640      	mov	r0, r8
 800a502:	47d0      	blx	sl
 800a504:	3001      	adds	r0, #1
 800a506:	d09d      	beq.n	800a444 <_printf_i+0x160>
 800a508:	3501      	adds	r5, #1
 800a50a:	68e3      	ldr	r3, [r4, #12]
 800a50c:	9903      	ldr	r1, [sp, #12]
 800a50e:	1a5b      	subs	r3, r3, r1
 800a510:	42ab      	cmp	r3, r5
 800a512:	dcf2      	bgt.n	800a4fa <_printf_i+0x216>
 800a514:	e7eb      	b.n	800a4ee <_printf_i+0x20a>
 800a516:	2500      	movs	r5, #0
 800a518:	f104 0619 	add.w	r6, r4, #25
 800a51c:	e7f5      	b.n	800a50a <_printf_i+0x226>
 800a51e:	bf00      	nop
 800a520:	0800b469 	.word	0x0800b469
 800a524:	0800b47a 	.word	0x0800b47a

0800a528 <__malloc_lock>:
 800a528:	4801      	ldr	r0, [pc, #4]	; (800a530 <__malloc_lock+0x8>)
 800a52a:	f7ff bc73 	b.w	8009e14 <__retarget_lock_acquire_recursive>
 800a52e:	bf00      	nop
 800a530:	24001368 	.word	0x24001368

0800a534 <__malloc_unlock>:
 800a534:	4801      	ldr	r0, [pc, #4]	; (800a53c <__malloc_unlock+0x8>)
 800a536:	f7ff bc6e 	b.w	8009e16 <__retarget_lock_release_recursive>
 800a53a:	bf00      	nop
 800a53c:	24001368 	.word	0x24001368

0800a540 <_realloc_r>:
 800a540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a544:	4680      	mov	r8, r0
 800a546:	4614      	mov	r4, r2
 800a548:	460e      	mov	r6, r1
 800a54a:	b921      	cbnz	r1, 800a556 <_realloc_r+0x16>
 800a54c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a550:	4611      	mov	r1, r2
 800a552:	f7ff bdd9 	b.w	800a108 <_malloc_r>
 800a556:	b92a      	cbnz	r2, 800a564 <_realloc_r+0x24>
 800a558:	f000 f85a 	bl	800a610 <_free_r>
 800a55c:	4625      	mov	r5, r4
 800a55e:	4628      	mov	r0, r5
 800a560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a564:	f000 f8a0 	bl	800a6a8 <_malloc_usable_size_r>
 800a568:	4284      	cmp	r4, r0
 800a56a:	4607      	mov	r7, r0
 800a56c:	d802      	bhi.n	800a574 <_realloc_r+0x34>
 800a56e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a572:	d812      	bhi.n	800a59a <_realloc_r+0x5a>
 800a574:	4621      	mov	r1, r4
 800a576:	4640      	mov	r0, r8
 800a578:	f7ff fdc6 	bl	800a108 <_malloc_r>
 800a57c:	4605      	mov	r5, r0
 800a57e:	2800      	cmp	r0, #0
 800a580:	d0ed      	beq.n	800a55e <_realloc_r+0x1e>
 800a582:	42bc      	cmp	r4, r7
 800a584:	4622      	mov	r2, r4
 800a586:	4631      	mov	r1, r6
 800a588:	bf28      	it	cs
 800a58a:	463a      	movcs	r2, r7
 800a58c:	f000 f832 	bl	800a5f4 <memcpy>
 800a590:	4631      	mov	r1, r6
 800a592:	4640      	mov	r0, r8
 800a594:	f000 f83c 	bl	800a610 <_free_r>
 800a598:	e7e1      	b.n	800a55e <_realloc_r+0x1e>
 800a59a:	4635      	mov	r5, r6
 800a59c:	e7df      	b.n	800a55e <_realloc_r+0x1e>

0800a59e <memmove>:
 800a59e:	4288      	cmp	r0, r1
 800a5a0:	b510      	push	{r4, lr}
 800a5a2:	eb01 0402 	add.w	r4, r1, r2
 800a5a6:	d902      	bls.n	800a5ae <memmove+0x10>
 800a5a8:	4284      	cmp	r4, r0
 800a5aa:	4623      	mov	r3, r4
 800a5ac:	d807      	bhi.n	800a5be <memmove+0x20>
 800a5ae:	1e43      	subs	r3, r0, #1
 800a5b0:	42a1      	cmp	r1, r4
 800a5b2:	d008      	beq.n	800a5c6 <memmove+0x28>
 800a5b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5bc:	e7f8      	b.n	800a5b0 <memmove+0x12>
 800a5be:	4402      	add	r2, r0
 800a5c0:	4601      	mov	r1, r0
 800a5c2:	428a      	cmp	r2, r1
 800a5c4:	d100      	bne.n	800a5c8 <memmove+0x2a>
 800a5c6:	bd10      	pop	{r4, pc}
 800a5c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5cc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5d0:	e7f7      	b.n	800a5c2 <memmove+0x24>
	...

0800a5d4 <_sbrk_r>:
 800a5d4:	b538      	push	{r3, r4, r5, lr}
 800a5d6:	4d06      	ldr	r5, [pc, #24]	; (800a5f0 <_sbrk_r+0x1c>)
 800a5d8:	2300      	movs	r3, #0
 800a5da:	4604      	mov	r4, r0
 800a5dc:	4608      	mov	r0, r1
 800a5de:	602b      	str	r3, [r5, #0]
 800a5e0:	f7f7 fa80 	bl	8001ae4 <_sbrk>
 800a5e4:	1c43      	adds	r3, r0, #1
 800a5e6:	d102      	bne.n	800a5ee <_sbrk_r+0x1a>
 800a5e8:	682b      	ldr	r3, [r5, #0]
 800a5ea:	b103      	cbz	r3, 800a5ee <_sbrk_r+0x1a>
 800a5ec:	6023      	str	r3, [r4, #0]
 800a5ee:	bd38      	pop	{r3, r4, r5, pc}
 800a5f0:	24001374 	.word	0x24001374

0800a5f4 <memcpy>:
 800a5f4:	440a      	add	r2, r1
 800a5f6:	4291      	cmp	r1, r2
 800a5f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a5fc:	d100      	bne.n	800a600 <memcpy+0xc>
 800a5fe:	4770      	bx	lr
 800a600:	b510      	push	{r4, lr}
 800a602:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a606:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a60a:	4291      	cmp	r1, r2
 800a60c:	d1f9      	bne.n	800a602 <memcpy+0xe>
 800a60e:	bd10      	pop	{r4, pc}

0800a610 <_free_r>:
 800a610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a612:	2900      	cmp	r1, #0
 800a614:	d044      	beq.n	800a6a0 <_free_r+0x90>
 800a616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a61a:	9001      	str	r0, [sp, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f1a1 0404 	sub.w	r4, r1, #4
 800a622:	bfb8      	it	lt
 800a624:	18e4      	addlt	r4, r4, r3
 800a626:	f7ff ff7f 	bl	800a528 <__malloc_lock>
 800a62a:	4a1e      	ldr	r2, [pc, #120]	; (800a6a4 <_free_r+0x94>)
 800a62c:	9801      	ldr	r0, [sp, #4]
 800a62e:	6813      	ldr	r3, [r2, #0]
 800a630:	b933      	cbnz	r3, 800a640 <_free_r+0x30>
 800a632:	6063      	str	r3, [r4, #4]
 800a634:	6014      	str	r4, [r2, #0]
 800a636:	b003      	add	sp, #12
 800a638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a63c:	f7ff bf7a 	b.w	800a534 <__malloc_unlock>
 800a640:	42a3      	cmp	r3, r4
 800a642:	d908      	bls.n	800a656 <_free_r+0x46>
 800a644:	6825      	ldr	r5, [r4, #0]
 800a646:	1961      	adds	r1, r4, r5
 800a648:	428b      	cmp	r3, r1
 800a64a:	bf01      	itttt	eq
 800a64c:	6819      	ldreq	r1, [r3, #0]
 800a64e:	685b      	ldreq	r3, [r3, #4]
 800a650:	1949      	addeq	r1, r1, r5
 800a652:	6021      	streq	r1, [r4, #0]
 800a654:	e7ed      	b.n	800a632 <_free_r+0x22>
 800a656:	461a      	mov	r2, r3
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	b10b      	cbz	r3, 800a660 <_free_r+0x50>
 800a65c:	42a3      	cmp	r3, r4
 800a65e:	d9fa      	bls.n	800a656 <_free_r+0x46>
 800a660:	6811      	ldr	r1, [r2, #0]
 800a662:	1855      	adds	r5, r2, r1
 800a664:	42a5      	cmp	r5, r4
 800a666:	d10b      	bne.n	800a680 <_free_r+0x70>
 800a668:	6824      	ldr	r4, [r4, #0]
 800a66a:	4421      	add	r1, r4
 800a66c:	1854      	adds	r4, r2, r1
 800a66e:	42a3      	cmp	r3, r4
 800a670:	6011      	str	r1, [r2, #0]
 800a672:	d1e0      	bne.n	800a636 <_free_r+0x26>
 800a674:	681c      	ldr	r4, [r3, #0]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	6053      	str	r3, [r2, #4]
 800a67a:	440c      	add	r4, r1
 800a67c:	6014      	str	r4, [r2, #0]
 800a67e:	e7da      	b.n	800a636 <_free_r+0x26>
 800a680:	d902      	bls.n	800a688 <_free_r+0x78>
 800a682:	230c      	movs	r3, #12
 800a684:	6003      	str	r3, [r0, #0]
 800a686:	e7d6      	b.n	800a636 <_free_r+0x26>
 800a688:	6825      	ldr	r5, [r4, #0]
 800a68a:	1961      	adds	r1, r4, r5
 800a68c:	428b      	cmp	r3, r1
 800a68e:	bf04      	itt	eq
 800a690:	6819      	ldreq	r1, [r3, #0]
 800a692:	685b      	ldreq	r3, [r3, #4]
 800a694:	6063      	str	r3, [r4, #4]
 800a696:	bf04      	itt	eq
 800a698:	1949      	addeq	r1, r1, r5
 800a69a:	6021      	streq	r1, [r4, #0]
 800a69c:	6054      	str	r4, [r2, #4]
 800a69e:	e7ca      	b.n	800a636 <_free_r+0x26>
 800a6a0:	b003      	add	sp, #12
 800a6a2:	bd30      	pop	{r4, r5, pc}
 800a6a4:	2400136c 	.word	0x2400136c

0800a6a8 <_malloc_usable_size_r>:
 800a6a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6ac:	1f18      	subs	r0, r3, #4
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	bfbc      	itt	lt
 800a6b2:	580b      	ldrlt	r3, [r1, r0]
 800a6b4:	18c0      	addlt	r0, r0, r3
 800a6b6:	4770      	bx	lr

0800a6b8 <cos>:
 800a6b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6ba:	eeb0 7b40 	vmov.f64	d7, d0
 800a6be:	ee17 3a90 	vmov	r3, s15
 800a6c2:	4a21      	ldr	r2, [pc, #132]	; (800a748 <cos+0x90>)
 800a6c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	dc06      	bgt.n	800a6da <cos+0x22>
 800a6cc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800a740 <cos+0x88>
 800a6d0:	b005      	add	sp, #20
 800a6d2:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6d6:	f000 bc5f 	b.w	800af98 <__kernel_cos>
 800a6da:	4a1c      	ldr	r2, [pc, #112]	; (800a74c <cos+0x94>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	dd04      	ble.n	800a6ea <cos+0x32>
 800a6e0:	ee30 0b40 	vsub.f64	d0, d0, d0
 800a6e4:	b005      	add	sp, #20
 800a6e6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a6ea:	4668      	mov	r0, sp
 800a6ec:	f000 f87c 	bl	800a7e8 <__ieee754_rem_pio2>
 800a6f0:	f000 0003 	and.w	r0, r0, #3
 800a6f4:	2801      	cmp	r0, #1
 800a6f6:	d009      	beq.n	800a70c <cos+0x54>
 800a6f8:	2802      	cmp	r0, #2
 800a6fa:	d010      	beq.n	800a71e <cos+0x66>
 800a6fc:	b9b0      	cbnz	r0, 800a72c <cos+0x74>
 800a6fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a702:	ed9d 0b00 	vldr	d0, [sp]
 800a706:	f000 fc47 	bl	800af98 <__kernel_cos>
 800a70a:	e7eb      	b.n	800a6e4 <cos+0x2c>
 800a70c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a710:	ed9d 0b00 	vldr	d0, [sp]
 800a714:	f000 fcac 	bl	800b070 <__kernel_sin>
 800a718:	eeb1 0b40 	vneg.f64	d0, d0
 800a71c:	e7e2      	b.n	800a6e4 <cos+0x2c>
 800a71e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a722:	ed9d 0b00 	vldr	d0, [sp]
 800a726:	f000 fc37 	bl	800af98 <__kernel_cos>
 800a72a:	e7f5      	b.n	800a718 <cos+0x60>
 800a72c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a730:	ed9d 0b00 	vldr	d0, [sp]
 800a734:	2001      	movs	r0, #1
 800a736:	f000 fc9b 	bl	800b070 <__kernel_sin>
 800a73a:	e7d3      	b.n	800a6e4 <cos+0x2c>
 800a73c:	f3af 8000 	nop.w
	...
 800a748:	3fe921fb 	.word	0x3fe921fb
 800a74c:	7fefffff 	.word	0x7fefffff

0800a750 <sin>:
 800a750:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a752:	eeb0 7b40 	vmov.f64	d7, d0
 800a756:	ee17 3a90 	vmov	r3, s15
 800a75a:	4a21      	ldr	r2, [pc, #132]	; (800a7e0 <sin+0x90>)
 800a75c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a760:	4293      	cmp	r3, r2
 800a762:	dc07      	bgt.n	800a774 <sin+0x24>
 800a764:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800a7d8 <sin+0x88>
 800a768:	2000      	movs	r0, #0
 800a76a:	b005      	add	sp, #20
 800a76c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a770:	f000 bc7e 	b.w	800b070 <__kernel_sin>
 800a774:	4a1b      	ldr	r2, [pc, #108]	; (800a7e4 <sin+0x94>)
 800a776:	4293      	cmp	r3, r2
 800a778:	dd04      	ble.n	800a784 <sin+0x34>
 800a77a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800a77e:	b005      	add	sp, #20
 800a780:	f85d fb04 	ldr.w	pc, [sp], #4
 800a784:	4668      	mov	r0, sp
 800a786:	f000 f82f 	bl	800a7e8 <__ieee754_rem_pio2>
 800a78a:	f000 0003 	and.w	r0, r0, #3
 800a78e:	2801      	cmp	r0, #1
 800a790:	d00a      	beq.n	800a7a8 <sin+0x58>
 800a792:	2802      	cmp	r0, #2
 800a794:	d00f      	beq.n	800a7b6 <sin+0x66>
 800a796:	b9c0      	cbnz	r0, 800a7ca <sin+0x7a>
 800a798:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a79c:	ed9d 0b00 	vldr	d0, [sp]
 800a7a0:	2001      	movs	r0, #1
 800a7a2:	f000 fc65 	bl	800b070 <__kernel_sin>
 800a7a6:	e7ea      	b.n	800a77e <sin+0x2e>
 800a7a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7ac:	ed9d 0b00 	vldr	d0, [sp]
 800a7b0:	f000 fbf2 	bl	800af98 <__kernel_cos>
 800a7b4:	e7e3      	b.n	800a77e <sin+0x2e>
 800a7b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7ba:	ed9d 0b00 	vldr	d0, [sp]
 800a7be:	2001      	movs	r0, #1
 800a7c0:	f000 fc56 	bl	800b070 <__kernel_sin>
 800a7c4:	eeb1 0b40 	vneg.f64	d0, d0
 800a7c8:	e7d9      	b.n	800a77e <sin+0x2e>
 800a7ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7ce:	ed9d 0b00 	vldr	d0, [sp]
 800a7d2:	f000 fbe1 	bl	800af98 <__kernel_cos>
 800a7d6:	e7f5      	b.n	800a7c4 <sin+0x74>
	...
 800a7e0:	3fe921fb 	.word	0x3fe921fb
 800a7e4:	7fefffff 	.word	0x7fefffff

0800a7e8 <__ieee754_rem_pio2>:
 800a7e8:	b570      	push	{r4, r5, r6, lr}
 800a7ea:	eeb0 7b40 	vmov.f64	d7, d0
 800a7ee:	ee17 5a90 	vmov	r5, s15
 800a7f2:	4b99      	ldr	r3, [pc, #612]	; (800aa58 <__ieee754_rem_pio2+0x270>)
 800a7f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a7f8:	429e      	cmp	r6, r3
 800a7fa:	b088      	sub	sp, #32
 800a7fc:	4604      	mov	r4, r0
 800a7fe:	dc07      	bgt.n	800a810 <__ieee754_rem_pio2+0x28>
 800a800:	2200      	movs	r2, #0
 800a802:	2300      	movs	r3, #0
 800a804:	ed84 0b00 	vstr	d0, [r4]
 800a808:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a80c:	2000      	movs	r0, #0
 800a80e:	e01b      	b.n	800a848 <__ieee754_rem_pio2+0x60>
 800a810:	4b92      	ldr	r3, [pc, #584]	; (800aa5c <__ieee754_rem_pio2+0x274>)
 800a812:	429e      	cmp	r6, r3
 800a814:	dc3b      	bgt.n	800a88e <__ieee754_rem_pio2+0xa6>
 800a816:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800a81a:	2d00      	cmp	r5, #0
 800a81c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800aa18 <__ieee754_rem_pio2+0x230>
 800a820:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800a824:	dd19      	ble.n	800a85a <__ieee754_rem_pio2+0x72>
 800a826:	ee30 7b46 	vsub.f64	d7, d0, d6
 800a82a:	429e      	cmp	r6, r3
 800a82c:	d00e      	beq.n	800a84c <__ieee754_rem_pio2+0x64>
 800a82e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800aa20 <__ieee754_rem_pio2+0x238>
 800a832:	ee37 5b46 	vsub.f64	d5, d7, d6
 800a836:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a83a:	ed84 5b00 	vstr	d5, [r4]
 800a83e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a842:	ed84 7b02 	vstr	d7, [r4, #8]
 800a846:	2001      	movs	r0, #1
 800a848:	b008      	add	sp, #32
 800a84a:	bd70      	pop	{r4, r5, r6, pc}
 800a84c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800aa28 <__ieee754_rem_pio2+0x240>
 800a850:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a854:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800aa30 <__ieee754_rem_pio2+0x248>
 800a858:	e7eb      	b.n	800a832 <__ieee754_rem_pio2+0x4a>
 800a85a:	429e      	cmp	r6, r3
 800a85c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800a860:	d00e      	beq.n	800a880 <__ieee754_rem_pio2+0x98>
 800a862:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800aa20 <__ieee754_rem_pio2+0x238>
 800a866:	ee37 5b06 	vadd.f64	d5, d7, d6
 800a86a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a86e:	ed84 5b00 	vstr	d5, [r4]
 800a872:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a876:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a87a:	ed84 7b02 	vstr	d7, [r4, #8]
 800a87e:	e7e3      	b.n	800a848 <__ieee754_rem_pio2+0x60>
 800a880:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800aa28 <__ieee754_rem_pio2+0x240>
 800a884:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a888:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800aa30 <__ieee754_rem_pio2+0x248>
 800a88c:	e7eb      	b.n	800a866 <__ieee754_rem_pio2+0x7e>
 800a88e:	4b74      	ldr	r3, [pc, #464]	; (800aa60 <__ieee754_rem_pio2+0x278>)
 800a890:	429e      	cmp	r6, r3
 800a892:	dc70      	bgt.n	800a976 <__ieee754_rem_pio2+0x18e>
 800a894:	f000 fc44 	bl	800b120 <fabs>
 800a898:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800a89c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800aa38 <__ieee754_rem_pio2+0x250>
 800a8a0:	eea0 7b06 	vfma.f64	d7, d0, d6
 800a8a4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a8a8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800a8ac:	ee17 0a90 	vmov	r0, s15
 800a8b0:	eeb1 4b45 	vneg.f64	d4, d5
 800a8b4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800aa18 <__ieee754_rem_pio2+0x230>
 800a8b8:	eea5 0b47 	vfms.f64	d0, d5, d7
 800a8bc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800aa20 <__ieee754_rem_pio2+0x238>
 800a8c0:	281f      	cmp	r0, #31
 800a8c2:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a8c6:	ee30 6b47 	vsub.f64	d6, d0, d7
 800a8ca:	dc08      	bgt.n	800a8de <__ieee754_rem_pio2+0xf6>
 800a8cc:	4b65      	ldr	r3, [pc, #404]	; (800aa64 <__ieee754_rem_pio2+0x27c>)
 800a8ce:	1e42      	subs	r2, r0, #1
 800a8d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8d4:	42b3      	cmp	r3, r6
 800a8d6:	d002      	beq.n	800a8de <__ieee754_rem_pio2+0xf6>
 800a8d8:	ed84 6b00 	vstr	d6, [r4]
 800a8dc:	e024      	b.n	800a928 <__ieee754_rem_pio2+0x140>
 800a8de:	ee16 3a90 	vmov	r3, s13
 800a8e2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800a8e6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800a8ea:	2b10      	cmp	r3, #16
 800a8ec:	ea4f 5226 	mov.w	r2, r6, asr #20
 800a8f0:	ddf2      	ble.n	800a8d8 <__ieee754_rem_pio2+0xf0>
 800a8f2:	eeb0 6b40 	vmov.f64	d6, d0
 800a8f6:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 800aa28 <__ieee754_rem_pio2+0x240>
 800a8fa:	eea4 6b03 	vfma.f64	d6, d4, d3
 800a8fe:	ee30 7b46 	vsub.f64	d7, d0, d6
 800a902:	eea4 7b03 	vfma.f64	d7, d4, d3
 800a906:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800aa30 <__ieee754_rem_pio2+0x248>
 800a90a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800a90e:	ee36 3b47 	vsub.f64	d3, d6, d7
 800a912:	ee13 3a90 	vmov	r3, s7
 800a916:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800a91a:	1ad3      	subs	r3, r2, r3
 800a91c:	2b31      	cmp	r3, #49	; 0x31
 800a91e:	dc17      	bgt.n	800a950 <__ieee754_rem_pio2+0x168>
 800a920:	eeb0 0b46 	vmov.f64	d0, d6
 800a924:	ed84 3b00 	vstr	d3, [r4]
 800a928:	ed94 6b00 	vldr	d6, [r4]
 800a92c:	2d00      	cmp	r5, #0
 800a92e:	ee30 0b46 	vsub.f64	d0, d0, d6
 800a932:	ee30 0b47 	vsub.f64	d0, d0, d7
 800a936:	ed84 0b02 	vstr	d0, [r4, #8]
 800a93a:	da85      	bge.n	800a848 <__ieee754_rem_pio2+0x60>
 800a93c:	eeb1 6b46 	vneg.f64	d6, d6
 800a940:	eeb1 0b40 	vneg.f64	d0, d0
 800a944:	ed84 6b00 	vstr	d6, [r4]
 800a948:	ed84 0b02 	vstr	d0, [r4, #8]
 800a94c:	4240      	negs	r0, r0
 800a94e:	e77b      	b.n	800a848 <__ieee754_rem_pio2+0x60>
 800a950:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800aa40 <__ieee754_rem_pio2+0x258>
 800a954:	eeb0 0b46 	vmov.f64	d0, d6
 800a958:	eea4 0b07 	vfma.f64	d0, d4, d7
 800a95c:	ee36 6b40 	vsub.f64	d6, d6, d0
 800a960:	eea4 6b07 	vfma.f64	d6, d4, d7
 800a964:	ed9f 4b38 	vldr	d4, [pc, #224]	; 800aa48 <__ieee754_rem_pio2+0x260>
 800a968:	eeb0 7b46 	vmov.f64	d7, d6
 800a96c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800a970:	ee30 6b47 	vsub.f64	d6, d0, d7
 800a974:	e7b0      	b.n	800a8d8 <__ieee754_rem_pio2+0xf0>
 800a976:	4b3c      	ldr	r3, [pc, #240]	; (800aa68 <__ieee754_rem_pio2+0x280>)
 800a978:	429e      	cmp	r6, r3
 800a97a:	dd06      	ble.n	800a98a <__ieee754_rem_pio2+0x1a2>
 800a97c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800a980:	ed80 7b02 	vstr	d7, [r0, #8]
 800a984:	ed80 7b00 	vstr	d7, [r0]
 800a988:	e740      	b.n	800a80c <__ieee754_rem_pio2+0x24>
 800a98a:	1532      	asrs	r2, r6, #20
 800a98c:	ee10 0a10 	vmov	r0, s0
 800a990:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800a994:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800a998:	ec41 0b17 	vmov	d7, r0, r1
 800a99c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800a9a0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800aa50 <__ieee754_rem_pio2+0x268>
 800a9a4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800a9a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a9ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a9b0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a9b4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800a9b8:	a808      	add	r0, sp, #32
 800a9ba:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800a9be:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a9c2:	ed8d 6b04 	vstr	d6, [sp, #16]
 800a9c6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a9ca:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a9ce:	2103      	movs	r1, #3
 800a9d0:	ed30 7b02 	vldmdb	r0!, {d7}
 800a9d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a9d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9dc:	460b      	mov	r3, r1
 800a9de:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800a9e2:	d0f5      	beq.n	800a9d0 <__ieee754_rem_pio2+0x1e8>
 800a9e4:	4921      	ldr	r1, [pc, #132]	; (800aa6c <__ieee754_rem_pio2+0x284>)
 800a9e6:	9101      	str	r1, [sp, #4]
 800a9e8:	2102      	movs	r1, #2
 800a9ea:	9100      	str	r1, [sp, #0]
 800a9ec:	a802      	add	r0, sp, #8
 800a9ee:	4621      	mov	r1, r4
 800a9f0:	f000 f83e 	bl	800aa70 <__kernel_rem_pio2>
 800a9f4:	2d00      	cmp	r5, #0
 800a9f6:	f6bf af27 	bge.w	800a848 <__ieee754_rem_pio2+0x60>
 800a9fa:	ed94 7b00 	vldr	d7, [r4]
 800a9fe:	eeb1 7b47 	vneg.f64	d7, d7
 800aa02:	ed84 7b00 	vstr	d7, [r4]
 800aa06:	ed94 7b02 	vldr	d7, [r4, #8]
 800aa0a:	eeb1 7b47 	vneg.f64	d7, d7
 800aa0e:	ed84 7b02 	vstr	d7, [r4, #8]
 800aa12:	e79b      	b.n	800a94c <__ieee754_rem_pio2+0x164>
 800aa14:	f3af 8000 	nop.w
 800aa18:	54400000 	.word	0x54400000
 800aa1c:	3ff921fb 	.word	0x3ff921fb
 800aa20:	1a626331 	.word	0x1a626331
 800aa24:	3dd0b461 	.word	0x3dd0b461
 800aa28:	1a600000 	.word	0x1a600000
 800aa2c:	3dd0b461 	.word	0x3dd0b461
 800aa30:	2e037073 	.word	0x2e037073
 800aa34:	3ba3198a 	.word	0x3ba3198a
 800aa38:	6dc9c883 	.word	0x6dc9c883
 800aa3c:	3fe45f30 	.word	0x3fe45f30
 800aa40:	2e000000 	.word	0x2e000000
 800aa44:	3ba3198a 	.word	0x3ba3198a
 800aa48:	252049c1 	.word	0x252049c1
 800aa4c:	397b839a 	.word	0x397b839a
 800aa50:	00000000 	.word	0x00000000
 800aa54:	41700000 	.word	0x41700000
 800aa58:	3fe921fb 	.word	0x3fe921fb
 800aa5c:	4002d97b 	.word	0x4002d97b
 800aa60:	413921fb 	.word	0x413921fb
 800aa64:	0800b48c 	.word	0x0800b48c
 800aa68:	7fefffff 	.word	0x7fefffff
 800aa6c:	0800b50c 	.word	0x0800b50c

0800aa70 <__kernel_rem_pio2>:
 800aa70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa74:	ed2d 8b06 	vpush	{d8-d10}
 800aa78:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800aa7c:	460f      	mov	r7, r1
 800aa7e:	9002      	str	r0, [sp, #8]
 800aa80:	49c3      	ldr	r1, [pc, #780]	; (800ad90 <__kernel_rem_pio2+0x320>)
 800aa82:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800aa84:	9301      	str	r3, [sp, #4]
 800aa86:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800aa8a:	9901      	ldr	r1, [sp, #4]
 800aa8c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800aa8e:	f112 0f14 	cmn.w	r2, #20
 800aa92:	bfa8      	it	ge
 800aa94:	1ed0      	subge	r0, r2, #3
 800aa96:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 800aa9a:	bfaa      	itet	ge
 800aa9c:	2418      	movge	r4, #24
 800aa9e:	2000      	movlt	r0, #0
 800aaa0:	fb90 f0f4 	sdivge	r0, r0, r4
 800aaa4:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 800ad78 <__kernel_rem_pio2+0x308>
 800aaa8:	f06f 0417 	mvn.w	r4, #23
 800aaac:	fb00 4404 	mla	r4, r0, r4, r4
 800aab0:	eba0 060a 	sub.w	r6, r0, sl
 800aab4:	4414      	add	r4, r2
 800aab6:	eb09 0c0a 	add.w	ip, r9, sl
 800aaba:	ad1a      	add	r5, sp, #104	; 0x68
 800aabc:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 800aac0:	2200      	movs	r2, #0
 800aac2:	4562      	cmp	r2, ip
 800aac4:	dd10      	ble.n	800aae8 <__kernel_rem_pio2+0x78>
 800aac6:	9a01      	ldr	r2, [sp, #4]
 800aac8:	a91a      	add	r1, sp, #104	; 0x68
 800aaca:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800aace:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 800aad2:	f04f 0c00 	mov.w	ip, #0
 800aad6:	45cc      	cmp	ip, r9
 800aad8:	dc26      	bgt.n	800ab28 <__kernel_rem_pio2+0xb8>
 800aada:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 800ad78 <__kernel_rem_pio2+0x308>
 800aade:	f8dd e008 	ldr.w	lr, [sp, #8]
 800aae2:	4616      	mov	r6, r2
 800aae4:	2500      	movs	r5, #0
 800aae6:	e015      	b.n	800ab14 <__kernel_rem_pio2+0xa4>
 800aae8:	42d6      	cmn	r6, r2
 800aaea:	d409      	bmi.n	800ab00 <__kernel_rem_pio2+0x90>
 800aaec:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 800aaf0:	ee07 1a90 	vmov	s15, r1
 800aaf4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800aaf8:	eca5 7b02 	vstmia	r5!, {d7}
 800aafc:	3201      	adds	r2, #1
 800aafe:	e7e0      	b.n	800aac2 <__kernel_rem_pio2+0x52>
 800ab00:	eeb0 7b46 	vmov.f64	d7, d6
 800ab04:	e7f8      	b.n	800aaf8 <__kernel_rem_pio2+0x88>
 800ab06:	ecbe 5b02 	vldmia	lr!, {d5}
 800ab0a:	ed96 6b00 	vldr	d6, [r6]
 800ab0e:	3501      	adds	r5, #1
 800ab10:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ab14:	4555      	cmp	r5, sl
 800ab16:	f1a6 0608 	sub.w	r6, r6, #8
 800ab1a:	ddf4      	ble.n	800ab06 <__kernel_rem_pio2+0x96>
 800ab1c:	eca8 7b02 	vstmia	r8!, {d7}
 800ab20:	f10c 0c01 	add.w	ip, ip, #1
 800ab24:	3208      	adds	r2, #8
 800ab26:	e7d6      	b.n	800aad6 <__kernel_rem_pio2+0x66>
 800ab28:	aa06      	add	r2, sp, #24
 800ab2a:	ed9f 9b95 	vldr	d9, [pc, #596]	; 800ad80 <__kernel_rem_pio2+0x310>
 800ab2e:	ed9f ab96 	vldr	d10, [pc, #600]	; 800ad88 <__kernel_rem_pio2+0x318>
 800ab32:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800ab36:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800ab3a:	9204      	str	r2, [sp, #16]
 800ab3c:	9303      	str	r3, [sp, #12]
 800ab3e:	464d      	mov	r5, r9
 800ab40:	00eb      	lsls	r3, r5, #3
 800ab42:	9305      	str	r3, [sp, #20]
 800ab44:	ab92      	add	r3, sp, #584	; 0x248
 800ab46:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800ab4a:	f10d 0b18 	add.w	fp, sp, #24
 800ab4e:	ab6a      	add	r3, sp, #424	; 0x1a8
 800ab50:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800ab54:	465e      	mov	r6, fp
 800ab56:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	f1a2 0208 	sub.w	r2, r2, #8
 800ab62:	dc48      	bgt.n	800abf6 <__kernel_rem_pio2+0x186>
 800ab64:	4620      	mov	r0, r4
 800ab66:	f000 fae7 	bl	800b138 <scalbn>
 800ab6a:	eeb0 8b40 	vmov.f64	d8, d0
 800ab6e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800ab72:	ee28 0b00 	vmul.f64	d0, d8, d0
 800ab76:	f000 fb5f 	bl	800b238 <floor>
 800ab7a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800ab7e:	eea0 8b47 	vfms.f64	d8, d0, d7
 800ab82:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800ab86:	2c00      	cmp	r4, #0
 800ab88:	ee17 8a90 	vmov	r8, s15
 800ab8c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ab90:	ee38 8b47 	vsub.f64	d8, d8, d7
 800ab94:	dd41      	ble.n	800ac1a <__kernel_rem_pio2+0x1aa>
 800ab96:	1e68      	subs	r0, r5, #1
 800ab98:	ab06      	add	r3, sp, #24
 800ab9a:	f1c4 0c18 	rsb	ip, r4, #24
 800ab9e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800aba2:	fa46 f20c 	asr.w	r2, r6, ip
 800aba6:	4490      	add	r8, r2
 800aba8:	fa02 f20c 	lsl.w	r2, r2, ip
 800abac:	1ab6      	subs	r6, r6, r2
 800abae:	f1c4 0217 	rsb	r2, r4, #23
 800abb2:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800abb6:	4116      	asrs	r6, r2
 800abb8:	2e00      	cmp	r6, #0
 800abba:	dd3d      	ble.n	800ac38 <__kernel_rem_pio2+0x1c8>
 800abbc:	f04f 0c00 	mov.w	ip, #0
 800abc0:	f108 0801 	add.w	r8, r8, #1
 800abc4:	4660      	mov	r0, ip
 800abc6:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800abca:	4565      	cmp	r5, ip
 800abcc:	dc6a      	bgt.n	800aca4 <__kernel_rem_pio2+0x234>
 800abce:	2c00      	cmp	r4, #0
 800abd0:	dd04      	ble.n	800abdc <__kernel_rem_pio2+0x16c>
 800abd2:	2c01      	cmp	r4, #1
 800abd4:	d07b      	beq.n	800acce <__kernel_rem_pio2+0x25e>
 800abd6:	2c02      	cmp	r4, #2
 800abd8:	f000 8083 	beq.w	800ace2 <__kernel_rem_pio2+0x272>
 800abdc:	2e02      	cmp	r6, #2
 800abde:	d12b      	bne.n	800ac38 <__kernel_rem_pio2+0x1c8>
 800abe0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800abe4:	ee30 8b48 	vsub.f64	d8, d0, d8
 800abe8:	b330      	cbz	r0, 800ac38 <__kernel_rem_pio2+0x1c8>
 800abea:	4620      	mov	r0, r4
 800abec:	f000 faa4 	bl	800b138 <scalbn>
 800abf0:	ee38 8b40 	vsub.f64	d8, d8, d0
 800abf4:	e020      	b.n	800ac38 <__kernel_rem_pio2+0x1c8>
 800abf6:	ee20 7b09 	vmul.f64	d7, d0, d9
 800abfa:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800abfe:	3801      	subs	r0, #1
 800ac00:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800ac04:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800ac08:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ac0c:	eca6 0a01 	vstmia	r6!, {s0}
 800ac10:	ed92 0b00 	vldr	d0, [r2]
 800ac14:	ee37 0b00 	vadd.f64	d0, d7, d0
 800ac18:	e7a0      	b.n	800ab5c <__kernel_rem_pio2+0xec>
 800ac1a:	d105      	bne.n	800ac28 <__kernel_rem_pio2+0x1b8>
 800ac1c:	1e6a      	subs	r2, r5, #1
 800ac1e:	ab06      	add	r3, sp, #24
 800ac20:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800ac24:	15f6      	asrs	r6, r6, #23
 800ac26:	e7c7      	b.n	800abb8 <__kernel_rem_pio2+0x148>
 800ac28:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ac2c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ac30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac34:	da34      	bge.n	800aca0 <__kernel_rem_pio2+0x230>
 800ac36:	2600      	movs	r6, #0
 800ac38:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ac3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac40:	f040 80aa 	bne.w	800ad98 <__kernel_rem_pio2+0x328>
 800ac44:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800ac48:	4658      	mov	r0, fp
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	4548      	cmp	r0, r9
 800ac4e:	da50      	bge.n	800acf2 <__kernel_rem_pio2+0x282>
 800ac50:	2a00      	cmp	r2, #0
 800ac52:	d06b      	beq.n	800ad2c <__kernel_rem_pio2+0x2bc>
 800ac54:	ab06      	add	r3, sp, #24
 800ac56:	3c18      	subs	r4, #24
 800ac58:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	f000 8087 	beq.w	800ad70 <__kernel_rem_pio2+0x300>
 800ac62:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ac66:	4620      	mov	r0, r4
 800ac68:	f000 fa66 	bl	800b138 <scalbn>
 800ac6c:	ed9f 6b44 	vldr	d6, [pc, #272]	; 800ad80 <__kernel_rem_pio2+0x310>
 800ac70:	f10b 0201 	add.w	r2, fp, #1
 800ac74:	a96a      	add	r1, sp, #424	; 0x1a8
 800ac76:	00d3      	lsls	r3, r2, #3
 800ac78:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ac7c:	465a      	mov	r2, fp
 800ac7e:	2a00      	cmp	r2, #0
 800ac80:	f280 80b8 	bge.w	800adf4 <__kernel_rem_pio2+0x384>
 800ac84:	465a      	mov	r2, fp
 800ac86:	2a00      	cmp	r2, #0
 800ac88:	f2c0 80d6 	blt.w	800ae38 <__kernel_rem_pio2+0x3c8>
 800ac8c:	a96a      	add	r1, sp, #424	; 0x1a8
 800ac8e:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 800ac92:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800ad78 <__kernel_rem_pio2+0x308>
 800ac96:	4d3f      	ldr	r5, [pc, #252]	; (800ad94 <__kernel_rem_pio2+0x324>)
 800ac98:	2000      	movs	r0, #0
 800ac9a:	ebab 0102 	sub.w	r1, fp, r2
 800ac9e:	e0c0      	b.n	800ae22 <__kernel_rem_pio2+0x3b2>
 800aca0:	2602      	movs	r6, #2
 800aca2:	e78b      	b.n	800abbc <__kernel_rem_pio2+0x14c>
 800aca4:	f8db 2000 	ldr.w	r2, [fp]
 800aca8:	b958      	cbnz	r0, 800acc2 <__kernel_rem_pio2+0x252>
 800acaa:	b122      	cbz	r2, 800acb6 <__kernel_rem_pio2+0x246>
 800acac:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800acb0:	f8cb 2000 	str.w	r2, [fp]
 800acb4:	2201      	movs	r2, #1
 800acb6:	f10c 0c01 	add.w	ip, ip, #1
 800acba:	f10b 0b04 	add.w	fp, fp, #4
 800acbe:	4610      	mov	r0, r2
 800acc0:	e783      	b.n	800abca <__kernel_rem_pio2+0x15a>
 800acc2:	ebae 0202 	sub.w	r2, lr, r2
 800acc6:	f8cb 2000 	str.w	r2, [fp]
 800acca:	4602      	mov	r2, r0
 800accc:	e7f3      	b.n	800acb6 <__kernel_rem_pio2+0x246>
 800acce:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800acd2:	ab06      	add	r3, sp, #24
 800acd4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800acd8:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800acdc:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800ace0:	e77c      	b.n	800abdc <__kernel_rem_pio2+0x16c>
 800ace2:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800ace6:	ab06      	add	r3, sp, #24
 800ace8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800acec:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800acf0:	e7f4      	b.n	800acdc <__kernel_rem_pio2+0x26c>
 800acf2:	ab06      	add	r3, sp, #24
 800acf4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800acf8:	3801      	subs	r0, #1
 800acfa:	431a      	orrs	r2, r3
 800acfc:	e7a6      	b.n	800ac4c <__kernel_rem_pio2+0x1dc>
 800acfe:	3201      	adds	r2, #1
 800ad00:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800ad04:	2e00      	cmp	r6, #0
 800ad06:	d0fa      	beq.n	800acfe <__kernel_rem_pio2+0x28e>
 800ad08:	9b05      	ldr	r3, [sp, #20]
 800ad0a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800ad0e:	eb0d 0003 	add.w	r0, sp, r3
 800ad12:	9b01      	ldr	r3, [sp, #4]
 800ad14:	18ee      	adds	r6, r5, r3
 800ad16:	ab1a      	add	r3, sp, #104	; 0x68
 800ad18:	f105 0c01 	add.w	ip, r5, #1
 800ad1c:	3898      	subs	r0, #152	; 0x98
 800ad1e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ad22:	442a      	add	r2, r5
 800ad24:	4562      	cmp	r2, ip
 800ad26:	da04      	bge.n	800ad32 <__kernel_rem_pio2+0x2c2>
 800ad28:	4615      	mov	r5, r2
 800ad2a:	e709      	b.n	800ab40 <__kernel_rem_pio2+0xd0>
 800ad2c:	9804      	ldr	r0, [sp, #16]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	e7e6      	b.n	800ad00 <__kernel_rem_pio2+0x290>
 800ad32:	9b03      	ldr	r3, [sp, #12]
 800ad34:	f8dd e008 	ldr.w	lr, [sp, #8]
 800ad38:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800ad3c:	9305      	str	r3, [sp, #20]
 800ad3e:	ee07 3a90 	vmov	s15, r3
 800ad42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ad46:	2500      	movs	r5, #0
 800ad48:	eca6 7b02 	vstmia	r6!, {d7}
 800ad4c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 800ad78 <__kernel_rem_pio2+0x308>
 800ad50:	46b0      	mov	r8, r6
 800ad52:	4555      	cmp	r5, sl
 800ad54:	dd04      	ble.n	800ad60 <__kernel_rem_pio2+0x2f0>
 800ad56:	eca0 7b02 	vstmia	r0!, {d7}
 800ad5a:	f10c 0c01 	add.w	ip, ip, #1
 800ad5e:	e7e1      	b.n	800ad24 <__kernel_rem_pio2+0x2b4>
 800ad60:	ecbe 5b02 	vldmia	lr!, {d5}
 800ad64:	ed38 6b02 	vldmdb	r8!, {d6}
 800ad68:	3501      	adds	r5, #1
 800ad6a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ad6e:	e7f0      	b.n	800ad52 <__kernel_rem_pio2+0x2e2>
 800ad70:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ad74:	e76e      	b.n	800ac54 <__kernel_rem_pio2+0x1e4>
 800ad76:	bf00      	nop
	...
 800ad84:	3e700000 	.word	0x3e700000
 800ad88:	00000000 	.word	0x00000000
 800ad8c:	41700000 	.word	0x41700000
 800ad90:	0800b658 	.word	0x0800b658
 800ad94:	0800b618 	.word	0x0800b618
 800ad98:	4260      	negs	r0, r4
 800ad9a:	eeb0 0b48 	vmov.f64	d0, d8
 800ad9e:	f000 f9cb 	bl	800b138 <scalbn>
 800ada2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800af80 <__kernel_rem_pio2+0x510>
 800ada6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800adaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adae:	db18      	blt.n	800ade2 <__kernel_rem_pio2+0x372>
 800adb0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800af88 <__kernel_rem_pio2+0x518>
 800adb4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800adb8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800adbc:	aa06      	add	r2, sp, #24
 800adbe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800adc2:	eea5 0b46 	vfms.f64	d0, d5, d6
 800adc6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800adca:	f105 0b01 	add.w	fp, r5, #1
 800adce:	ee10 3a10 	vmov	r3, s0
 800add2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800add6:	ee17 3a10 	vmov	r3, s14
 800adda:	3418      	adds	r4, #24
 800addc:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800ade0:	e73f      	b.n	800ac62 <__kernel_rem_pio2+0x1f2>
 800ade2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ade6:	aa06      	add	r2, sp, #24
 800ade8:	ee10 3a10 	vmov	r3, s0
 800adec:	46ab      	mov	fp, r5
 800adee:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800adf2:	e736      	b.n	800ac62 <__kernel_rem_pio2+0x1f2>
 800adf4:	a806      	add	r0, sp, #24
 800adf6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800adfa:	9001      	str	r0, [sp, #4]
 800adfc:	ee07 0a90 	vmov	s15, r0
 800ae00:	3a01      	subs	r2, #1
 800ae02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ae06:	ee27 7b00 	vmul.f64	d7, d7, d0
 800ae0a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800ae0e:	ed21 7b02 	vstmdb	r1!, {d7}
 800ae12:	e734      	b.n	800ac7e <__kernel_rem_pio2+0x20e>
 800ae14:	ecb5 5b02 	vldmia	r5!, {d5}
 800ae18:	ecb4 6b02 	vldmia	r4!, {d6}
 800ae1c:	3001      	adds	r0, #1
 800ae1e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ae22:	4548      	cmp	r0, r9
 800ae24:	dc01      	bgt.n	800ae2a <__kernel_rem_pio2+0x3ba>
 800ae26:	4288      	cmp	r0, r1
 800ae28:	ddf4      	ble.n	800ae14 <__kernel_rem_pio2+0x3a4>
 800ae2a:	a842      	add	r0, sp, #264	; 0x108
 800ae2c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ae30:	ed81 7b00 	vstr	d7, [r1]
 800ae34:	3a01      	subs	r2, #1
 800ae36:	e726      	b.n	800ac86 <__kernel_rem_pio2+0x216>
 800ae38:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800ae3a:	2a02      	cmp	r2, #2
 800ae3c:	dc0a      	bgt.n	800ae54 <__kernel_rem_pio2+0x3e4>
 800ae3e:	2a00      	cmp	r2, #0
 800ae40:	dc2e      	bgt.n	800aea0 <__kernel_rem_pio2+0x430>
 800ae42:	d047      	beq.n	800aed4 <__kernel_rem_pio2+0x464>
 800ae44:	f008 0007 	and.w	r0, r8, #7
 800ae48:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800ae4c:	ecbd 8b06 	vpop	{d8-d10}
 800ae50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae54:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800ae56:	2a03      	cmp	r2, #3
 800ae58:	d1f4      	bne.n	800ae44 <__kernel_rem_pio2+0x3d4>
 800ae5a:	a942      	add	r1, sp, #264	; 0x108
 800ae5c:	f1a3 0208 	sub.w	r2, r3, #8
 800ae60:	440a      	add	r2, r1
 800ae62:	4611      	mov	r1, r2
 800ae64:	4658      	mov	r0, fp
 800ae66:	2800      	cmp	r0, #0
 800ae68:	f1a1 0108 	sub.w	r1, r1, #8
 800ae6c:	dc55      	bgt.n	800af1a <__kernel_rem_pio2+0x4aa>
 800ae6e:	4659      	mov	r1, fp
 800ae70:	2901      	cmp	r1, #1
 800ae72:	f1a2 0208 	sub.w	r2, r2, #8
 800ae76:	dc60      	bgt.n	800af3a <__kernel_rem_pio2+0x4ca>
 800ae78:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800af90 <__kernel_rem_pio2+0x520>
 800ae7c:	aa42      	add	r2, sp, #264	; 0x108
 800ae7e:	4413      	add	r3, r2
 800ae80:	f1bb 0f01 	cmp.w	fp, #1
 800ae84:	dc69      	bgt.n	800af5a <__kernel_rem_pio2+0x4ea>
 800ae86:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800ae8a:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800ae8e:	2e00      	cmp	r6, #0
 800ae90:	d16a      	bne.n	800af68 <__kernel_rem_pio2+0x4f8>
 800ae92:	ed87 5b00 	vstr	d5, [r7]
 800ae96:	ed87 6b02 	vstr	d6, [r7, #8]
 800ae9a:	ed87 7b04 	vstr	d7, [r7, #16]
 800ae9e:	e7d1      	b.n	800ae44 <__kernel_rem_pio2+0x3d4>
 800aea0:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800af90 <__kernel_rem_pio2+0x520>
 800aea4:	aa42      	add	r2, sp, #264	; 0x108
 800aea6:	4413      	add	r3, r2
 800aea8:	465a      	mov	r2, fp
 800aeaa:	2a00      	cmp	r2, #0
 800aeac:	da26      	bge.n	800aefc <__kernel_rem_pio2+0x48c>
 800aeae:	b35e      	cbz	r6, 800af08 <__kernel_rem_pio2+0x498>
 800aeb0:	eeb1 7b46 	vneg.f64	d7, d6
 800aeb4:	ed87 7b00 	vstr	d7, [r7]
 800aeb8:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800aebc:	aa44      	add	r2, sp, #272	; 0x110
 800aebe:	2301      	movs	r3, #1
 800aec0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800aec4:	459b      	cmp	fp, r3
 800aec6:	da22      	bge.n	800af0e <__kernel_rem_pio2+0x49e>
 800aec8:	b10e      	cbz	r6, 800aece <__kernel_rem_pio2+0x45e>
 800aeca:	eeb1 7b47 	vneg.f64	d7, d7
 800aece:	ed87 7b02 	vstr	d7, [r7, #8]
 800aed2:	e7b7      	b.n	800ae44 <__kernel_rem_pio2+0x3d4>
 800aed4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800af90 <__kernel_rem_pio2+0x520>
 800aed8:	aa42      	add	r2, sp, #264	; 0x108
 800aeda:	4413      	add	r3, r2
 800aedc:	f1bb 0f00 	cmp.w	fp, #0
 800aee0:	da05      	bge.n	800aeee <__kernel_rem_pio2+0x47e>
 800aee2:	b10e      	cbz	r6, 800aee8 <__kernel_rem_pio2+0x478>
 800aee4:	eeb1 7b47 	vneg.f64	d7, d7
 800aee8:	ed87 7b00 	vstr	d7, [r7]
 800aeec:	e7aa      	b.n	800ae44 <__kernel_rem_pio2+0x3d4>
 800aeee:	ed33 6b02 	vldmdb	r3!, {d6}
 800aef2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800aef6:	ee37 7b06 	vadd.f64	d7, d7, d6
 800aefa:	e7ef      	b.n	800aedc <__kernel_rem_pio2+0x46c>
 800aefc:	ed33 7b02 	vldmdb	r3!, {d7}
 800af00:	3a01      	subs	r2, #1
 800af02:	ee36 6b07 	vadd.f64	d6, d6, d7
 800af06:	e7d0      	b.n	800aeaa <__kernel_rem_pio2+0x43a>
 800af08:	eeb0 7b46 	vmov.f64	d7, d6
 800af0c:	e7d2      	b.n	800aeb4 <__kernel_rem_pio2+0x444>
 800af0e:	ecb2 6b02 	vldmia	r2!, {d6}
 800af12:	3301      	adds	r3, #1
 800af14:	ee37 7b06 	vadd.f64	d7, d7, d6
 800af18:	e7d4      	b.n	800aec4 <__kernel_rem_pio2+0x454>
 800af1a:	ed91 7b00 	vldr	d7, [r1]
 800af1e:	ed91 5b02 	vldr	d5, [r1, #8]
 800af22:	3801      	subs	r0, #1
 800af24:	ee37 6b05 	vadd.f64	d6, d7, d5
 800af28:	ee37 7b46 	vsub.f64	d7, d7, d6
 800af2c:	ed81 6b00 	vstr	d6, [r1]
 800af30:	ee37 7b05 	vadd.f64	d7, d7, d5
 800af34:	ed81 7b02 	vstr	d7, [r1, #8]
 800af38:	e795      	b.n	800ae66 <__kernel_rem_pio2+0x3f6>
 800af3a:	ed92 7b00 	vldr	d7, [r2]
 800af3e:	ed92 5b02 	vldr	d5, [r2, #8]
 800af42:	3901      	subs	r1, #1
 800af44:	ee37 6b05 	vadd.f64	d6, d7, d5
 800af48:	ee37 7b46 	vsub.f64	d7, d7, d6
 800af4c:	ed82 6b00 	vstr	d6, [r2]
 800af50:	ee37 7b05 	vadd.f64	d7, d7, d5
 800af54:	ed82 7b02 	vstr	d7, [r2, #8]
 800af58:	e78a      	b.n	800ae70 <__kernel_rem_pio2+0x400>
 800af5a:	ed33 6b02 	vldmdb	r3!, {d6}
 800af5e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800af62:	ee37 7b06 	vadd.f64	d7, d7, d6
 800af66:	e78b      	b.n	800ae80 <__kernel_rem_pio2+0x410>
 800af68:	eeb1 5b45 	vneg.f64	d5, d5
 800af6c:	eeb1 6b46 	vneg.f64	d6, d6
 800af70:	ed87 5b00 	vstr	d5, [r7]
 800af74:	eeb1 7b47 	vneg.f64	d7, d7
 800af78:	ed87 6b02 	vstr	d6, [r7, #8]
 800af7c:	e78d      	b.n	800ae9a <__kernel_rem_pio2+0x42a>
 800af7e:	bf00      	nop
 800af80:	00000000 	.word	0x00000000
 800af84:	41700000 	.word	0x41700000
 800af88:	00000000 	.word	0x00000000
 800af8c:	3e700000 	.word	0x3e700000
	...

0800af98 <__kernel_cos>:
 800af98:	ee10 1a90 	vmov	r1, s1
 800af9c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800afa0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800afa4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800afa8:	da05      	bge.n	800afb6 <__kernel_cos+0x1e>
 800afaa:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800afae:	ee17 3a90 	vmov	r3, s15
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d03d      	beq.n	800b032 <__kernel_cos+0x9a>
 800afb6:	ee20 5b00 	vmul.f64	d5, d0, d0
 800afba:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800afbe:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 800b038 <__kernel_cos+0xa0>
 800afc2:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 800b040 <__kernel_cos+0xa8>
 800afc6:	eea5 4b07 	vfma.f64	d4, d5, d7
 800afca:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800b048 <__kernel_cos+0xb0>
 800afce:	eea4 7b05 	vfma.f64	d7, d4, d5
 800afd2:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 800b050 <__kernel_cos+0xb8>
 800afd6:	eea7 4b05 	vfma.f64	d4, d7, d5
 800afda:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800b058 <__kernel_cos+0xc0>
 800afde:	4b22      	ldr	r3, [pc, #136]	; (800b068 <__kernel_cos+0xd0>)
 800afe0:	eea4 7b05 	vfma.f64	d7, d4, d5
 800afe4:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 800b060 <__kernel_cos+0xc8>
 800afe8:	4299      	cmp	r1, r3
 800afea:	eea7 4b05 	vfma.f64	d4, d7, d5
 800afee:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800aff2:	ee24 4b05 	vmul.f64	d4, d4, d5
 800aff6:	ee25 7b07 	vmul.f64	d7, d5, d7
 800affa:	eea5 1b04 	vfma.f64	d1, d5, d4
 800affe:	dc04      	bgt.n	800b00a <__kernel_cos+0x72>
 800b000:	ee37 7b41 	vsub.f64	d7, d7, d1
 800b004:	ee36 0b47 	vsub.f64	d0, d6, d7
 800b008:	4770      	bx	lr
 800b00a:	4b18      	ldr	r3, [pc, #96]	; (800b06c <__kernel_cos+0xd4>)
 800b00c:	4299      	cmp	r1, r3
 800b00e:	dc0d      	bgt.n	800b02c <__kernel_cos+0x94>
 800b010:	2200      	movs	r2, #0
 800b012:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800b016:	ec43 2b15 	vmov	d5, r2, r3
 800b01a:	ee36 0b45 	vsub.f64	d0, d6, d5
 800b01e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800b022:	ee37 7b41 	vsub.f64	d7, d7, d1
 800b026:	ee30 0b47 	vsub.f64	d0, d0, d7
 800b02a:	4770      	bx	lr
 800b02c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800b030:	e7f3      	b.n	800b01a <__kernel_cos+0x82>
 800b032:	eeb0 0b46 	vmov.f64	d0, d6
 800b036:	4770      	bx	lr
 800b038:	be8838d4 	.word	0xbe8838d4
 800b03c:	bda8fae9 	.word	0xbda8fae9
 800b040:	bdb4b1c4 	.word	0xbdb4b1c4
 800b044:	3e21ee9e 	.word	0x3e21ee9e
 800b048:	809c52ad 	.word	0x809c52ad
 800b04c:	be927e4f 	.word	0xbe927e4f
 800b050:	19cb1590 	.word	0x19cb1590
 800b054:	3efa01a0 	.word	0x3efa01a0
 800b058:	16c15177 	.word	0x16c15177
 800b05c:	bf56c16c 	.word	0xbf56c16c
 800b060:	5555554c 	.word	0x5555554c
 800b064:	3fa55555 	.word	0x3fa55555
 800b068:	3fd33332 	.word	0x3fd33332
 800b06c:	3fe90000 	.word	0x3fe90000

0800b070 <__kernel_sin>:
 800b070:	ee10 3a90 	vmov	r3, s1
 800b074:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b078:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b07c:	da04      	bge.n	800b088 <__kernel_sin+0x18>
 800b07e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800b082:	ee17 3a90 	vmov	r3, s15
 800b086:	b35b      	cbz	r3, 800b0e0 <__kernel_sin+0x70>
 800b088:	ee20 6b00 	vmul.f64	d6, d0, d0
 800b08c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800b090:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800b0e8 <__kernel_sin+0x78>
 800b094:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800b0f0 <__kernel_sin+0x80>
 800b098:	eea6 4b07 	vfma.f64	d4, d6, d7
 800b09c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800b0f8 <__kernel_sin+0x88>
 800b0a0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800b0a4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800b100 <__kernel_sin+0x90>
 800b0a8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800b0ac:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800b108 <__kernel_sin+0x98>
 800b0b0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800b0b4:	b930      	cbnz	r0, 800b0c4 <__kernel_sin+0x54>
 800b0b6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800b110 <__kernel_sin+0xa0>
 800b0ba:	eea6 4b07 	vfma.f64	d4, d6, d7
 800b0be:	eea4 0b05 	vfma.f64	d0, d4, d5
 800b0c2:	4770      	bx	lr
 800b0c4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800b0c8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800b0cc:	eea1 7b04 	vfma.f64	d7, d1, d4
 800b0d0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800b0d4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800b118 <__kernel_sin+0xa8>
 800b0d8:	eea5 1b07 	vfma.f64	d1, d5, d7
 800b0dc:	ee30 0b41 	vsub.f64	d0, d0, d1
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	f3af 8000 	nop.w
 800b0e8:	5acfd57c 	.word	0x5acfd57c
 800b0ec:	3de5d93a 	.word	0x3de5d93a
 800b0f0:	8a2b9ceb 	.word	0x8a2b9ceb
 800b0f4:	be5ae5e6 	.word	0xbe5ae5e6
 800b0f8:	57b1fe7d 	.word	0x57b1fe7d
 800b0fc:	3ec71de3 	.word	0x3ec71de3
 800b100:	19c161d5 	.word	0x19c161d5
 800b104:	bf2a01a0 	.word	0xbf2a01a0
 800b108:	1110f8a6 	.word	0x1110f8a6
 800b10c:	3f811111 	.word	0x3f811111
 800b110:	55555549 	.word	0x55555549
 800b114:	bfc55555 	.word	0xbfc55555
 800b118:	55555549 	.word	0x55555549
 800b11c:	3fc55555 	.word	0x3fc55555

0800b120 <fabs>:
 800b120:	ec51 0b10 	vmov	r0, r1, d0
 800b124:	ee10 2a10 	vmov	r2, s0
 800b128:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b12c:	ec43 2b10 	vmov	d0, r2, r3
 800b130:	4770      	bx	lr
 800b132:	0000      	movs	r0, r0
 800b134:	0000      	movs	r0, r0
	...

0800b138 <scalbn>:
 800b138:	ee10 1a90 	vmov	r1, s1
 800b13c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b140:	b98b      	cbnz	r3, 800b166 <scalbn+0x2e>
 800b142:	ee10 3a10 	vmov	r3, s0
 800b146:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b14a:	4319      	orrs	r1, r3
 800b14c:	d00a      	beq.n	800b164 <scalbn+0x2c>
 800b14e:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 800b200 <scalbn+0xc8>
 800b152:	4b37      	ldr	r3, [pc, #220]	; (800b230 <scalbn+0xf8>)
 800b154:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b158:	4298      	cmp	r0, r3
 800b15a:	da0b      	bge.n	800b174 <scalbn+0x3c>
 800b15c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 800b208 <scalbn+0xd0>
 800b160:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b164:	4770      	bx	lr
 800b166:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d107      	bne.n	800b17e <scalbn+0x46>
 800b16e:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b172:	4770      	bx	lr
 800b174:	ee10 1a90 	vmov	r1, s1
 800b178:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b17c:	3b36      	subs	r3, #54	; 0x36
 800b17e:	f24c 3250 	movw	r2, #50000	; 0xc350
 800b182:	4290      	cmp	r0, r2
 800b184:	dd0d      	ble.n	800b1a2 <scalbn+0x6a>
 800b186:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800b210 <scalbn+0xd8>
 800b18a:	ee10 3a90 	vmov	r3, s1
 800b18e:	eeb0 6b47 	vmov.f64	d6, d7
 800b192:	ed9f 5b21 	vldr	d5, [pc, #132]	; 800b218 <scalbn+0xe0>
 800b196:	2b00      	cmp	r3, #0
 800b198:	fe27 7b05 	vselge.f64	d7, d7, d5
 800b19c:	ee27 0b06 	vmul.f64	d0, d7, d6
 800b1a0:	4770      	bx	lr
 800b1a2:	4418      	add	r0, r3
 800b1a4:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800b1a8:	4298      	cmp	r0, r3
 800b1aa:	dcec      	bgt.n	800b186 <scalbn+0x4e>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	dd0a      	ble.n	800b1c6 <scalbn+0x8e>
 800b1b0:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800b1b4:	ec53 2b10 	vmov	r2, r3, d0
 800b1b8:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800b1bc:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800b1c0:	ec43 2b10 	vmov	d0, r2, r3
 800b1c4:	4770      	bx	lr
 800b1c6:	f110 0f35 	cmn.w	r0, #53	; 0x35
 800b1ca:	da09      	bge.n	800b1e0 <scalbn+0xa8>
 800b1cc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800b208 <scalbn+0xd0>
 800b1d0:	ee10 3a90 	vmov	r3, s1
 800b1d4:	eeb0 6b47 	vmov.f64	d6, d7
 800b1d8:	ed9f 5b11 	vldr	d5, [pc, #68]	; 800b220 <scalbn+0xe8>
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	e7db      	b.n	800b198 <scalbn+0x60>
 800b1e0:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800b1e4:	ec53 2b10 	vmov	r2, r3, d0
 800b1e8:	3036      	adds	r0, #54	; 0x36
 800b1ea:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800b1ee:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800b1f2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800b228 <scalbn+0xf0>
 800b1f6:	ec43 2b10 	vmov	d0, r2, r3
 800b1fa:	e7b1      	b.n	800b160 <scalbn+0x28>
 800b1fc:	f3af 8000 	nop.w
 800b200:	00000000 	.word	0x00000000
 800b204:	43500000 	.word	0x43500000
 800b208:	c2f8f359 	.word	0xc2f8f359
 800b20c:	01a56e1f 	.word	0x01a56e1f
 800b210:	8800759c 	.word	0x8800759c
 800b214:	7e37e43c 	.word	0x7e37e43c
 800b218:	8800759c 	.word	0x8800759c
 800b21c:	fe37e43c 	.word	0xfe37e43c
 800b220:	c2f8f359 	.word	0xc2f8f359
 800b224:	81a56e1f 	.word	0x81a56e1f
 800b228:	00000000 	.word	0x00000000
 800b22c:	3c900000 	.word	0x3c900000
 800b230:	ffff3cb0 	.word	0xffff3cb0
 800b234:	00000000 	.word	0x00000000

0800b238 <floor>:
 800b238:	ee10 1a90 	vmov	r1, s1
 800b23c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b240:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800b244:	2b13      	cmp	r3, #19
 800b246:	b530      	push	{r4, r5, lr}
 800b248:	ee10 0a10 	vmov	r0, s0
 800b24c:	ee10 5a10 	vmov	r5, s0
 800b250:	dc31      	bgt.n	800b2b6 <floor+0x7e>
 800b252:	2b00      	cmp	r3, #0
 800b254:	da15      	bge.n	800b282 <floor+0x4a>
 800b256:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800b318 <floor+0xe0>
 800b25a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b25e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b266:	dd07      	ble.n	800b278 <floor+0x40>
 800b268:	2900      	cmp	r1, #0
 800b26a:	da4e      	bge.n	800b30a <floor+0xd2>
 800b26c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b270:	4308      	orrs	r0, r1
 800b272:	d04d      	beq.n	800b310 <floor+0xd8>
 800b274:	492a      	ldr	r1, [pc, #168]	; (800b320 <floor+0xe8>)
 800b276:	2000      	movs	r0, #0
 800b278:	460b      	mov	r3, r1
 800b27a:	4602      	mov	r2, r0
 800b27c:	ec43 2b10 	vmov	d0, r2, r3
 800b280:	e020      	b.n	800b2c4 <floor+0x8c>
 800b282:	4a28      	ldr	r2, [pc, #160]	; (800b324 <floor+0xec>)
 800b284:	411a      	asrs	r2, r3
 800b286:	ea01 0402 	and.w	r4, r1, r2
 800b28a:	4304      	orrs	r4, r0
 800b28c:	d01a      	beq.n	800b2c4 <floor+0x8c>
 800b28e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800b318 <floor+0xe0>
 800b292:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b296:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b29e:	ddeb      	ble.n	800b278 <floor+0x40>
 800b2a0:	2900      	cmp	r1, #0
 800b2a2:	bfbe      	ittt	lt
 800b2a4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800b2a8:	fa40 f303 	asrlt.w	r3, r0, r3
 800b2ac:	18c9      	addlt	r1, r1, r3
 800b2ae:	ea21 0102 	bic.w	r1, r1, r2
 800b2b2:	2000      	movs	r0, #0
 800b2b4:	e7e0      	b.n	800b278 <floor+0x40>
 800b2b6:	2b33      	cmp	r3, #51	; 0x33
 800b2b8:	dd05      	ble.n	800b2c6 <floor+0x8e>
 800b2ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2be:	d101      	bne.n	800b2c4 <floor+0x8c>
 800b2c0:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b2c4:	bd30      	pop	{r4, r5, pc}
 800b2c6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800b2ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2ce:	40e2      	lsrs	r2, r4
 800b2d0:	4210      	tst	r0, r2
 800b2d2:	d0f7      	beq.n	800b2c4 <floor+0x8c>
 800b2d4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800b318 <floor+0xe0>
 800b2d8:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b2dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b2e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2e4:	ddc8      	ble.n	800b278 <floor+0x40>
 800b2e6:	2900      	cmp	r1, #0
 800b2e8:	da02      	bge.n	800b2f0 <floor+0xb8>
 800b2ea:	2b14      	cmp	r3, #20
 800b2ec:	d103      	bne.n	800b2f6 <floor+0xbe>
 800b2ee:	3101      	adds	r1, #1
 800b2f0:	ea20 0002 	bic.w	r0, r0, r2
 800b2f4:	e7c0      	b.n	800b278 <floor+0x40>
 800b2f6:	2401      	movs	r4, #1
 800b2f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b2fc:	fa04 f303 	lsl.w	r3, r4, r3
 800b300:	4418      	add	r0, r3
 800b302:	4285      	cmp	r5, r0
 800b304:	bf88      	it	hi
 800b306:	1909      	addhi	r1, r1, r4
 800b308:	e7f2      	b.n	800b2f0 <floor+0xb8>
 800b30a:	2000      	movs	r0, #0
 800b30c:	4601      	mov	r1, r0
 800b30e:	e7b3      	b.n	800b278 <floor+0x40>
 800b310:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b314:	e7b0      	b.n	800b278 <floor+0x40>
 800b316:	bf00      	nop
 800b318:	8800759c 	.word	0x8800759c
 800b31c:	7e37e43c 	.word	0x7e37e43c
 800b320:	bff00000 	.word	0xbff00000
 800b324:	000fffff 	.word	0x000fffff

0800b328 <_init>:
 800b328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32a:	bf00      	nop
 800b32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b32e:	bc08      	pop	{r3}
 800b330:	469e      	mov	lr, r3
 800b332:	4770      	bx	lr

0800b334 <_fini>:
 800b334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b336:	bf00      	nop
 800b338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b33a:	bc08      	pop	{r3}
 800b33c:	469e      	mov	lr, r3
 800b33e:	4770      	bx	lr
